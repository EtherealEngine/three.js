/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{Color as e,Vector2 as t,Vector3 as r,Vector4 as s,Matrix2 as i,Matrix3 as n,Matrix4 as o,EventDispatcher as a,MathUtils as u,WebGLCoordinateSystem as l,WebGPUCoordinateSystem as d,ColorManagement as c,SRGBTransfer as h,NoToneMapping as p,StaticDrawUsage as g,InterleavedBuffer as m,DynamicDrawUsage as f,InterleavedBufferAttribute as y,NoColorSpace as x,UnsignedIntType as b,IntType as T,BackSide as _,CubeReflectionMapping as v,CubeRefractionMapping as N,TangentSpaceNormalMap as S,ObjectSpaceNormalMap as R,InstancedInterleavedBuffer as A,InstancedBufferAttribute as E,DataArrayTexture as C,FloatType as w,FramebufferTexture as M,LinearMipmapLinearFilter as B,DepthTexture as F,Material as U,NormalBlending as P,LineBasicMaterial as I,LineDashedMaterial as L,NoBlending as D,MeshNormalMaterial as V,WebGLCubeRenderTarget as O,BoxGeometry as G,Mesh as k,Scene as z,LinearFilter as $,CubeCamera as W,CubeTexture as H,EquirectangularReflectionMapping as j,EquirectangularRefractionMapping as q,AddOperation as X,MixOperation as K,MultiplyOperation as Y,MeshBasicMaterial as Q,MeshLambertMaterial as Z,MeshPhongMaterial as J,Texture as ee,MeshStandardMaterial as te,MeshPhysicalMaterial as re,MeshToonMaterial as se,MeshMatcapMaterial as ie,SpriteMaterial as ne,PointsMaterial as oe,ShadowMaterial as ae,arrayNeedsUint32 as ue,Uint32BufferAttribute as le,Uint16BufferAttribute as de,DoubleSide as ce,Camera as he,DepthStencilFormat as pe,DepthFormat as ge,UnsignedInt248Type as me,UnsignedByteType as fe,RenderTarget as ye,Plane as xe,Object3D as be,HalfFloatType as Te,LinearMipMapLinearFilter as _e,OrthographicCamera as ve,BufferGeometry as Ne,Float32BufferAttribute as Se,BufferAttribute as Re,UVMapping as Ae,Euler as Ee,LinearSRGBColorSpace as Ce,LessCompare as we,VSMShadowMap as Me,RGFormat as Be,BasicShadowMap as Fe,SphereGeometry as Ue,CubeUVReflectionMapping as Pe,PerspectiveCamera as Ie,RGBAFormat as Le,LinearMipmapNearestFilter as De,NearestMipmapLinearFilter as Ve,Float16BufferAttribute as Oe,REVISION as Ge,ArrayCamera as ke,WebXRController as ze,RAD2DEG as $e,SRGBColorSpace as We,PCFShadowMap as He,FrontSide as je,Frustum as qe,DataTexture as Xe,RedIntegerFormat as Ke,RedFormat as Ye,RGIntegerFormat as Qe,RGBIntegerFormat as Ze,RGBFormat as Je,RGBAIntegerFormat as et,UnsignedShortType as tt,ByteType as rt,ShortType as st,warnOnce as it,createCanvasElement as nt,AddEquation as ot,SubtractEquation as at,ReverseSubtractEquation as ut,ZeroFactor as lt,OneFactor as dt,SrcColorFactor as ct,SrcAlphaFactor as ht,SrcAlphaSaturateFactor as pt,DstColorFactor as gt,DstAlphaFactor as mt,OneMinusSrcColorFactor as ft,OneMinusSrcAlphaFactor as yt,OneMinusDstColorFactor as xt,OneMinusDstAlphaFactor as bt,CullFaceNone as Tt,CullFaceBack as _t,CullFaceFront as vt,CustomBlending as Nt,MultiplyBlending as St,SubtractiveBlending as Rt,AdditiveBlending as At,NotEqualDepth as Et,GreaterDepth as Ct,GreaterEqualDepth as wt,EqualDepth as Mt,LessEqualDepth as Bt,LessDepth as Ft,AlwaysDepth as Ut,NeverDepth as Pt,UnsignedShort4444Type as It,UnsignedShort5551Type as Lt,UnsignedInt5999Type as Dt,AlphaFormat as Vt,LuminanceFormat as Ot,LuminanceAlphaFormat as Gt,RGB_S3TC_DXT1_Format as kt,RGBA_S3TC_DXT1_Format as zt,RGBA_S3TC_DXT3_Format as $t,RGBA_S3TC_DXT5_Format as Wt,RGB_PVRTC_4BPPV1_Format as Ht,RGB_PVRTC_2BPPV1_Format as jt,RGBA_PVRTC_4BPPV1_Format as qt,RGBA_PVRTC_2BPPV1_Format as Xt,RGB_ETC1_Format as Kt,RGB_ETC2_Format as Yt,RGBA_ETC2_EAC_Format as Qt,RGBA_ASTC_4x4_Format as Zt,RGBA_ASTC_5x4_Format as Jt,RGBA_ASTC_5x5_Format as er,RGBA_ASTC_6x5_Format as tr,RGBA_ASTC_6x6_Format as rr,RGBA_ASTC_8x5_Format as sr,RGBA_ASTC_8x6_Format as ir,RGBA_ASTC_8x8_Format as nr,RGBA_ASTC_10x5_Format as or,RGBA_ASTC_10x6_Format as ar,RGBA_ASTC_10x8_Format as ur,RGBA_ASTC_10x10_Format as lr,RGBA_ASTC_12x10_Format as dr,RGBA_ASTC_12x12_Format as cr,RGBA_BPTC_Format as hr,RED_RGTC1_Format as pr,SIGNED_RED_RGTC1_Format as gr,RED_GREEN_RGTC2_Format as mr,SIGNED_RED_GREEN_RGTC2_Format as fr,RepeatWrapping as yr,ClampToEdgeWrapping as xr,MirroredRepeatWrapping as br,NearestFilter as Tr,NearestMipmapNearestFilter as _r,NeverCompare as vr,AlwaysCompare as Nr,LessEqualCompare as Sr,EqualCompare as Rr,GreaterEqualCompare as Ar,GreaterCompare as Er,NotEqualCompare as Cr,NotEqualStencilFunc as wr,GreaterStencilFunc as Mr,GreaterEqualStencilFunc as Br,EqualStencilFunc as Fr,LessEqualStencilFunc as Ur,LessStencilFunc as Pr,AlwaysStencilFunc as Ir,NeverStencilFunc as Lr,DecrementWrapStencilOp as Dr,IncrementWrapStencilOp as Vr,DecrementStencilOp as Or,IncrementStencilOp as Gr,InvertStencilOp as kr,ReplaceStencilOp as zr,ZeroStencilOp as $r,KeepStencilOp as Wr,MaxEquation as Hr,MinEquation as jr,SpotLight as qr,PointLight as Xr,DirectionalLight as Kr,RectAreaLight as Yr,AmbientLight as Qr,HemisphereLight as Zr,LightProbe as Jr,LinearToneMapping as es,ReinhardToneMapping as ts,CineonToneMapping as rs,ACESFilmicToneMapping as ss,AgXToneMapping as is,NeutralToneMapping as ns,Group as os,Loader as as,FileLoader as us,MaterialLoader as ls,ObjectLoader as ds}from"./three.core.min.js";export{AdditiveAnimationBlendMode,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BasicDepthPacking,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxHelper,BufferGeometryLoader,Cache,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CircleGeometry,Clock,ColorKeyframeTrack,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeTextureLoader,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceFrontBack,Curve,CurvePath,CustomToneMapping,CylinderGeometry,Cylindrical,Data3DTexture,DataTextureLoader,DataUtils,DefaultLoadingManager,DetachedBindMode,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DynamicCopyUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,ExtrudeGeometry,Fog,FogExp2,GLBufferAttribute,GLSL1,GLSL3,GridHelper,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,InstancedBufferGeometry,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,KeyframeTrack,LOD,LatheGeometry,Layers,Light,Line,Line3,LineCurve,LineCurve3,LineLoop,LineSegments,LinearInterpolant,LinearMipMapNearestFilter,LinearTransfer,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,MeshDepthMaterial,MeshDistanceMaterial,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NormalAnimationBlendMode,NumberKeyframeTrack,OctahedronGeometry,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,PCFSoftShadowMap,Path,PlaneGeometry,PlaneHelper,PointLightHelper,Points,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,Quaternion,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RGBADepthPacking,RGBDepthPacking,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGDepthPacking,RawShaderMaterial,Ray,Raycaster,RenderTarget3D,RenderTargetArray,RingGeometry,ShaderMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,Skeleton,SkeletonHelper,SkinnedMesh,Source,Sphere,Spherical,SphericalHarmonics3,SplineCurve,SpotLightHelper,Sprite,StaticCopyUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,TOUCH,TetrahedronGeometry,TextureLoader,TextureUtils,TimestampQuery,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,VectorKeyframeTrack,VideoFrameTexture,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLRenderTarget,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroSlopeEnding}from"./three.core.min.js";const cs=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class hs{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=cs,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:s,object:i}=e;if(t={material:this.getMaterialData(s),geometry:{id:r.id,attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:i.matrixWorld.clone()},i.center&&(t.center=i.center.clone()),i.morphTargetInfluences&&(t.morphTargetInfluences=i.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:s}=e.context;t.bufferWidth=r,t.bufferHeight=s}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const s=e[r];t[r]={version:s.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.nodes.modelViewMatrix||null!==e.renderer.nodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const s=e[r];null!=s&&("object"==typeof s&&void 0!==s.clone?!0===s.isTexture?t[r]={id:s.id,version:s.version}:t[r]=s.clone():t[r]=s)}return t}equals(e){const{object:t,material:r,geometry:s}=e,i=this.getRenderObjectData(e);if(!0!==i.worldMatrix.equals(t.matrixWorld))return i.worldMatrix.copy(t.matrixWorld),!1;const n=i.material;for(const e in n){const t=n[e],s=r[e];if(void 0!==t.equals){if(!1===t.equals(s))return t.copy(s),!1}else if(!0===s.isTexture){if(t.id!==s.id||t.version!==s.version)return t.id=s.id,t.version=s.version,!1}else if(t!==s)return n[e]=s,!1}if(n.transmission>0){const{width:t,height:r}=e.context;if(i.bufferWidth!==t||i.bufferHeight!==r)return i.bufferWidth=t,i.bufferHeight=r,!1}const o=i.geometry,a=s.attributes,u=o.attributes,l=Object.keys(u),d=Object.keys(a);if(o.id!==s.id)return o.id=s.id,!1;if(l.length!==d.length)return i.geometry.attributes=this.getAttributesData(a),!1;for(const e of l){const t=u[e],r=a[e];if(void 0===r)return delete u[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const c=s.index,h=o.indexVersion,p=c?c.version:null;if(h!==p)return o.indexVersion=p,!1;if(o.drawRange.start!==s.drawRange.start||o.drawRange.count!==s.drawRange.count)return o.drawRange.start=s.drawRange.start,o.drawRange.count=s.drawRange.count,!1;if(i.morphTargetInfluences){let e=!1;for(let r=0;r<i.morphTargetInfluences.length;r++)i.morphTargetInfluences[r]!==t.morphTargetInfluences[r]&&(e=!0);if(e)return!0}return i.center&&!1===i.center.equals(t.center)?(i.center.copy(t.center),!0):(null!==e.bundle&&(i.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const s=!0===e.object.static,i=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(s||i)return!1;return!0!==this.equals(e)}}function ps(e,t=0){let r=3735928559^t,s=1103547991^t;if(e instanceof Array)for(let t,i=0;i<e.length;i++)t=e[i],r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);else for(let t,i=0;i<e.length;i++)t=e.charCodeAt(i),r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);return r=Math.imul(r^r>>>16,2246822507),r^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(r^r>>>13,3266489909),4294967296*(2097151&s)+(r>>>0)}const gs=e=>ps(e),ms=e=>ps(e),fs=(...e)=>ps(e);function ys(e,t=!1){const r=[];!0===e.isNode&&(r.push(e.id),e=e.getSelf());for(const{property:s,childNode:i}of xs(e))r.push(ps(s.slice(0,-4)),i.getCacheKey(t));return ps(r)}function*xs(e,t=!1){for(const r in e){if(!0===r.startsWith("_"))continue;const s=e[r];if(!0===Array.isArray(s))for(let e=0;e<s.length;e++){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}else if(s&&!0===s.isNode)yield{property:r,childNode:s};else if("object"==typeof s)for(const e in s){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}}}const bs=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),Ts=new WeakMap;function _s(e){return bs.get(e)}function vs(e){if(/[iu]?vec\d/.test(e))return e.startsWith("ivec")?Int32Array:e.startsWith("uvec")?Uint32Array:Float32Array;if(/mat\d/.test(e))return Float32Array;if(/float/.test(e))return Float32Array;if(/uint/.test(e))return Uint32Array;if(/int/.test(e))return Int32Array;throw new Error(`THREE.NodeUtils: Unsupported type: ${e}`)}function Ns(e){return/float|int|uint/.test(e)?1:/vec2/.test(e)?2:/vec3/.test(e)?3:/vec4/.test(e)||/mat2/.test(e)?4:/mat3/.test(e)?9:/mat4/.test(e)?16:void console.error("THREE.TSL: Unsupported type:",e)}function Ss(e){if(null==e)return null;const t=typeof e;return!0===e.isNode?"node":"number"===t?"float":"boolean"===t?"bool":"string"===t?"string":"function"===t?"shader":!0===e.isVector2?"vec2":!0===e.isVector3?"vec3":!0===e.isVector4?"vec4":!0===e.isMatrix2?"mat2":!0===e.isMatrix3?"mat3":!0===e.isMatrix4?"mat4":!0===e.isColor?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function Rs(a,...u){const l=a?a.slice(-4):void 0;return 1===u.length&&("vec2"===l?u=[u[0],u[0]]:"vec3"===l?u=[u[0],u[0],u[0]]:"vec4"===l&&(u=[u[0],u[0],u[0],u[0]])),"color"===a?new e(...u):"vec2"===l?new t(...u):"vec3"===l?new r(...u):"vec4"===l?new s(...u):"mat2"===l?new i(...u):"mat3"===l?new n(...u):"mat4"===l?new o(...u):"bool"===a?u[0]||!1:"float"===a||"int"===a||"uint"===a?u[0]||0:"string"===a?u[0]||"":"ArrayBuffer"===a?Cs(u[0]):null}function As(e){let t=Ts.get(e);return void 0===t&&(t={},Ts.set(e,t)),t}function Es(e){let t="";const r=new Uint8Array(e);for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return btoa(t)}function Cs(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0))).buffer}var ws=Object.freeze({__proto__:null,arrayBufferToBase64:Es,base64ToArrayBuffer:Cs,getCacheKey:ys,getDataFromObject:As,getLengthFromType:Ns,getNodeChildren:xs,getTypeFromLength:_s,getTypedArrayFromType:vs,getValueFromType:Rs,getValueType:Ss,hash:fs,hashArray:ms,hashString:gs});const Ms={VERTEX:"vertex",FRAGMENT:"fragment"},Bs={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},Fs={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},Us={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},Ps=["fragment","vertex"],Is=["setup","analyze","generate"],Ls=[...Ps,"compute"],Ds=["x","y","z","w"];let Vs=0;class Os extends a{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=Bs.NONE,this.updateBeforeType=Bs.NONE,this.updateAfterType=Bs.NONE,this.uuid=u.generateUUID(),this.version=0,this.global=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:Vs++})}set needsUpdate(e){!0===e&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,Bs.FRAME)}onRenderUpdate(e){return this.onUpdate(e,Bs.RENDER)}onObjectUpdate(e){return this.onUpdate(e,Bs.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of xs(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return!0!==(e=e||this.version!==this._cacheKeyVersion)&&null!==this._cacheKey||(this._cacheKey=fs(ys(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getMemberType(){return"void"}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let r=0;for(const e of this.getChildren())t["node"+r++]=e;return t.outputNode||null}analyze(e){if(1===e.increaseUsage(this)){const t=e.getNodeProperties(this);for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e)}}generate(e,t){const{outputNode:r}=e.getNodeProperties(this);if(r&&!0===r.isNode)return r.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const r=this.getShared(e);if(this!==r)return r.build(e,t);e.addNode(this),e.addChain(this);let s=null;const i=e.getBuildStage();if("setup"===i){this.updateReference(e);const t=e.getNodeProperties(this);if(!0!==t.initialized){t.initialized=!0;const r=this.setup(e),s=r&&!0===r.isNode;for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e);s&&r.build(e),t.outputNode=r}}else if("analyze"===i)this.analyze(e);else if("generate"===i){if(1===this.generate.length){const r=this.getNodeType(e),i=e.getDataFromNode(this);s=i.snippet,void 0===s?(s=this.generate(e)||"",i.snippet=s):void 0!==i.flowCodes&&void 0!==e.context.nodeBlock&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),s=e.format(s,r,t)}else s=this.generate(e,t)||""}return e.removeChain(this),e.addSequentialNode(this),s}getSerializeChildren(){return xs(this)}serialize(e){const t=this.getSerializeChildren(),r={};for(const{property:s,index:i,childNode:n}of t)void 0!==i?(void 0===r[s]&&(r[s]=Number.isInteger(i)?[]:{}),r[s][i]=n.toJSON(e.meta).uuid):r[s]=n.toJSON(e.meta).uuid;Object.keys(r).length>0&&(e.inputNodes=r)}deserialize(e){if(void 0!==e.inputNodes){const t=e.meta.nodes;for(const r in e.inputNodes)if(Array.isArray(e.inputNodes[r])){const s=[];for(const i of e.inputNodes[r])s.push(t[i]);this[r]=s}else if("object"==typeof e.inputNodes[r]){const s={};for(const i in e.inputNodes[r]){const n=e.inputNodes[r][i];s[i]=t[n]}this[r]=s}else{const s=e.inputNodes[r];this[r]=t[s]}}}toJSON(e){const{uuid:t,type:r}=this,s=void 0===e||"string"==typeof e;s&&(e={textures:{},images:{},nodes:{}});let i=e.nodes[t];function n(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(void 0===i&&(i={uuid:t,type:r,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},!0!==s&&(e.nodes[i.uuid]=i),this.serialize(i),delete i.meta),s){const t=n(e.textures),r=n(e.images),s=n(e.nodes);t.length>0&&(i.textures=t),r.length>0&&(i.images=r),s.length>0&&(i.nodes=s)}return i}}class Gs extends Os{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){return`${this.node.build(e)}[ ${this.indexNode.build(e,"uint")} ]`}}class ks extends Os{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let r=null;for(const s of this.convertTo.split("|"))null!==r&&e.getTypeLength(t)!==e.getTypeLength(s)||(r=s);return r}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const r=this.node,s=this.getNodeType(e),i=r.build(e,s);return e.format(i,s,t)}}class zs extends Os{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if("generate"===e.getBuildStage()){const r=e.getVectorType(this.getNodeType(e,t)),s=e.getDataFromNode(this);if(void 0!==s.propertyName)return e.format(s.propertyName,r,t);if("void"!==r&&"void"!==t&&this.hasDependencies(e)){const i=super.build(e,r),n=e.getVarFromNode(this,null,r),o=e.getPropertyName(n);return e.addLineFlowCode(`${o} = ${i}`,this),s.snippet=i,s.propertyName=o,e.format(s.propertyName,r,t)}}return super.build(e,t)}}class $s extends zs{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return null!==this.nodeType?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce(((t,r)=>t+e.getTypeLength(r.getNodeType(e))),0))}generate(e,t){const r=this.getNodeType(e),s=this.nodes,i=e.getComponentType(r),n=[];for(const t of s){let r=t.build(e);const s=e.getComponentType(t.getNodeType(e));s!==i&&(r=e.format(r,s,i)),n.push(r)}const o=`${e.getType(r)}( ${n.join(", ")} )`;return e.format(o,r,t)}}const Ws=Ds.join("");class Hs extends Os{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(Ds.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const r=this.node,s=e.getTypeLength(r.getNodeType(e));let i=null;if(s>1){let n=null;this.getVectorLength()>=s&&(n=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const o=r.build(e,n);i=this.components.length===s&&this.components===Ws.slice(0,this.components.length)?e.format(o,n,t):e.format(`${o}.${this.components}`,this.getNodeType(e),t)}else i=r.build(e,t);return i}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class js extends zs{static get type(){return"SetNode"}constructor(e,t,r){super(),this.sourceNode=e,this.components=t,this.targetNode=r}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:r,targetNode:s}=this,i=this.getNodeType(e),n=e.getComponentType(s.getNodeType(e)),o=e.getTypeFromLength(r.length,n),a=s.build(e,o),u=t.build(e,i),l=e.getTypeLength(i),d=[];for(let e=0;e<l;e++){const t=Ds[e];t===r[0]?(d.push(a),e+=r.length-1):d.push(u+"."+t)}return`${e.getType(i)}( ${d.join(", ")} )`}}class qs extends zs{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:r}=this,s=this.getNodeType(e),i=r.build(e),n=e.getVarFromNode(this),o=e.getPropertyName(n);e.addLineFlowCode(o+" = "+i,this);const a=e.getTypeLength(s),u=[];let l=0;for(let e=0;e<a;e++){const r=Ds[e];r===t[l]?(u.push("1.0 - "+o+"."+r),l++):u.push(o+"."+r)}return`${e.getType(s)}( ${u.join(", ")} )`}}class Xs extends Os{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return null===this.nodeType?Ss(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=Ss(this.value),e.nodeType=this.nodeType,"ArrayBuffer"===e.valueType&&(e.value=Es(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?Rs(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}const Ks=/float|u?int/;class Ys extends Xs{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const r=this.getNodeType(e);return Ks.test(r)&&Ks.test(t)?e.generateConst(t,this.value):e.format(this.generateConst(e),r,t)}}class Qs extends Os{static get type(){return"MemberNode"}constructor(e,t){super(),this.node=e,this.property=t,this.isMemberNode=!0}getNodeType(e){return this.node.getMemberType(e,this.property)}generate(e){return this.node.build(e)+"."+this.property}}let Zs=null;const Js=new Map;function ei(e,t){if(Js.has(e))console.warn(`Redefinition of method chaining ${e}`);else{if("function"!=typeof t)throw new Error(`Node element ${e} is not a function`);Js.set(e,t)}}const ti=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),ri=e=>ti(e).split("").sort().join(""),si={setup(e,t){const r=t.shift();return e(Ci(r),...t)},get(e,t,r){if("string"==typeof t&&void 0===e[t]){if(!0!==e.isStackNode&&"assign"===t)return(...e)=>(Zs.assign(r,...e),r);if(Js.has(t)){const s=Js.get(t);return e.isStackNode?(...e)=>r.add(s(...e)):(...e)=>s(r,...e)}if("self"===t)return e;if(t.endsWith("Assign")&&Js.has(t.slice(0,t.length-6))){const s=Js.get(t.slice(0,t.length-6));return e.isStackNode?(...e)=>r.assign(e[0],s(...e)):(...e)=>r.assign(s(r,...e))}if(!0===/^[xyzwrgbastpq]{1,4}$/.test(t))return t=ti(t),Ei(new Hs(r,t));if(!0===/^set[XYZWRGBASTPQ]{1,4}$/.test(t))return t=ri(t.slice(3).toLowerCase()),r=>Ei(new js(e,t,r));if(!0===/^flip[XYZWRGBASTPQ]{1,4}$/.test(t))return t=ri(t.slice(4).toLowerCase()),()=>Ei(new qs(Ei(e),t));if("width"===t||"height"===t||"depth"===t)return"width"===t?t="x":"height"===t?t="y":"depth"===t&&(t="z"),Ei(new Hs(e,t));if(!0===/^\d+$/.test(t))return Ei(new Gs(r,new Ys(Number(t),"uint")));if(!0===/^get$/.test(t))return e=>Ei(new Qs(r,e))}return Reflect.get(e,t,r)},set:(e,t,r,s)=>"string"!=typeof t||void 0!==e[t]||!0!==/^[xyzwrgbastpq]{1,4}$/.test(t)&&"width"!==t&&"height"!==t&&"depth"!==t&&!0!==/^\d+$/.test(t)?Reflect.set(e,t,r,s):(s[t].assign(r),!0)},ii=new WeakMap,ni=new WeakMap,oi=function(e,t=null){for(const r in e)e[r]=Ei(e[r],t);return e},ai=function(e,t=null){const r=e.length;for(let s=0;s<r;s++)e[s]=Ei(e[s],t);return e},ui=function(e,t=null,r=null,s=null){const i=e=>Ei(null!==s?Object.assign(e,s):e);return null===t?(...t)=>i(new e(...wi(t))):null!==r?(r=Ei(r),(...s)=>i(new e(t,...wi(s),r))):(...r)=>i(new e(t,...wi(r)))},li=function(e,...t){return Ei(new e(...wi(t)))};class di extends Os{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}getMemberType(e,t){return this.getOutputNode(e).getMemberType(e,t)}call(e){const{shaderNode:t,inputNodes:r}=this,s=e.getNodeProperties(t);if(s.onceOutput)return s.onceOutput;let i=null;if(t.layout){let s=ni.get(e.constructor);void 0===s&&(s=new WeakMap,ni.set(e.constructor,s));let n=s.get(t);void 0===n&&(n=Ei(e.buildFunctionNode(t)),s.set(t,n)),null!==e.currentFunctionNode&&e.currentFunctionNode.includes.push(n),i=Ei(n.call(r))}else{const s=t.jsFunc,n=null!==r||s.length>1?s(r||[],e):s(e);i=Ei(n)}return t.once&&(s.onceOutput=i),i}getOutputNode(e){const t=e.getNodeProperties(this);return null===t.outputNode&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class ci extends Os{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return Ci(e),Ei(new di(this,e))}setup(){return this.call()}}const hi=[!1,!0],pi=[0,1,2,3],gi=[-1,-2],mi=[.5,1.5,1/3,1e-6,1e6,Math.PI,2*Math.PI,1/Math.PI,2/Math.PI,1/(2*Math.PI),Math.PI/2],fi=new Map;for(const e of hi)fi.set(e,new Ys(e));const yi=new Map;for(const e of pi)yi.set(e,new Ys(e,"uint"));const xi=new Map([...yi].map((e=>new Ys(e.value,"int"))));for(const e of gi)xi.set(e,new Ys(e,"int"));const bi=new Map([...xi].map((e=>new Ys(e.value))));for(const e of mi)bi.set(e,new Ys(e));for(const e of mi)bi.set(-e,new Ys(-e));const Ti={bool:fi,uint:yi,ints:xi,float:bi},_i=new Map([...fi,...bi]),vi=(e,t)=>_i.has(e)?_i.get(e):!0===e.isNode?e:new Ys(e,t),Ni=function(e,t=null){return(...r)=>{if((0===r.length||!["bool","float","int","uint"].includes(e)&&r.every((e=>"object"!=typeof e)))&&(r=[Rs(e,...r)]),1===r.length&&null!==t&&t.has(r[0]))return Ei(t.get(r[0]));if(1===r.length){const t=vi(r[0],e);return(e=>{try{return e.getNodeType()}catch(e){return}})(t)===e?Ei(t):Ei(new ks(t,e))}const s=r.map((e=>vi(e)));return Ei(new $s(s,e))}},Si=e=>"object"==typeof e&&null!==e?e.value:e,Ri=e=>null!=e?e.nodeType||e.convertTo||("string"==typeof e?e:null):null;function Ai(e,t){return new Proxy(new ci(e,t),si)}const Ei=(e,t=null)=>function(e,t=null){const r=Ss(e);if("node"===r){let t=ii.get(e);return void 0===t&&(t=new Proxy(e,si),ii.set(e,t),ii.set(t,t)),t}return null===t&&("float"===r||"boolean"===r)||r&&"shader"!==r&&"string"!==r?Ei(vi(e,t)):"shader"===r?Fi(e):e}(e,t),Ci=(e,t=null)=>new oi(e,t),wi=(e,t=null)=>new ai(e,t),Mi=(...e)=>new ui(...e),Bi=(...e)=>new li(...e),Fi=(e,t)=>{const r=new Ai(e,t),s=(...e)=>{let t;return Ci(e),t=e[0]&&e[0].isNode?[...e]:e[0],r.call(t)};return s.shaderNode=r,s.setLayout=e=>(r.setLayout(e),s),s.once=()=>(r.once=!0,s),s};ei("toGlobal",(e=>(e.global=!0,e)));const Ui=e=>{Zs=e},Pi=()=>Zs,Ii=(...e)=>Zs.If(...e);function Li(e){return Zs&&Zs.add(e),e}ei("append",Li);const Di=new Ni("color"),Vi=new Ni("float",Ti.float),Oi=new Ni("int",Ti.ints),Gi=new Ni("uint",Ti.uint),ki=new Ni("bool",Ti.bool),zi=new Ni("vec2"),$i=new Ni("ivec2"),Wi=new Ni("uvec2"),Hi=new Ni("bvec2"),ji=new Ni("vec3"),qi=new Ni("ivec3"),Xi=new Ni("uvec3"),Ki=new Ni("bvec3"),Yi=new Ni("vec4"),Qi=new Ni("ivec4"),Zi=new Ni("uvec4"),Ji=new Ni("bvec4"),en=new Ni("mat2"),tn=new Ni("mat3"),rn=new Ni("mat4");ei("toColor",Di),ei("toFloat",Vi),ei("toInt",Oi),ei("toUint",Gi),ei("toBool",ki),ei("toVec2",zi),ei("toIVec2",$i),ei("toUVec2",Wi),ei("toBVec2",Hi),ei("toVec3",ji),ei("toIVec3",qi),ei("toUVec3",Xi),ei("toBVec3",Ki),ei("toVec4",Yi),ei("toIVec4",Qi),ei("toUVec4",Zi),ei("toBVec4",Ji),ei("toMat2",en),ei("toMat3",tn),ei("toMat4",rn);const sn=Mi(Gs),nn=(e,t)=>Ei(new ks(Ei(e),t));ei("element",sn),ei("convert",nn);class on extends zs{static get type(){return"ArrayNode"}constructor(e,t,r=null){super(e),this.count=t,this.values=r,this.isArrayNode=!0}getNodeType(e){return null===this.nodeType&&(this.nodeType=this.values[0].getNodeType(e)),this.nodeType}getElementType(e){return this.getNodeType(e)}generate(e){const t=this.getNodeType(e);return e.generateArray(t,this.count,this.values)}}const an=(...e)=>{let t;if(1===e.length){const r=e[0];t=new on(null,r.length,r)}else{const r=e[0],s=e[1];t=new on(r,s)}return Ei(t)};ei("toArray",((e,t)=>an(Array(t).fill(e))));class un extends Os{static get type(){return"UniformGroupNode"}constructor(e,t=!1,r=1){super("string"),this.name=e,this.shared=t,this.order=r,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const ln=e=>new un(e),dn=(e,t=0)=>new un(e,!0,t),cn=dn("frame"),hn=dn("render"),pn=ln("object");class gn extends Xs{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=pn}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const r=this.getSelf();return e=e.bind(r),super.onUpdate((t=>{const s=e(t,r);void 0!==s&&(this.value=s)}),t)}generate(e,t){const r=this.getNodeType(e),s=this.getUniformHash(e);let i=e.getNodeFromHash(s);void 0===i&&(e.setHashNode(this,s),i=this);const n=i.getInputType(e),o=e.getUniformFromNode(i,n,e.shaderStage,this.name||e.context.label),a=e.getPropertyName(o);return void 0!==e.context.label&&delete e.context.label,e.format(a,r,t)}}const mn=(e,t)=>{const r=Ri(t||e),s=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return Ei(new gn(s,r))};class fn extends Os{static get type(){return"PropertyNode"}constructor(e,t=null,r=!1){super(e),this.name=t,this.varying=r,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return!0===this.varying?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const yn=(e,t)=>Ei(new fn(e,t)),xn=(e,t)=>Ei(new fn(e,t,!0)),bn=Bi(fn,"vec4","DiffuseColor"),Tn=Bi(fn,"vec3","EmissiveColor"),_n=Bi(fn,"float","Roughness"),vn=Bi(fn,"float","Metalness"),Nn=Bi(fn,"float","Clearcoat"),Sn=Bi(fn,"float","ClearcoatRoughness"),Rn=Bi(fn,"vec3","Sheen"),An=Bi(fn,"float","SheenRoughness"),En=Bi(fn,"float","Iridescence"),Cn=Bi(fn,"float","IridescenceIOR"),wn=Bi(fn,"float","IridescenceThickness"),Mn=Bi(fn,"float","AlphaT"),Bn=Bi(fn,"float","Anisotropy"),Fn=Bi(fn,"vec3","AnisotropyT"),Un=Bi(fn,"vec3","AnisotropyB"),Pn=Bi(fn,"color","SpecularColor"),In=Bi(fn,"float","SpecularF90"),Ln=Bi(fn,"float","Shininess"),Dn=Bi(fn,"vec4","Output"),Vn=Bi(fn,"float","dashSize"),On=Bi(fn,"float","gapSize"),Gn=Bi(fn,"float","pointWidth"),kn=Bi(fn,"float","IOR"),zn=Bi(fn,"float","Transmission"),$n=Bi(fn,"float","Thickness"),Wn=Bi(fn,"float","AttenuationDistance"),Hn=Bi(fn,"color","AttenuationColor"),jn=Bi(fn,"float","Dispersion");class qn extends zs{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return"void"!==t?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(!1===e.isAvailable("swizzleAssign")&&t.isSplitNode&&t.components.length>1){const r=e.getTypeLength(t.node.getNodeType(e));return Ds.join("").slice(0,r)!==t.components}return!1}generate(e,t){const{targetNode:r,sourceNode:s}=this,i=this.needsSplitAssign(e),n=r.getNodeType(e),o=r.context({assign:!0}).build(e),a=s.build(e,n),u=s.getNodeType(e),l=e.getDataFromNode(this);let d;if(!0===l.initialized)"void"!==t&&(d=o);else if(i){const s=e.getVarFromNode(this,null,n),i=e.getPropertyName(s);e.addLineFlowCode(`${i} = ${a}`,this);const u=r.node.context({assign:!0}).build(e);for(let t=0;t<r.components.length;t++){const s=r.components[t];e.addLineFlowCode(`${u}.${s} = ${i}[ ${t} ]`,this)}"void"!==t&&(d=o)}else d=`${o} = ${a}`,"void"!==t&&"void"!==u||(e.addLineFlowCode(d,this),"void"!==t&&(d=o));return l.initialized=!0,e.format(d,n,t)}}const Xn=Mi(qn);ei("assign",Xn);class Kn extends zs{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],r=this.functionNode,s=r.getInputs(e),i=this.parameters,n=(t,r)=>{const s=r.type;let i;return i="pointer"===s?"&"+t.build(e):t.build(e,s),i};if(Array.isArray(i))for(let e=0;e<i.length;e++)t.push(n(i[e],s[e]));else for(const e of s){const r=i[e.name];if(void 0===r)throw new Error(`FunctionCallNode: Input '${e.name}' not found in FunctionNode.`);t.push(n(r,e))}return`${r.build(e,"property")}( ${t.join(", ")} )`}}const Yn=(e,...t)=>(t=t.length>1||t[0]&&!0===t[0].isNode?wi(t):Ci(t[0]),Ei(new Kn(Ei(e),t)));ei("call",Yn);class Qn extends zs{static get type(){return"OperatorNode"}constructor(e,t,r,...s){if(super(),s.length>0){let i=new Qn(e,t,r);for(let t=0;t<s.length-1;t++)i=new Qn(e,i,s[t]);t=i,r=s[s.length-1]}this.op=e,this.aNode=t,this.bNode=r,this.isOperatorNode=!0}getNodeType(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=s.getNodeType(e),o=void 0!==i?i.getNodeType(e):null;if("void"===n||"void"===o)return"void";if("%"===r)return n;if("~"===r||"&"===r||"|"===r||"^"===r||">>"===r||"<<"===r)return e.getIntegerType(n);if("!"===r||"=="===r||"&&"===r||"||"===r||"^^"===r)return"bool";if("<"===r||">"===r||"<="===r||">="===r){const r=t?e.getTypeLength(t):Math.max(e.getTypeLength(n),e.getTypeLength(o));return r>1?`bvec${r}`:"bool"}if(e.isMatrix(n)){if("float"===o)return n;if(e.isVector(o))return e.getVectorFromMatrix(n);if(e.isMatrix(o))return n}else if(e.isMatrix(o)){if("float"===n)return o;if(e.isVector(n))return e.getVectorFromMatrix(o)}return e.getTypeLength(o)>e.getTypeLength(n)?o:n}generate(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=this.getNodeType(e,t);let o=null,a=null;"void"!==n?(o=s.getNodeType(e),a=void 0!==i?i.getNodeType(e):null,"<"===r||">"===r||"<="===r||">="===r||"=="===r?e.isVector(o)?a=o:o!==a&&(o=a="float"):">>"===r||"<<"===r?(o=n,a=e.changeComponentType(a,"uint")):e.isMatrix(o)?"float"===a?a="float":e.isVector(a)?a=e.getVectorFromMatrix(o):e.isMatrix(a)||(o=a=n):o=e.isMatrix(a)?"float"===o?"float":e.isVector(o)?e.getVectorFromMatrix(a):a=n:a=n):o=a=n;const u=s.build(e,o),l=void 0!==i?i.build(e,a):null,d=e.getTypeLength(t),c=e.getFunctionOperator(r);return"void"!==t?"<"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} < ${l} )`,n,t):"<="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} <= ${l} )`,n,t):">"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} > ${l} )`,n,t):">="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} >= ${l} )`,n,t):"!"===r||"~"===r?e.format(`(${r}${u})`,o,t):c?e.format(`${c}( ${u}, ${l} )`,n,t):e.isMatrix(o)&&"float"===a?e.format(`( ${l} ${r} ${u} )`,n,t):"float"===o&&e.isMatrix(a)?e.format(`${u} ${r} ${l}`,n,t):e.format(`( ${u} ${r} ${l} )`,n,t):"void"!==o?c?e.format(`${c}( ${u}, ${l} )`,n,t):e.isMatrix(o)&&"float"===a?e.format(`${l} ${r} ${u}`,n,t):e.format(`${u} ${r} ${l}`,n,t):void 0}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const Zn=Mi(Qn,"+"),Jn=Mi(Qn,"-"),eo=Mi(Qn,"*"),to=Mi(Qn,"/"),ro=Mi(Qn,"%"),so=Mi(Qn,"=="),io=Mi(Qn,"!="),no=Mi(Qn,"<"),oo=Mi(Qn,">"),ao=Mi(Qn,"<="),uo=Mi(Qn,">="),lo=Mi(Qn,"&&"),co=Mi(Qn,"||"),ho=Mi(Qn,"!"),po=Mi(Qn,"^^"),go=Mi(Qn,"&"),mo=Mi(Qn,"~"),fo=Mi(Qn,"|"),yo=Mi(Qn,"^"),xo=Mi(Qn,"<<"),bo=Mi(Qn,">>");ei("add",Zn),ei("sub",Jn),ei("mul",eo),ei("div",to),ei("modInt",ro),ei("equal",so),ei("notEqual",io),ei("lessThan",no),ei("greaterThan",oo),ei("lessThanEqual",ao),ei("greaterThanEqual",uo),ei("and",lo),ei("or",co),ei("not",ho),ei("xor",po),ei("bitAnd",go),ei("bitNot",mo),ei("bitOr",fo),ei("bitXor",yo),ei("shiftLeft",xo),ei("shiftRight",bo);const To=(...e)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),ro(...e));ei("remainder",To);class _o extends zs{static get type(){return"MathNode"}constructor(e,t,r=null,s=null){super(),this.method=e,this.aNode=t,this.bNode=r,this.cNode=s,this.isMathNode=!0}getInputType(e){const t=this.aNode.getNodeType(e),r=this.bNode?this.bNode.getNodeType(e):null,s=this.cNode?this.cNode.getNodeType(e):null,i=e.isMatrix(t)?0:e.getTypeLength(t),n=e.isMatrix(r)?0:e.getTypeLength(r),o=e.isMatrix(s)?0:e.getTypeLength(s);return i>n&&i>o?t:n>o?r:o>i?s:t}getNodeType(e){const t=this.method;return t===_o.LENGTH||t===_o.DISTANCE||t===_o.DOT?"float":t===_o.CROSS?"vec3":t===_o.ALL?"bool":t===_o.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):t===_o.MOD?this.aNode.getNodeType(e):this.getInputType(e)}generate(e,t){let r=this.method;const s=this.getNodeType(e),i=this.getInputType(e),n=this.aNode,o=this.bNode,a=this.cNode,u=e.renderer.coordinateSystem;if(r===_o.TRANSFORM_DIRECTION){let r=n,s=o;e.isMatrix(r.getNodeType(e))?s=Yi(ji(s),0):r=Yi(ji(r),0);const i=eo(r,s).xyz;return Vo(i).build(e,t)}if(r===_o.NEGATE)return e.format("( - "+n.build(e,i)+" )",s,t);if(r===_o.ONE_MINUS)return Jn(1,n).build(e,t);if(r===_o.RECIPROCAL)return to(1,n).build(e,t);if(r===_o.DIFFERENCE)return jo(Jn(n,o)).build(e,t);{const c=[];return r===_o.CROSS||r===_o.MOD?c.push(n.build(e,s),o.build(e,s)):u===l&&r===_o.STEP?c.push(n.build(e,1===e.getTypeLength(n.getNodeType(e))?"float":i),o.build(e,i)):u===l&&(r===_o.MIN||r===_o.MAX)||r===_o.MOD?c.push(n.build(e,i),o.build(e,1===e.getTypeLength(o.getNodeType(e))?"float":i)):r===_o.REFRACT?c.push(n.build(e,i),o.build(e,i),a.build(e,"float")):r===_o.MIX?c.push(n.build(e,i),o.build(e,i),a.build(e,1===e.getTypeLength(a.getNodeType(e))?"float":i)):(u===d&&r===_o.ATAN&&null!==o&&(r="atan2"),c.push(n.build(e,i)),null!==o&&c.push(o.build(e,i)),null!==a&&c.push(a.build(e,i))),e.format(`${e.getMethod(r,s)}( ${c.join(", ")} )`,s,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}_o.ALL="all",_o.ANY="any",_o.RADIANS="radians",_o.DEGREES="degrees",_o.EXP="exp",_o.EXP2="exp2",_o.LOG="log",_o.LOG2="log2",_o.SQRT="sqrt",_o.INVERSE_SQRT="inversesqrt",_o.FLOOR="floor",_o.CEIL="ceil",_o.NORMALIZE="normalize",_o.FRACT="fract",_o.SIN="sin",_o.COS="cos",_o.TAN="tan",_o.ASIN="asin",_o.ACOS="acos",_o.ATAN="atan",_o.ABS="abs",_o.SIGN="sign",_o.LENGTH="length",_o.NEGATE="negate",_o.ONE_MINUS="oneMinus",_o.DFDX="dFdx",_o.DFDY="dFdy",_o.ROUND="round",_o.RECIPROCAL="reciprocal",_o.TRUNC="trunc",_o.FWIDTH="fwidth",_o.TRANSPOSE="transpose",_o.BITCAST="bitcast",_o.EQUALS="equals",_o.MIN="min",_o.MAX="max",_o.MOD="mod",_o.STEP="step",_o.REFLECT="reflect",_o.DISTANCE="distance",_o.DIFFERENCE="difference",_o.DOT="dot",_o.CROSS="cross",_o.POW="pow",_o.TRANSFORM_DIRECTION="transformDirection",_o.MIX="mix",_o.CLAMP="clamp",_o.REFRACT="refract",_o.SMOOTHSTEP="smoothstep",_o.FACEFORWARD="faceforward";const vo=Vi(1e-6),No=Vi(1e6),So=Vi(Math.PI),Ro=Vi(2*Math.PI),Ao=Mi(_o,_o.ALL),Eo=Mi(_o,_o.ANY),Co=Mi(_o,_o.RADIANS),wo=Mi(_o,_o.DEGREES),Mo=Mi(_o,_o.EXP),Bo=Mi(_o,_o.EXP2),Fo=Mi(_o,_o.LOG),Uo=Mi(_o,_o.LOG2),Po=Mi(_o,_o.SQRT),Io=Mi(_o,_o.INVERSE_SQRT),Lo=Mi(_o,_o.FLOOR),Do=Mi(_o,_o.CEIL),Vo=Mi(_o,_o.NORMALIZE),Oo=Mi(_o,_o.FRACT),Go=Mi(_o,_o.SIN),ko=Mi(_o,_o.COS),zo=Mi(_o,_o.TAN),$o=Mi(_o,_o.ASIN),Wo=Mi(_o,_o.ACOS),Ho=Mi(_o,_o.ATAN),jo=Mi(_o,_o.ABS),qo=Mi(_o,_o.SIGN),Xo=Mi(_o,_o.LENGTH),Ko=Mi(_o,_o.NEGATE),Yo=Mi(_o,_o.ONE_MINUS),Qo=Mi(_o,_o.DFDX),Zo=Mi(_o,_o.DFDY),Jo=Mi(_o,_o.ROUND),ea=Mi(_o,_o.RECIPROCAL),ta=Mi(_o,_o.TRUNC),ra=Mi(_o,_o.FWIDTH),sa=Mi(_o,_o.TRANSPOSE),ia=Mi(_o,_o.BITCAST),na=Mi(_o,_o.EQUALS),oa=Mi(_o,_o.MIN),aa=Mi(_o,_o.MAX),ua=Mi(_o,_o.MOD),la=Mi(_o,_o.STEP),da=Mi(_o,_o.REFLECT),ca=Mi(_o,_o.DISTANCE),ha=Mi(_o,_o.DIFFERENCE),pa=Mi(_o,_o.DOT),ga=Mi(_o,_o.CROSS),ma=Mi(_o,_o.POW),fa=Mi(_o,_o.POW,2),ya=Mi(_o,_o.POW,3),xa=Mi(_o,_o.POW,4),ba=Mi(_o,_o.TRANSFORM_DIRECTION),Ta=e=>eo(qo(e),ma(jo(e),1/3)),_a=e=>pa(e,e),va=Mi(_o,_o.MIX),Na=(e,t=0,r=1)=>Ei(new _o(_o.CLAMP,Ei(e),Ei(t),Ei(r))),Sa=e=>Na(e),Ra=Mi(_o,_o.REFRACT),Aa=Mi(_o,_o.SMOOTHSTEP),Ea=Mi(_o,_o.FACEFORWARD),Ca=Fi((([e])=>{const t=pa(e.xy,zi(12.9898,78.233)),r=ua(t,So);return Oo(Go(r).mul(43758.5453))})),wa=(e,t,r)=>va(t,r,e),Ma=(e,t,r)=>Aa(t,r,e),Ba=(e,t)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),Ho(e,t)),Fa=Ea,Ua=Io;ei("all",Ao),ei("any",Eo),ei("equals",na),ei("radians",Co),ei("degrees",wo),ei("exp",Mo),ei("exp2",Bo),ei("log",Fo),ei("log2",Uo),ei("sqrt",Po),ei("inverseSqrt",Io),ei("floor",Lo),ei("ceil",Do),ei("normalize",Vo),ei("fract",Oo),ei("sin",Go),ei("cos",ko),ei("tan",zo),ei("asin",$o),ei("acos",Wo),ei("atan",Ho),ei("abs",jo),ei("sign",qo),ei("length",Xo),ei("lengthSq",_a),ei("negate",Ko),ei("oneMinus",Yo),ei("dFdx",Qo),ei("dFdy",Zo),ei("round",Jo),ei("reciprocal",ea),ei("trunc",ta),ei("fwidth",ra),ei("atan2",Ba),ei("min",oa),ei("max",aa),ei("mod",ua),ei("step",la),ei("reflect",da),ei("distance",ca),ei("dot",pa),ei("cross",ga),ei("pow",ma),ei("pow2",fa),ei("pow3",ya),ei("pow4",xa),ei("transformDirection",ba),ei("mix",wa),ei("clamp",Na),ei("refract",Ra),ei("smoothstep",Ma),ei("faceForward",Ea),ei("difference",ha),ei("saturate",Sa),ei("cbrt",Ta),ei("transpose",sa),ei("rand",Ca);class Pa extends Os{static get type(){return"ConditionalNode"}constructor(e,t,r=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=r}getNodeType(e){const{ifNode:t,elseNode:r}=e.getNodeProperties(this);if(void 0===t)return this.setup(e),this.getNodeType(e);const s=t.getNodeType(e);if(null!==r){const t=r.getNodeType(e);if(e.getTypeLength(t)>e.getTypeLength(s))return t}return s}setup(e){const t=this.condNode.cache(),r=this.ifNode.cache(),s=this.elseNode?this.elseNode.cache():null,i=e.context.nodeBlock;e.getDataFromNode(r).parentNodeBlock=i,null!==s&&(e.getDataFromNode(s).parentNodeBlock=i);const n=e.getNodeProperties(this);n.condNode=t,n.ifNode=r.context({nodeBlock:r}),n.elseNode=s?s.context({nodeBlock:s}):null}generate(e,t){const r=this.getNodeType(e),s=e.getDataFromNode(this);if(void 0!==s.nodeProperty)return s.nodeProperty;const{condNode:i,ifNode:n,elseNode:o}=e.getNodeProperties(this),a="void"!==t,u=a?yn(r).build(e):"";s.nodeProperty=u;const l=i.build(e,"bool");e.addFlowCode(`\n${e.tab}if ( ${l} ) {\n\n`).addFlowTab();let d=n.build(e,r);if(d&&(d=a?u+" = "+d+";":"return "+d+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+d+"\n\n"+e.tab+"}"),null!==o){e.addFlowCode(" else {\n\n").addFlowTab();let t=o.build(e,r);t&&(t=a?u+" = "+t+";":"return "+t+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+t+"\n\n"+e.tab+"}\n\n")}else e.addFlowCode("\n\n");return e.format(u,r,t)}}const Ia=Mi(Pa);ei("select",Ia);const La=(...e)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),Ia(...e));ei("cond",La);class Da extends Os{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const r=this.node.build(e);return e.setContext(t),r}generate(e,t){const r=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e,t);return e.setContext(r),s}}const Va=Mi(Da),Oa=(e,t)=>Va(e,{label:t});ei("context",Va),ei("label",Oa);class Ga extends Os{static get type(){return"VarNode"}constructor(e,t=null,r=!1){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0,this.readOnly=r}getHash(e){return this.name||super.getHash(e)}getMemberType(e,t){return this.node.getMemberType(e,t)}getElementType(e){return this.node.getElementType(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:r,readOnly:s}=this,{renderer:i}=e,n=!0===i.backend.isWebGPUBackend;let o=!1,a=!1;s&&(o=e.isDeterministic(t),a=n?s:o);const u=e.getVectorType(this.getNodeType(e)),l=t.build(e,u),d=e.getVarFromNode(this,r,u,void 0,a),c=e.getPropertyName(d);let h=c;if(a)if(n)h=o?`const ${c}`:`let ${c}`;else{const r=e.getArrayCount(t);h=`const ${e.getVar(d.type,c,r)}`}return e.addLineFlowCode(`${h} = ${l}`,this),c}}const ka=Mi(Ga),za=(e,t=null)=>ka(e,t).append(),$a=(e,t=null)=>ka(e,t,!0).append();ei("toVar",za),ei("toConst",$a);const Wa=e=>(console.warn('TSL: "temp( node )" is deprecated. Use "Var( node )" or "node.toVar()" instead.'),ka(e));ei("temp",Wa);class Ha extends Os{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0}isGlobal(){return!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let r=t.varying;if(void 0===r){const s=this.name,i=this.getNodeType(e);t.varying=r=e.getVaryingFromNode(this,s,i),t.node=this.node}return r.needsInterpolation||(r.needsInterpolation="fragment"===e.shaderStage),r}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),r=this.setupVarying(e),s="fragment"===e.shaderStage&&!0===t.reassignPosition&&e.context.needsPositionReassign;if(void 0===t.propertyName||s){const i=this.getNodeType(e),n=e.getPropertyName(r,Ms.VERTEX);e.flowNodeFromShaderStage(Ms.VERTEX,this.node,i,n),t.propertyName=n,s?t.reassignPosition=!1:void 0===t.reassignPosition&&e.context.isPositionNodeInput&&(t.reassignPosition=!0)}return e.getPropertyName(r)}}const ja=Mi(Ha),qa=e=>ja(e);ei("toVarying",ja),ei("toVertexStage",qa),ei("varying",((...e)=>(console.warn("TSL.VaryingNode: .varying() has been renamed to .toVarying()."),ja(...e)))),ei("vertexStage",((...e)=>(console.warn("TSL.VaryingNode: .vertexStage() has been renamed to .toVertexStage()."),ja(...e))));const Xa=Fi((([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),r=e.mul(.0773993808),s=e.lessThanEqual(.04045);return va(t,r,s)})).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ka=Fi((([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),r=e.mul(12.92),s=e.lessThanEqual(.0031308);return va(t,r,s)})).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ya="WorkingColorSpace",Qa="OutputColorSpace";class Za extends zs{static get type(){return"ColorSpaceNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.source=t,this.target=r}resolveColorSpace(e,t){return t===Ya?c.workingColorSpace:t===Qa?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,r=this.resolveColorSpace(e,this.source),s=this.resolveColorSpace(e,this.target);let i=t;return!1!==c.enabled&&r!==s&&r&&s?(c.getTransfer(r)===h&&(i=Yi(Xa(i.rgb),i.a)),c.getPrimaries(r)!==c.getPrimaries(s)&&(i=Yi(tn(c._getMatrix(new n,r,s)).mul(i.rgb),i.a)),c.getTransfer(s)===h&&(i=Yi(Ka(i.rgb),i.a)),i):i}}const Ja=e=>Ei(new Za(Ei(e),Ya,Qa)),eu=e=>Ei(new Za(Ei(e),Qa,Ya)),tu=(e,t)=>Ei(new Za(Ei(e),Ya,t)),ru=(e,t)=>Ei(new Za(Ei(e),t,Ya));ei("toOutputColorSpace",Ja),ei("toWorkingColorSpace",eu),ei("workingToColorSpace",tu),ei("colorSpaceToWorking",ru);let su=class extends Gs{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}};class iu extends Os{static get type(){return"ReferenceBaseNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.updateType=Bs.OBJECT}setGroup(e){return this.group=e,this}element(e){return Ei(new su(this,Ei(e)))}setNodeType(e){const t=mn(null,e).getSelf();null!==this.group&&t.setGroup(this.group),this.node=t}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}class nu extends iu{static get type(){return"RendererReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.renderer=r,this.setGroup(hn)}updateReference(e){return this.reference=null!==this.renderer?this.renderer:e.renderer,this.reference}}const ou=(e,t,r=null)=>Ei(new nu(e,t,r));class au extends zs{static get type(){return"ToneMappingNode"}constructor(e,t=lu,r=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=r}customCacheKey(){return fs(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,r=this.toneMapping;if(r===p)return t;let s=null;const i=e.renderer.library.getToneMappingFunction(r);return null!==i?s=Yi(i(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",r),s=t),s}}const uu=(e,t,r)=>Ei(new au(e,Ei(t),Ei(r))),lu=ou("toneMappingExposure","float");ei("toneMapping",((e,t,r)=>uu(t,r,e)));class du extends Xs{static get type(){return"BufferAttributeNode"}constructor(e,t=null,r=0,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=r,this.bufferOffset=s,this.usage=g,this.instanced=!1,this.attribute=null,this.global=!0,e&&!0===e.isBufferAttribute&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(0===this.bufferStride&&0===this.bufferOffset){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return null===this.bufferType&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(null!==this.attribute)return;const t=this.getNodeType(e),r=this.value,s=e.getTypeLength(t),i=this.bufferStride||s,n=this.bufferOffset,o=!0===r.isInterleavedBuffer?r:new m(r,i),a=new y(o,s,n);o.setUsage(this.usage),this.attribute=a,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),r=e.getBufferAttributeFromNode(this,t),s=e.getPropertyName(r);let i=null;if("vertex"===e.shaderStage||"compute"===e.shaderStage)this.name=s,i=s;else{i=ja(this).build(e,t)}return i}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const cu=(e,t=null,r=0,s=0)=>Ei(new du(e,t,r,s)),hu=(e,t=null,r=0,s=0)=>cu(e,t,r,s).setUsage(f),pu=(e,t=null,r=0,s=0)=>cu(e,t,r,s).setInstanced(!0),gu=(e,t=null,r=0,s=0)=>hu(e,t,r,s).setInstanced(!0);ei("toAttribute",(e=>cu(e.value)));class mu extends Os{static get type(){return"ComputeNode"}constructor(e,t,r=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=r,this.dispatchCount=0,this.version=1,this.name="",this.updateBeforeType=Bs.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}label(e){return this.name=e,this}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let r=t[0];for(let e=1;e<t.length;e++)r*=t[e];this.dispatchCount=Math.ceil(e/r)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}generate(e){const{shaderStage:t}=e;if("compute"===t){const t=this.computeNode.build(e,"void");""!==t&&e.addLineFlowCode(t,this)}}}const fu=(e,t,r)=>Ei(new mu(Ei(e),t,r));ei("compute",fu);class yu extends Os{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),r=e.getCacheFromNode(this,this.parent);e.setCache(r);const s=this.node.getNodeType(e);return e.setCache(t),s}build(e,...t){const r=e.getCache(),s=e.getCacheFromNode(this,this.parent);e.setCache(s);const i=this.node.build(e,...t);return e.setCache(r),i}}const xu=(e,t)=>Ei(new yu(Ei(e),t));ei("cache",xu);class bu extends Os{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return""!==t&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const Tu=Mi(bu);ei("bypass",Tu);class _u extends Os{static get type(){return"RemapNode"}constructor(e,t,r,s=Vi(0),i=Vi(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=r,this.outLowNode=s,this.outHighNode=i,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:r,outLowNode:s,outHighNode:i,doClamp:n}=this;let o=e.sub(t).div(r.sub(t));return!0===n&&(o=o.clamp()),o.mul(i.sub(s)).add(s)}}const vu=Mi(_u,null,null,{doClamp:!1}),Nu=Mi(_u);ei("remap",vu),ei("remapClamp",Nu);class Su extends Os{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const r=this.getNodeType(e),s=this.snippet;if("void"!==r)return e.format(`( ${s} )`,r,t);e.addLineFlowCode(s,this)}}const Ru=Mi(Su),Au=e=>(e?Ia(e,Ru("discard")):Ru("discard")).append();ei("discard",Au);class Eu extends zs{static get type(){return"RenderOutputNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=r,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const r=(null!==this.toneMapping?this.toneMapping:e.toneMapping)||p,s=(null!==this.outputColorSpace?this.outputColorSpace:e.outputColorSpace)||x;return r!==p&&(t=t.toneMapping(r)),s!==x&&s!==c.workingColorSpace&&(t=t.workingToColorSpace(s)),t}}const Cu=(e,t=null,r=null)=>Ei(new Eu(Ei(e),t,r));ei("renderOutput",Cu);class wu extends Os{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(null===t){const r=this.getAttributeName(e);if(e.hasGeometryAttribute(r)){const s=e.geometry.getAttribute(r);t=e.getTypeFromAttribute(s)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),r=this.getNodeType(e);if(!0===e.hasGeometryAttribute(t)){const s=e.geometry.getAttribute(t),i=e.getTypeFromAttribute(s),n=e.getAttribute(t,i);if("vertex"===e.shaderStage)return e.format(n.name,i,r);return ja(this).build(e,r)}return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(r)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const Mu=(e,t)=>Ei(new wu(e,t)),Bu=(e=0)=>Mu("uv"+(e>0?e:""),"vec2");class Fu extends Os{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const r=this.textureNode.build(e,"property"),s=null===this.levelNode?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${r}, ${s} )`,this.getNodeType(e),t)}}const Uu=Mi(Fu);class Pu extends gn{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=Bs.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,r=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(r&&void 0!==r.width){const{width:e,height:t}=r;this.value=Math.log2(Math.max(e,t))}}}const Iu=Mi(Pu);class Lu extends gn{static get type(){return"TextureNode"}constructor(e,t=null,r=null,s=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=r,this.biasNode=s,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=Bs.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(null===t)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return!0===this.value.isDepthTexture?"float":this.value.type===b?"uvec4":this.value.type===T?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Bu(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return null===this._matrixUniform&&(this._matrixUniform=mn(this.value.matrix)),this._matrixUniform.mul(ji(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?Bs.RENDER:Bs.NONE,this}setupUV(e,t){const r=this.value;return e.isFlipY()&&(r.image instanceof ImageBitmap&&!0===r.flipY||!0===r.isRenderTargetTexture||!0===r.isFramebufferTexture||!0===r.isDepthTexture)&&(t=this.sampler?t.flipY():t.setY(Oi(Uu(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;const r=this.value;if(!r||!0!==r.isTexture)throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");let s=this.uvNode;null!==s&&!0!==e.context.forceUVContext||!e.context.getUV||(s=e.context.getUV(this)),s||(s=this.getDefaultUV()),!0===this.updateMatrix&&(s=this.getTransformedUV(s)),s=this.setupUV(e,s);let i=this.levelNode;null===i&&e.context.getTextureLevel&&(i=e.context.getTextureLevel(this)),t.uvNode=s,t.levelNode=i,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,!0===this.sampler?"vec2":"ivec2")}generateSnippet(e,t,r,s,i,n,o,a){const u=this.value;let l;return l=s?e.generateTextureLevel(u,t,r,s,n):i?e.generateTextureBias(u,t,r,i,n):a?e.generateTextureGrad(u,t,r,a,n):o?e.generateTextureCompare(u,t,r,o,n):!1===this.sampler?e.generateTextureLoad(u,t,r,n):e.generateTexture(u,t,r,n),l}generate(e,t){const r=this.value,s=e.getNodeProperties(this),i=super.generate(e,"property");if("sampler"===t)return i+"_sampler";if(e.isReference(t))return i;{const n=e.getDataFromNode(this);let o=n.propertyName;if(void 0===o){const{uvNode:t,levelNode:r,biasNode:a,compareNode:u,depthNode:l,gradNode:d}=s,c=this.generateUV(e,t),h=r?r.build(e,"float"):null,p=a?a.build(e,"float"):null,g=l?l.build(e,"int"):null,m=u?u.build(e,"float"):null,f=d?[d[0].build(e,"vec2"),d[1].build(e,"vec2")]:null,y=e.getVarFromNode(this);o=e.getPropertyName(y);const x=this.generateSnippet(e,i,c,h,p,g,m,f);e.addLineFlowCode(`${o} = ${x}`,this),n.snippet=x,n.propertyName=o}let a=o;const u=this.getNodeType(e);return e.needsToWorkingColorSpace(r)&&(a=ru(Ru(a,u),r.colorSpace).setup(e).build(e,u)),e.format(a,u,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=Ei(e),t.referenceNode=this.getSelf(),Ei(t)}blur(e){const t=this.clone();return t.biasNode=Ei(e).mul(Iu(t)),t.referenceNode=this.getSelf(),Ei(t)}level(e){const t=this.clone();return t.levelNode=Ei(e),t.referenceNode=this.getSelf(),Ei(t)}size(e){return Uu(this,e)}bias(e){const t=this.clone();return t.biasNode=Ei(e),t.referenceNode=this.getSelf(),Ei(t)}compare(e){const t=this.clone();return t.compareNode=Ei(e),t.referenceNode=this.getSelf(),Ei(t)}grad(e,t){const r=this.clone();return r.gradNode=[Ei(e),Ei(t)],r.referenceNode=this.getSelf(),Ei(r)}depth(e){const t=this.clone();return t.depthNode=Ei(e),t.referenceNode=this.getSelf(),Ei(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;null!==t&&(t.value=e.matrix),!0===e.matrixAutoUpdate&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e}}const Du=Mi(Lu),Vu=(...e)=>Du(...e).setSampler(!1);class Ou extends gn{static get type(){return"BufferNode"}constructor(e,t,r=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=r}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const Gu=(e,t,r)=>Ei(new Ou(e,t,r));class ku extends Gs{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),r=this.getNodeType(),s=this.node.getPaddedType();return e.format(t,s,r)}}class zu extends Ou{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=null===t?Ss(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=Bs.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return"mat2"===e?t="mat2":!0===/mat/.test(e)?t="mat4":"i"===e.charAt(0)?t="ivec4":"u"===e.charAt(0)&&(t="uvec4"),t}update(){const{array:e,value:t}=this,r=this.elementType;if("float"===r||"int"===r||"uint"===r)for(let r=0;r<e.length;r++){t[4*r]=e[r]}else if("color"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.r,t[s+1]=i.g,t[s+2]=i.b||0}else if("mat2"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+3]=i.elements[3]}else if("mat3"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+4]=i.elements[3],t[s+5]=i.elements[4],t[s+6]=i.elements[5],t[s+8]=i.elements[6],t[s+9]=i.elements[7],t[s+10]=i.elements[8],t[s+15]=1}else if("mat4"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];for(let e=0;e<i.elements.length;e++)t[s+e]=i.elements[e]}else for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.x,t[s+1]=i.y,t[s+2]=i.z||0,t[s+3]=i.w||0}}setup(e){const t=this.array.length,r=this.elementType;let s=Float32Array;const i=this.paddedType,n=e.getTypeLength(i);return"i"===r.charAt(0)&&(s=Int32Array),"u"===r.charAt(0)&&(s=Uint32Array),this.value=new s(t*n),this.bufferCount=t,this.bufferType=i,super.setup(e)}element(e){return Ei(new ku(this,Ei(e)))}}const $u=(e,t)=>Ei(new zu(e,t)),Wu=mn(0,"uint").setGroup(dn("cameraIndex")).toVarying("v_cameraIndex"),Hu=mn("float").label("cameraNear").setGroup(hn).onRenderUpdate((({camera:e})=>e.near)),ju=mn("float").label("cameraFar").setGroup(hn).onRenderUpdate((({camera:e})=>e.far)),qu=Fi((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.projectionMatrix);t=$u(r).setGroup(hn).label("cameraProjectionMatrices").element(Wu).toVar("cameraProjectionMatrix")}else t=mn("mat4").label("cameraProjectionMatrix").setGroup(hn).onRenderUpdate((({camera:e})=>e.projectionMatrix));return t})).once()(),Xu=mn("mat4").label("cameraProjectionMatrixInverse").setGroup(hn).onRenderUpdate((({camera:e})=>e.projectionMatrixInverse)),Ku=Fi((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.matrixWorldInverse);t=$u(r).setGroup(hn).label("cameraViewMatrices").element(Wu).toVar("cameraViewMatrix")}else t=mn("mat4").label("cameraViewMatrix").setGroup(hn).onRenderUpdate((({camera:e})=>e.matrixWorldInverse));return t})).once()(),Yu=mn("mat4").label("cameraWorldMatrix").setGroup(hn).onRenderUpdate((({camera:e})=>e.matrixWorld)),Qu=mn("mat3").label("cameraNormalMatrix").setGroup(hn).onRenderUpdate((({camera:e})=>e.normalMatrix)),Zu=mn(new r).label("cameraPosition").setGroup(hn).onRenderUpdate((({camera:e},t)=>t.value.setFromMatrixPosition(e.matrixWorld)));class Ju extends Os{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=Bs.OBJECT,this._uniformNode=new gn(null)}getNodeType(){const e=this.scope;return e===Ju.WORLD_MATRIX?"mat4":e===Ju.POSITION||e===Ju.VIEW_POSITION||e===Ju.DIRECTION||e===Ju.SCALE?"vec3":void 0}update(e){const t=this.object3d,s=this._uniformNode,i=this.scope;if(i===Ju.WORLD_MATRIX)s.value=t.matrixWorld;else if(i===Ju.POSITION)s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld);else if(i===Ju.SCALE)s.value=s.value||new r,s.value.setFromMatrixScale(t.matrixWorld);else if(i===Ju.DIRECTION)s.value=s.value||new r,t.getWorldDirection(s.value);else if(i===Ju.VIEW_POSITION){const i=e.camera;s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld),s.value.applyMatrix4(i.matrixWorldInverse)}}generate(e){const t=this.scope;return t===Ju.WORLD_MATRIX?this._uniformNode.nodeType="mat4":t!==Ju.POSITION&&t!==Ju.VIEW_POSITION&&t!==Ju.DIRECTION&&t!==Ju.SCALE||(this._uniformNode.nodeType="vec3"),this._uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}Ju.WORLD_MATRIX="worldMatrix",Ju.POSITION="position",Ju.SCALE="scale",Ju.VIEW_POSITION="viewPosition",Ju.DIRECTION="direction";const el=Mi(Ju,Ju.DIRECTION),tl=Mi(Ju,Ju.WORLD_MATRIX),rl=Mi(Ju,Ju.POSITION),sl=Mi(Ju,Ju.SCALE),il=Mi(Ju,Ju.VIEW_POSITION);class nl extends Ju{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const ol=Bi(nl,nl.DIRECTION),al=Bi(nl,nl.WORLD_MATRIX),ul=Bi(nl,nl.POSITION),ll=Bi(nl,nl.SCALE),dl=Bi(nl,nl.VIEW_POSITION),cl=mn(new n).onObjectUpdate((({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld))),hl=mn(new o).onObjectUpdate((({object:e},t)=>t.value.copy(e.matrixWorld).invert())),pl=Fi((e=>e.renderer.nodes.modelViewMatrix||gl)).once()().toVar("modelViewMatrix"),gl=Ku.mul(al),ml=Fi((e=>(e.context.isHighPrecisionModelViewMatrix=!0,mn("mat4").onObjectUpdate((({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))))).once()().toVar("highpModelViewMatrix"),fl=Fi((e=>{const t=e.context.isHighPrecisionModelViewMatrix;return mn("mat3").onObjectUpdate((({object:e,camera:r})=>(!0!==t&&e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix))))})).once()().toVar("highpModelNormalViewMatrix"),yl=Mu("position","vec3"),xl=yl.toVarying("positionLocal"),bl=yl.toVarying("positionPrevious"),Tl=al.mul(xl).xyz.toVarying("v_positionWorld").context({needsPositionReassign:!0}),_l=xl.transformDirection(al).toVarying("v_positionWorldDirection").normalize().toVar("positionWorldDirection").context({needsPositionReassign:!0}),vl=Fi((e=>e.context.setupPositionView()),"vec3").once()().toVarying("v_positionView").context({needsPositionReassign:!0}),Nl=vl.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection");class Sl extends Os{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){const{renderer:t,material:r}=e;return t.coordinateSystem===l&&r.side===_?"false":e.getFrontFacing()}}const Rl=Bi(Sl),Al=Vi(Rl).mul(2).sub(1),El=Mu("normal","vec3"),Cl=Fi((e=>!1===e.geometry.hasAttribute("normal")?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),ji(0,1,0)):El),"vec3").once()().toVar("normalLocal"),wl=vl.dFdx().cross(vl.dFdy()).normalize().toVar("normalFlat"),Ml=Fi((e=>{let t;return t=!0===e.material.flatShading?wl:ja(Ll(Cl),"v_normalView").normalize(),t}),"vec3").once()().toVar("normalView"),Bl=ja(Ml.transformDirection(Ku),"v_normalWorld").normalize().toVar("normalWorld"),Fl=Fi((e=>e.context.setupNormal().context({getUV:null})),"vec3").once()().mul(Al).toVar("transformedNormalView"),Ul=Fl.transformDirection(Ku).toVar("transformedNormalWorld"),Pl=Fi((e=>e.context.setupClearcoatNormal().context({getUV:null})),"vec3").once()().mul(Al).toVar("transformedClearcoatNormalView"),Il=Fi((([e,t=al])=>{const r=tn(t),s=e.div(ji(r[0].dot(r[0]),r[1].dot(r[1]),r[2].dot(r[2])));return r.mul(s).xyz})),Ll=Fi((([e],t)=>{const r=t.renderer.nodes.modelNormalViewMatrix;if(null!==r)return r.transformDirection(e);const s=cl.mul(e);return Ku.transformDirection(s)})),Dl=mn(0).onReference((({material:e})=>e)).onRenderUpdate((({material:e})=>e.refractionRatio)),Vl=Nl.negate().reflect(Fl),Ol=Nl.negate().refract(Fl,Dl),Gl=Vl.transformDirection(Ku).toVar("reflectVector"),kl=Ol.transformDirection(Ku).toVar("reflectVector");class zl extends Lu{static get type(){return"CubeTextureNode"}constructor(e,t=null,r=null,s=null){super(e,t,r,s),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===v?Gl:e.mapping===N?kl:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),ji(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return e.renderer.coordinateSystem!==d&&r.isRenderTargetTexture?t:ji(t.x.negate(),t.yz)}generateUV(e,t){return t.build(e,"vec3")}}const $l=Mi(zl);class Wl extends Gs{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}}class Hl extends Os{static get type(){return"ReferenceNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.name=null,this.updateType=Bs.OBJECT}element(e){return Ei(new Wl(this,Ei(e)))}setGroup(e){return this.group=e,this}label(e){return this.name=e,this}setNodeType(e){let t=null;t=null!==this.count?Gu(null,e,this.count):Array.isArray(this.getValueFromReference())?$u(null,e):"texture"===e?Du(null):"cubeTexture"===e?$l(null):mn(null,e),null!==this.group&&t.setGroup(this.group),null!==this.name&&t.label(this.name),this.node=t.getSelf()}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const jl=(e,t,r)=>Ei(new Hl(e,t,r)),ql=(e,t,r,s)=>Ei(new Hl(e,t,s,r));class Xl extends Hl{static get type(){return"MaterialReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.material=r,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=null!==this.material?this.material:e.material,this.reference}}const Kl=(e,t,r=null)=>Ei(new Xl(e,t,r)),Yl=Fi((e=>(!1===e.geometry.hasAttribute("tangent")&&e.geometry.computeTangents(),Mu("tangent","vec4"))))(),Ql=Yl.xyz.toVar("tangentLocal"),Zl=pl.mul(Yi(Ql,0)).xyz.toVarying("v_tangentView").normalize().toVar("tangentView"),Jl=Zl.transformDirection(Ku).toVarying("v_tangentWorld").normalize().toVar("tangentWorld"),ed=Zl.toVar("transformedTangentView"),td=ed.transformDirection(Ku).normalize().toVar("transformedTangentWorld"),rd=e=>e.mul(Yl.w).xyz,sd=ja(rd(El.cross(Yl)),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),id=ja(rd(Cl.cross(Ql)),"v_bitangentLocal").normalize().toVar("bitangentLocal"),nd=ja(rd(Ml.cross(Zl)),"v_bitangentView").normalize().toVar("bitangentView"),od=ja(rd(Bl.cross(Jl)),"v_bitangentWorld").normalize().toVar("bitangentWorld"),ad=rd(Fl.cross(ed)).normalize().toVar("transformedBitangentView"),ud=ad.transformDirection(Ku).normalize().toVar("transformedBitangentWorld"),ld=tn(Zl,nd,Ml),dd=Nl.mul(ld),cd=(()=>{let e=Un.cross(Nl);return e=e.cross(Un).normalize(),e=va(e,Fl,Bn.mul(_n.oneMinus()).oneMinus().pow2().pow2()).normalize(),e})(),hd=Fi((e=>{const{eye_pos:t,surf_norm:r,mapN:s,uv:i}=e,n=t.dFdx(),o=t.dFdy(),a=i.dFdx(),u=i.dFdy(),l=r,d=o.cross(l),c=l.cross(n),h=d.mul(a.x).add(c.mul(u.x)),p=d.mul(a.y).add(c.mul(u.y)),g=h.dot(h).max(p.dot(p)),m=Al.mul(g.inverseSqrt());return Zn(h.mul(s.x,m),p.mul(s.y,m),l.mul(s.z)).normalize()}));class pd extends zs{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=S}setup(e){const{normalMapType:t,scaleNode:r}=this;let s=this.node.mul(2).sub(1);null!==r&&(s=ji(s.xy.mul(r),s.z));let i=null;if(t===R)i=Ll(s);else if(t===S){i=!0===e.hasGeometryAttribute("tangent")?ld.mul(s).normalize():hd({eye_pos:vl,surf_norm:Ml,mapN:s,uv:Bu()})}return i}}const gd=Mi(pd),md=Fi((({textureNode:e,bumpScale:t})=>{const r=t=>e.cache().context({getUV:e=>t(e.uvNode||Bu()),forceUVContext:!0}),s=Vi(r((e=>e)));return zi(Vi(r((e=>e.add(e.dFdx())))).sub(s),Vi(r((e=>e.add(e.dFdy())))).sub(s)).mul(t)})),fd=Fi((e=>{const{surf_pos:t,surf_norm:r,dHdxy:s}=e,i=t.dFdx().normalize(),n=r,o=t.dFdy().normalize().cross(n),a=n.cross(i),u=i.dot(o).mul(Al),l=u.sign().mul(s.x.mul(o).add(s.y.mul(a)));return u.abs().mul(r).sub(l).normalize()}));class yd extends zs{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=null!==this.scaleNode?this.scaleNode:1,t=md({textureNode:this.textureNode,bumpScale:e});return fd({surf_pos:vl,surf_norm:Ml,dHdxy:t})}}const xd=Mi(yd),bd=new Map;class Td extends Os{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let r=bd.get(e);return void 0===r&&(r=Kl(e,t),bd.set(e,r)),r}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const t=e.context.material,r=this.scope;let s=null;if(r===Td.COLOR){const e=void 0!==t.color?this.getColor(r):ji();s=t.map&&!0===t.map.isTexture?e.mul(this.getTexture("map")):e}else if(r===Td.OPACITY){const e=this.getFloat(r);s=t.alphaMap&&!0===t.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(r===Td.SPECULAR_STRENGTH)s=t.specularMap&&!0===t.specularMap.isTexture?this.getTexture("specular").r:Vi(1);else if(r===Td.SPECULAR_INTENSITY){const e=this.getFloat(r);s=t.specularIntensityMap&&!0===t.specularIntensityMap.isTexture?e.mul(this.getTexture(r).a):e}else if(r===Td.SPECULAR_COLOR){const e=this.getColor(r);s=t.specularColorMap&&!0===t.specularColorMap.isTexture?e.mul(this.getTexture(r).rgb):e}else if(r===Td.ROUGHNESS){const e=this.getFloat(r);s=t.roughnessMap&&!0===t.roughnessMap.isTexture?e.mul(this.getTexture(r).g):e}else if(r===Td.METALNESS){const e=this.getFloat(r);s=t.metalnessMap&&!0===t.metalnessMap.isTexture?e.mul(this.getTexture(r).b):e}else if(r===Td.EMISSIVE){const e=this.getFloat("emissiveIntensity"),i=this.getColor(r).mul(e);s=t.emissiveMap&&!0===t.emissiveMap.isTexture?i.mul(this.getTexture(r)):i}else if(r===Td.NORMAL)t.normalMap?(s=gd(this.getTexture("normal"),this.getCache("normalScale","vec2")),s.normalMapType=t.normalMapType):s=t.bumpMap?xd(this.getTexture("bump").r,this.getFloat("bumpScale")):Ml;else if(r===Td.CLEARCOAT){const e=this.getFloat(r);s=t.clearcoatMap&&!0===t.clearcoatMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===Td.CLEARCOAT_ROUGHNESS){const e=this.getFloat(r);s=t.clearcoatRoughnessMap&&!0===t.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===Td.CLEARCOAT_NORMAL)s=t.clearcoatNormalMap?gd(this.getTexture(r),this.getCache(r+"Scale","vec2")):Ml;else if(r===Td.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));s=t.sheenColorMap&&!0===t.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(r===Td.SHEEN_ROUGHNESS){const e=this.getFloat(r);s=t.sheenRoughnessMap&&!0===t.sheenRoughnessMap.isTexture?e.mul(this.getTexture(r).a):e,s=s.clamp(.07,1)}else if(r===Td.ANISOTROPY)if(t.anisotropyMap&&!0===t.anisotropyMap.isTexture){const e=this.getTexture(r);s=en(ic.x,ic.y,ic.y.negate(),ic.x).mul(e.rg.mul(2).sub(zi(1)).normalize().mul(e.b))}else s=ic;else if(r===Td.IRIDESCENCE_THICKNESS){const e=jl("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const i=jl("0","float",t.iridescenceThicknessRange);s=e.sub(i).mul(this.getTexture(r).g).add(i)}else s=e}else if(r===Td.TRANSMISSION){const e=this.getFloat(r);s=t.transmissionMap?e.mul(this.getTexture(r).r):e}else if(r===Td.THICKNESS){const e=this.getFloat(r);s=t.thicknessMap?e.mul(this.getTexture(r).g):e}else if(r===Td.IOR)s=this.getFloat(r);else if(r===Td.LIGHT_MAP)s=this.getTexture(r).rgb.mul(this.getFloat("lightMapIntensity"));else if(r===Td.AO)s=this.getTexture(r).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const t=this.getNodeType(e);s=this.getCache(r,t)}return s}}Td.ALPHA_TEST="alphaTest",Td.COLOR="color",Td.OPACITY="opacity",Td.SHININESS="shininess",Td.SPECULAR="specular",Td.SPECULAR_STRENGTH="specularStrength",Td.SPECULAR_INTENSITY="specularIntensity",Td.SPECULAR_COLOR="specularColor",Td.REFLECTIVITY="reflectivity",Td.ROUGHNESS="roughness",Td.METALNESS="metalness",Td.NORMAL="normal",Td.CLEARCOAT="clearcoat",Td.CLEARCOAT_ROUGHNESS="clearcoatRoughness",Td.CLEARCOAT_NORMAL="clearcoatNormal",Td.EMISSIVE="emissive",Td.ROTATION="rotation",Td.SHEEN="sheen",Td.SHEEN_ROUGHNESS="sheenRoughness",Td.ANISOTROPY="anisotropy",Td.IRIDESCENCE="iridescence",Td.IRIDESCENCE_IOR="iridescenceIOR",Td.IRIDESCENCE_THICKNESS="iridescenceThickness",Td.IOR="ior",Td.TRANSMISSION="transmission",Td.THICKNESS="thickness",Td.ATTENUATION_DISTANCE="attenuationDistance",Td.ATTENUATION_COLOR="attenuationColor",Td.LINE_SCALE="scale",Td.LINE_DASH_SIZE="dashSize",Td.LINE_GAP_SIZE="gapSize",Td.LINE_WIDTH="linewidth",Td.LINE_DASH_OFFSET="dashOffset",Td.POINT_SIZE="size",Td.DISPERSION="dispersion",Td.LIGHT_MAP="light",Td.AO="ao";const _d=Bi(Td,Td.ALPHA_TEST),vd=Bi(Td,Td.COLOR),Nd=Bi(Td,Td.SHININESS),Sd=Bi(Td,Td.EMISSIVE),Rd=Bi(Td,Td.OPACITY),Ad=Bi(Td,Td.SPECULAR),Ed=Bi(Td,Td.SPECULAR_INTENSITY),Cd=Bi(Td,Td.SPECULAR_COLOR),wd=Bi(Td,Td.SPECULAR_STRENGTH),Md=Bi(Td,Td.REFLECTIVITY),Bd=Bi(Td,Td.ROUGHNESS),Fd=Bi(Td,Td.METALNESS),Ud=Bi(Td,Td.NORMAL),Pd=Bi(Td,Td.CLEARCOAT),Id=Bi(Td,Td.CLEARCOAT_ROUGHNESS),Ld=Bi(Td,Td.CLEARCOAT_NORMAL),Dd=Bi(Td,Td.ROTATION),Vd=Bi(Td,Td.SHEEN),Od=Bi(Td,Td.SHEEN_ROUGHNESS),Gd=Bi(Td,Td.ANISOTROPY),kd=Bi(Td,Td.IRIDESCENCE),zd=Bi(Td,Td.IRIDESCENCE_IOR),$d=Bi(Td,Td.IRIDESCENCE_THICKNESS),Wd=Bi(Td,Td.TRANSMISSION),Hd=Bi(Td,Td.THICKNESS),jd=Bi(Td,Td.IOR),qd=Bi(Td,Td.ATTENUATION_DISTANCE),Xd=Bi(Td,Td.ATTENUATION_COLOR),Kd=Bi(Td,Td.LINE_SCALE),Yd=Bi(Td,Td.LINE_DASH_SIZE),Qd=Bi(Td,Td.LINE_GAP_SIZE),Zd=Bi(Td,Td.LINE_WIDTH),Jd=Bi(Td,Td.LINE_DASH_OFFSET),ec=Bi(Td,Td.POINT_SIZE),tc=Bi(Td,Td.DISPERSION),rc=Bi(Td,Td.LIGHT_MAP),sc=Bi(Td,Td.AO),ic=mn(new t).onReference((function(e){return e.material})).onRenderUpdate((function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))})),nc=Fi((e=>e.context.setupModelViewProjection()),"vec4").once()().toVarying("v_modelViewProjection");class oc extends Os{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const t=this.getNodeType(e),r=this.scope;let s,i;if(r===oc.VERTEX)s=e.getVertexIndex();else if(r===oc.INSTANCE)s=e.getInstanceIndex();else if(r===oc.DRAW)s=e.getDrawIndex();else if(r===oc.INVOCATION_LOCAL)s=e.getInvocationLocalIndex();else if(r===oc.INVOCATION_SUBGROUP)s=e.getInvocationSubgroupIndex();else{if(r!==oc.SUBGROUP)throw new Error("THREE.IndexNode: Unknown scope: "+r);s=e.getSubgroupIndex()}if("vertex"===e.shaderStage||"compute"===e.shaderStage)i=s;else{i=ja(this).build(e,t)}return i}}oc.VERTEX="vertex",oc.INSTANCE="instance",oc.SUBGROUP="subgroup",oc.INVOCATION_LOCAL="invocationLocal",oc.INVOCATION_SUBGROUP="invocationSubgroup",oc.DRAW="draw";const ac=Bi(oc,oc.VERTEX),uc=Bi(oc,oc.INSTANCE),lc=Bi(oc,oc.SUBGROUP),dc=Bi(oc,oc.INVOCATION_SUBGROUP),cc=Bi(oc,oc.INVOCATION_LOCAL),hc=Bi(oc,oc.DRAW);class pc extends Os{static get type(){return"InstanceNode"}constructor(e,t,r){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=r,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=Bs.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:r,instanceColor:s}=this;let{instanceMatrixNode:i,instanceColorNode:n}=this;if(null===i){if(t<=1e3)i=Gu(r.array,"mat4",Math.max(t,1)).element(uc);else{const e=new A(r.array,16,1);this.buffer=e;const t=r.usage===f?gu:pu,s=[t(e,"vec4",16,0),t(e,"vec4",16,4),t(e,"vec4",16,8),t(e,"vec4",16,12)];i=rn(...s)}this.instanceMatrixNode=i}if(s&&null===n){const e=new E(s.array,3),t=s.usage===f?gu:pu;this.bufferColor=e,n=ji(t(e,"vec3",3,0)),this.instanceColorNode=n}const o=i.mul(xl).xyz;if(xl.assign(o),e.hasGeometryAttribute("normal")){const e=Il(Cl,i);Cl.assign(e)}null!==this.instanceColorNode&&xn("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==f&&null!==this.buffer&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==f&&null!==this.bufferColor&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const gc=Mi(pc);class mc extends pc{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:r,instanceColor:s}=e;super(t,r,s),this.instancedMesh=e}}const fc=Mi(mc);class yc extends Os{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){null===this.batchingIdNode&&(null===e.getDrawIndex()?this.batchingIdNode=uc:this.batchingIdNode=hc);const t=Fi((([e])=>{const t=Oi(Uu(Vu(this.batchMesh._indirectTexture),0)),r=Oi(e).modInt(t),s=Oi(e).div(t);return Vu(this.batchMesh._indirectTexture,$i(r,s)).x})).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),r=t(Oi(this.batchingIdNode)),s=this.batchMesh._matricesTexture,i=Uu(Vu(s),0),n=Vi(r).mul(4).toInt().toVar(),o=n.modInt(i),a=n.div(Oi(i)),u=rn(Vu(s,$i(o,a)),Vu(s,$i(o.add(1),a)),Vu(s,$i(o.add(2),a)),Vu(s,$i(o.add(3),a))),l=this.batchMesh._colorsTexture;if(null!==l){const e=Fi((([e])=>{const t=Uu(Vu(l),0).x,r=e,s=r.modInt(t),i=r.div(t);return Vu(l,$i(s,i)).rgb})).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(r);xn("vec3","vBatchColor").assign(t)}const d=tn(u);xl.assign(u.mul(xl));const c=Cl.div(ji(d[0].dot(d[0]),d[1].dot(d[1]),d[2].dot(d[2]))),h=d.mul(c).xyz;Cl.assign(h),e.hasGeometryAttribute("tangent")&&Ql.mulAssign(d)}}const xc=Mi(yc),bc=new WeakMap;class Tc extends Os{static get type(){return"SkinningNode"}constructor(e,t=!1){let r,s,i;super("void"),this.skinnedMesh=e,this.useReference=t,this.updateType=Bs.OBJECT,this.skinIndexNode=Mu("skinIndex","uvec4"),this.skinWeightNode=Mu("skinWeight","vec4"),t?(r=jl("bindMatrix","mat4"),s=jl("bindMatrixInverse","mat4"),i=ql("skeleton.boneMatrices","mat4",e.skeleton.bones.length)):(r=mn(e.bindMatrix,"mat4"),s=mn(e.bindMatrixInverse,"mat4"),i=Gu(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length)),this.bindMatrixNode=r,this.bindMatrixInverseNode=s,this.boneMatricesNode=i,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=xl){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w),d=i.mul(t),c=Zn(o.mul(s.x).mul(d),a.mul(s.y).mul(d),u.mul(s.z).mul(d),l.mul(s.w).mul(d));return n.mul(c).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=Cl){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w);let d=Zn(s.x.mul(o),s.y.mul(a),s.z.mul(u),s.w.mul(l));return d=n.mul(d).mul(i),d.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return null===this.previousBoneMatricesNode&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=ql("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,bl)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")||!0===As(e.object).useVelocity}setup(e){this.needsPreviousBoneMatrices(e)&&bl.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(xl.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();Cl.assign(t),e.hasGeometryAttribute("tangent")&&Ql.assign(t)}}generate(e,t){if("void"!==t)return xl.build(e,t)}update(e){const t=(this.useReference?e.object:this.skinnedMesh).skeleton;bc.get(t)!==e.frameId&&(bc.set(t,e.frameId),null!==this.previousBoneMatricesNode&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const _c=e=>Ei(new Tc(e,!0));class vc extends Os{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt(0)+e)}getProperties(e){const t=e.getNodeProperties(this);if(void 0!==t.stackNode)return t;const r={};for(let e=0,t=this.params.length-1;e<t;e++){const t=this.params[e],s=!0!==t.isNode&&t.name||this.getVarName(e),i=!0!==t.isNode&&t.type||"int";r[s]=Ru(s,i)}const s=e.addStack();return t.returnsNode=this.params[this.params.length-1](r,s,e),t.stackNode=s,e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),r=this.params,s=t.stackNode;for(let t=0,s=r.length-1;t<s;t++){const s=r[t];let i=null,n=null,o=null,a=null,u=null,l=null;s.isNode?(a="int",o=this.getVarName(t),i="0",n=s.build(e,a),u="<"):(a=s.type||"int",o=s.name||this.getVarName(t),i=s.start,n=s.end,u=s.condition,l=s.update,"number"==typeof i?i=e.generateConst(a,i):i&&i.isNode&&(i=i.build(e,a)),"number"==typeof n?n=e.generateConst(a,n):n&&n.isNode&&(n=n.build(e,a)),void 0!==i&&void 0===n?(i+=" - 1",n="0",u=">="):void 0!==n&&void 0===i&&(i="0",u="<"),void 0===u&&(u=Number(i)>Number(n)?">=":"<"));const d={start:i,end:n,condition:u},c=d.start,h=d.end;let p="",g="",m="";l||(l="int"===a||"uint"===a?u.includes("<")?"++":"--":u.includes("<")?"+= 1.":"-= 1."),p+=e.getVar(a,o)+" = "+c,g+=o+" "+u+" "+h,m+=o+" "+l;const f=`for ( ${p}; ${g}; ${m} )`;e.addFlowCode((0===t?"\n":"")+e.tab+f+" {\n\n").addFlowTab()}const i=s.build(e,"void"),n=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode("\n"+e.tab+i);for(let t=0,r=this.params.length-1;t<r;t++)e.addFlowCode((0===t?"":e.tab)+"}\n\n").removeFlowTab();return e.addFlowTab(),n}}const Nc=(...e)=>Ei(new vc(wi(e,"int"))).append(),Sc=()=>Ru("break").append(),Rc=new WeakMap,Ac=new s,Ec=Fi((({bufferMap:e,influence:t,stride:r,width:s,depth:i,offset:n})=>{const o=Oi(ac).mul(r).add(n),a=o.div(s),u=o.sub(a.mul(s));return Vu(e,$i(u,a)).depth(i).mul(t)}));class Cc extends Os{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=mn(1),this.updateType=Bs.OBJECT}setup(e){const{geometry:r}=e,s=void 0!==r.morphAttributes.position,i=r.hasAttribute("normal")&&void 0!==r.morphAttributes.normal,n=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,o=void 0!==n?n.length:0,{texture:a,stride:u,size:l}=function(e){const r=void 0!==e.morphAttributes.position,s=void 0!==e.morphAttributes.normal,i=void 0!==e.morphAttributes.color,n=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=void 0!==n?n.length:0;let a=Rc.get(e);if(void 0===a||a.count!==o){void 0!==a&&a.texture.dispose();const u=e.morphAttributes.position||[],l=e.morphAttributes.normal||[],d=e.morphAttributes.color||[];let c=0;!0===r&&(c=1),!0===s&&(c=2),!0===i&&(c=3);let h=e.attributes.position.count*c,p=1;const g=4096;h>g&&(p=Math.ceil(h/g),h=g);const m=new Float32Array(h*p*4*o),f=new C(m,h,p,o);f.type=w,f.needsUpdate=!0;const y=4*c;for(let b=0;b<o;b++){const T=u[b],_=l[b],v=d[b],N=h*p*4*b;for(let S=0;S<T.count;S++){const R=S*y;!0===r&&(Ac.fromBufferAttribute(T,S),m[N+R+0]=Ac.x,m[N+R+1]=Ac.y,m[N+R+2]=Ac.z,m[N+R+3]=0),!0===s&&(Ac.fromBufferAttribute(_,S),m[N+R+4]=Ac.x,m[N+R+5]=Ac.y,m[N+R+6]=Ac.z,m[N+R+7]=0),!0===i&&(Ac.fromBufferAttribute(v,S),m[N+R+8]=Ac.x,m[N+R+9]=Ac.y,m[N+R+10]=Ac.z,m[N+R+11]=4===v.itemSize?Ac.w:1)}}function x(){f.dispose(),Rc.delete(e),e.removeEventListener("dispose",x)}a={count:o,texture:f,stride:c,size:new t(h,p)},Rc.set(e,a),e.addEventListener("dispose",x)}return a}(r);!0===s&&xl.mulAssign(this.morphBaseInfluence),!0===i&&Cl.mulAssign(this.morphBaseInfluence);const d=Oi(l.width);Nc(o,(({i:e})=>{const t=Vi(0).toVar();this.mesh.count>1&&null!==this.mesh.morphTexture&&void 0!==this.mesh.morphTexture?t.assign(Vu(this.mesh.morphTexture,$i(Oi(e).add(1),Oi(uc))).r):t.assign(jl("morphTargetInfluences","float").element(e).toVar()),!0===s&&xl.addAssign(Ec({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Oi(0)})),!0===i&&Cl.addAssign(Ec({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Oi(1)}))}))}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce(((e,t)=>e+t),0)}}const wc=Mi(Cc);class Mc extends Os{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}}class Bc extends Mc{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class Fc extends Da{static get type(){return"LightingContextNode"}constructor(e,t=null,r=null,s=null){super(e),this.lightingModel=t,this.backdropNode=r,this.backdropAlphaNode=s,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,r={directDiffuse:ji().toVar("directDiffuse"),directSpecular:ji().toVar("directSpecular"),indirectDiffuse:ji().toVar("indirectDiffuse"),indirectSpecular:ji().toVar("indirectSpecular")};return{radiance:ji().toVar("radiance"),irradiance:ji().toVar("irradiance"),iblIrradiance:ji().toVar("iblIrradiance"),ambientOcclusion:Vi(1).toVar("ambientOcclusion"),reflectedLight:r,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const Uc=Mi(Fc);class Pc extends Mc{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let Ic,Lc;class Dc extends Os{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===Dc.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=Bs.NONE;return this.scope!==Dc.SIZE&&this.scope!==Dc.VIEWPORT||(e=Bs.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===Dc.VIEWPORT?null!==t?Lc.copy(t.viewport):(e.getViewport(Lc),Lc.multiplyScalar(e.getPixelRatio())):null!==t?(Ic.width=t.width,Ic.height=t.height):e.getDrawingBufferSize(Ic)}setup(){const e=this.scope;let r=null;return r=e===Dc.SIZE?mn(Ic||(Ic=new t)):e===Dc.VIEWPORT?mn(Lc||(Lc=new s)):zi(Gc.div(Oc)),r}generate(e){if(this.scope===Dc.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const r=e.getNodeProperties(Oc).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${r}.y - ${t}.y )`}return t}return super.generate(e)}}Dc.COORDINATE="coordinate",Dc.VIEWPORT="viewport",Dc.SIZE="size",Dc.UV="uv";const Vc=Bi(Dc,Dc.UV),Oc=Bi(Dc,Dc.SIZE),Gc=Bi(Dc,Dc.COORDINATE),kc=Bi(Dc,Dc.VIEWPORT),zc=kc.zw,$c=Gc.sub(kc.xy),Wc=$c.div(zc),Hc=Fi((()=>(console.warn('TSL.ViewportNode: "viewportResolution" is deprecated. Use "screenSize" instead.'),Oc)),"vec2").once()(),jc=Fi((()=>(console.warn('TSL.ViewportNode: "viewportTopLeft" is deprecated. Use "screenUV" instead.'),Vc)),"vec2").once()(),qc=Fi((()=>(console.warn('TSL.ViewportNode: "viewportBottomLeft" is deprecated. Use "screenUV.flipY()" instead.'),Vc.flipY())),"vec2").once()(),Xc=new t;class Kc extends Lu{static get type(){return"ViewportTextureNode"}constructor(e=Vc,t=null,r=null){null===r&&((r=new M).minFilter=B),super(r,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=Bs.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(Xc);const r=this.value;r.image.width===Xc.width&&r.image.height===Xc.height||(r.image.width=Xc.width,r.image.height=Xc.height,r.needsUpdate=!0);const s=r.generateMipmaps;r.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(r),r.generateMipmaps=s}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const Yc=Mi(Kc),Qc=Mi(Kc,null,null,{generateMipmaps:!0});let Zc=null;class Jc extends Kc{static get type(){return"ViewportDepthTextureNode"}constructor(e=Vc,t=null){null===Zc&&(Zc=new F),super(e,t,Zc)}}const eh=Mi(Jc);class th extends Os{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===th.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,r=this.valueNode;let s=null;if(t===th.DEPTH_BASE)null!==r&&(s=oh().assign(r));else if(t===th.DEPTH)s=e.isPerspectiveCamera?sh(vl.z,Hu,ju):rh(vl.z,Hu,ju);else if(t===th.LINEAR_DEPTH)if(null!==r)if(e.isPerspectiveCamera){const e=ih(r,Hu,ju);s=rh(e,Hu,ju)}else s=r;else s=rh(vl.z,Hu,ju);return s}}th.DEPTH_BASE="depthBase",th.DEPTH="depth",th.LINEAR_DEPTH="linearDepth";const rh=(e,t,r)=>e.add(t).div(t.sub(r)),sh=(e,t,r)=>t.add(e).mul(r).div(r.sub(t).mul(e)),ih=(e,t,r)=>t.mul(r).div(r.sub(t).mul(e).sub(r)),nh=(e,t,r)=>{t=t.max(1e-6).toVar();const s=Uo(e.negate().div(t)),i=Uo(r.div(t));return s.div(i)},oh=Mi(th,th.DEPTH_BASE),ah=Bi(th,th.DEPTH),uh=Mi(th,th.LINEAR_DEPTH),lh=uh(eh());ah.assign=e=>oh(e);const dh=Mi(class extends Os{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}});class ch extends Os{static get type(){return"ClippingNode"}constructor(e=ch.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:r,unionPlanes:s}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===ch.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(r,s):this.scope===ch.HARDWARE?this.setupHardwareClipping(s,e):this.setupDefault(r,s)}setupAlphaToCoverage(e,t){return Fi((()=>{const r=Vi().toVar("distanceToPlane"),s=Vi().toVar("distanceToGradient"),i=Vi(1).toVar("clipOpacity"),n=t.length;if(!1===this.hardwareClipping&&n>0){const e=$u(t);Nc(n,(({i:t})=>{const n=e.element(t);r.assign(vl.dot(n.xyz).negate().add(n.w)),s.assign(r.fwidth().div(2)),i.mulAssign(Aa(s.negate(),s,r))}))}const o=e.length;if(o>0){const t=$u(e),n=Vi(1).toVar("intersectionClipOpacity");Nc(o,(({i:e})=>{const i=t.element(e);r.assign(vl.dot(i.xyz).negate().add(i.w)),s.assign(r.fwidth().div(2)),n.mulAssign(Aa(s.negate(),s,r).oneMinus())})),i.mulAssign(n.oneMinus())}bn.a.mulAssign(i),bn.a.equal(0).discard()}))()}setupDefault(e,t){return Fi((()=>{const r=t.length;if(!1===this.hardwareClipping&&r>0){const e=$u(t);Nc(r,(({i:t})=>{const r=e.element(t);vl.dot(r.xyz).greaterThan(r.w).discard()}))}const s=e.length;if(s>0){const t=$u(e),r=ki(!0).toVar("clipped");Nc(s,(({i:e})=>{const s=t.element(e);r.assign(vl.dot(s.xyz).greaterThan(s.w).and(r))})),r.discard()}}))()}setupHardwareClipping(e,t){const r=e.length;return t.enableHardwareClipping(r),Fi((()=>{const s=$u(e),i=dh(t.getClipDistance());Nc(r,(({i:e})=>{const t=s.element(e),r=vl.dot(t.xyz).sub(t.w).negate();i.element(e).assign(r)}))}))()}}ch.ALPHA_TO_COVERAGE="alphaToCoverage",ch.DEFAULT="default",ch.HARDWARE="hardware";const hh=Fi((([e])=>Oo(eo(1e4,Go(eo(17,e.x).add(eo(.1,e.y)))).mul(Zn(.1,jo(Go(eo(13,e.y).add(e.x)))))))),ph=Fi((([e])=>hh(zi(hh(e.xy),e.z)))),gh=Fi((([e])=>{const t=aa(Xo(Qo(e.xyz)),Xo(Zo(e.xyz))),r=Vi(1).div(Vi(.05).mul(t)).toVar("pixScale"),s=zi(Bo(Lo(Uo(r))),Bo(Do(Uo(r)))),i=zi(ph(Lo(s.x.mul(e.xyz))),ph(Lo(s.y.mul(e.xyz)))),n=Oo(Uo(r)),o=Zn(eo(n.oneMinus(),i.x),eo(n,i.y)),a=oa(n,n.oneMinus()),u=ji(o.mul(o).div(eo(2,a).mul(Jn(1,a))),o.sub(eo(.5,a)).div(Jn(1,a)),Jn(1,Jn(1,o).mul(Jn(1,o)).div(eo(2,a).mul(Jn(1,a))))),l=o.lessThan(a.oneMinus()).select(o.lessThan(a).select(u.x,u.y),u.z);return Na(l,1e-6,1)})).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});class mh extends U{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.shadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+ys(this)}build(e){this.setup(e)}setupObserver(e){return new hs(e)}setup(e){e.context.setupNormal=()=>this.setupNormal(e),e.context.setupPositionView=()=>this.setupPositionView(e),e.context.setupModelViewProjection=()=>this.setupModelViewProjection(e);const t=e.renderer,r=t.getRenderTarget();e.addStack();const s=this.vertexNode||this.setupVertex(e);let i;e.stack.outputNode=s,this.setupHardwareClipping(e),null!==this.geometryNode&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();const n=this.setupClipping(e);if(!0!==this.depthWrite&&!0!==this.depthTest||(null!==r?!0===r.depthBuffer&&this.setupDepth(e):!0===t.depth&&this.setupDepth(e)),null===this.fragmentNode){this.setupDiffuseColor(e),this.setupVariants(e);const s=this.setupLighting(e);null!==n&&e.stack.add(n);const o=Yi(s,bn.a).max(0);if(i=this.setupOutput(e,o),Dn.assign(i),null!==this.outputNode&&(i=this.outputNode),null!==r){const e=t.getMRT(),r=this.mrtNode;null!==e?(i=e,null!==r&&(i=e.merge(r))):null!==r&&(i=r)}}else{let t=this.fragmentNode;!0!==t.isOutputStructNode&&(t=Yi(t)),i=this.setupOutput(e,t)}e.stack.outputNode=i,e.addFlow("fragment",e.removeStack()),e.observer=this.setupObserver(e)}setupClipping(e){if(null===e.clippingContext)return null;const{unionPlanes:t,intersectionPlanes:r}=e.clippingContext;let s=null;if(t.length>0||r.length>0){const t=e.renderer.samples;this.alphaToCoverage&&t>1?s=Ei(new ch(ch.ALPHA_TO_COVERAGE)):e.stack.add(Ei(new ch))}return s}setupHardwareClipping(e){if(this.hardwareClipping=!1,null===e.clippingContext)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(Ei(new ch(ch.HARDWARE))),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:r}=e;let s=this.depthNode;if(null===s){const e=t.getMRT();e&&e.has("depth")?s=e.get("depth"):!0===t.logarithmicDepthBuffer&&(s=r.isPerspectiveCamera?nh(vl.z,Hu,ju):rh(vl.z,Hu,ju))}null!==s&&ah.assign(s).append()}setupPositionView(){return pl.mul(xl).xyz}setupModelViewProjection(){return qu.mul(vl)}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),nc}setupPosition(e){const{object:t,geometry:r}=e;if((r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color)&&wc(t).append(),!0===t.isSkinnedMesh&&_c(t).append(),this.displacementMap){const e=Kl("displacementMap","texture"),t=Kl("displacementScale","float"),r=Kl("displacementBias","float");xl.addAssign(Cl.normalize().mul(e.x.mul(t).add(r)))}return t.isBatchedMesh&&xc(t).append(),t.isInstancedMesh&&t.instanceMatrix&&!0===t.instanceMatrix.isInstancedBufferAttribute&&fc(t).append(),null!==this.positionNode&&xl.assign(this.positionNode.context({isPositionNodeInput:!0})),xl}setupDiffuseColor({object:e,geometry:t}){let r=this.colorNode?Yi(this.colorNode):vd;if(!0===this.vertexColors&&t.hasAttribute("color")&&(r=Yi(r.xyz.mul(Mu("color","vec3")),r.a)),e.instanceColor){r=xn("vec3","vInstanceColor").mul(r)}if(e.isBatchedMesh&&e._colorsTexture){r=xn("vec3","vBatchColor").mul(r)}bn.assign(r);const s=this.opacityNode?Vi(this.opacityNode):Rd;if(bn.a.assign(bn.a.mul(s)),null!==this.alphaTestNode||this.alphaTest>0){const e=null!==this.alphaTestNode?Vi(this.alphaTestNode):_d;bn.a.lessThanEqual(e).discard()}!0===this.alphaHash&&bn.a.lessThan(gh(xl)).discard(),!1===this.transparent&&this.blending===P&&!1===this.alphaToCoverage&&bn.a.assign(1)}setupVariants(){}setupOutgoingLight(){return!0===this.lights?ji(0):bn.rgb}setupNormal(){return this.normalNode?ji(this.normalNode):Ud}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?Kl("envMap","cubeTexture"):Kl("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new Pc(rc)),t}setupLights(e){const t=[],r=this.setupEnvironment(e);r&&r.isLightingNode&&t.push(r);const s=this.setupLightMap(e);if(s&&s.isLightingNode&&t.push(s),null!==this.aoNode||e.material.aoMap){const e=null!==this.aoNode?this.aoNode:sc;t.push(new Bc(e))}let i=this.lightsNode||e.lightsNode;return t.length>0&&(i=e.renderer.lighting.createNode([...i.getLights(),...t])),i}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:r,backdropAlphaNode:s,emissiveNode:i}=this,n=!0===this.lights||null!==this.lightsNode?this.setupLights(e):null;let o=this.setupOutgoingLight(e);if(n&&n.getScope().hasLights){const t=this.setupLightingModel(e);o=Uc(n,t,r,s)}else null!==r&&(o=ji(null!==s?va(o,r,s):r));return(i&&!0===i.isNode||t.emissive&&!0===t.emissive.isColor)&&(Tn.assign(ji(i||Sd)),o=o.add(Tn)),o}setupOutput(e,t){if(!0===this.fog){const r=e.fogNode;r&&(Dn.assign(t),t=Yi(r))}return t}setDefaultValues(e){for(const t in e){const r=e[t];void 0===this[t]&&(this[t]=r,r&&r.clone&&(this[t]=r.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)void 0===Object.getOwnPropertyDescriptor(this.constructor.prototype,e)&&void 0!==t[e].get&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{},nodes:{}});const r=U.prototype.toJSON.call(this,e),s=xs(this);r.inputNodes={};for(const{property:t,childNode:i}of s)r.inputNodes[t]=i.toJSON(e).uuid;function i(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(t){const t=i(e.textures),s=i(e.images),n=i(e.nodes);t.length>0&&(r.textures=t),s.length>0&&(r.images=s),n.length>0&&(r.nodes=n)}return r}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.shadowPositionNode=e.shadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const fh=new I;class yh extends mh{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.setDefaultValues(fh),this.setValues(e)}}const xh=new L;class bh extends mh{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.setDefaultValues(xh),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?Vi(this.offsetNode):Jd,t=this.dashScaleNode?Vi(this.dashScaleNode):Kd,r=this.dashSizeNode?Vi(this.dashSizeNode):Yd,s=this.gapSizeNode?Vi(this.gapSizeNode):Qd;Vn.assign(r),On.assign(s);const i=ja(Mu("lineDistance").mul(t));(e?i.add(e):i).mod(Vn.add(On)).greaterThan(Vn).discard()}}let Th=null;class _h extends Kc{static get type(){return"ViewportSharedTextureNode"}constructor(e=Vc,t=null){null===Th&&(Th=new M),super(e,t,Th)}updateReference(){return this}}const vh=Mi(_h),Nh=new L;class Sh extends mh{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.isLine2NodeMaterial=!0,this.setDefaultValues(Nh),this.useColor=e.vertexColors,this.dashOffset=0,this.lineWidth=1,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.blending=D,this._useDash=e.dashed,this._useAlphaToCoverage=!0,this._useWorldUnits=!1,this.setValues(e)}setup(e){const{renderer:t}=e,r=this._useAlphaToCoverage,s=this.useColor,i=this._useDash,n=this._useWorldUnits,o=Fi((({start:e,end:t})=>{const r=qu.element(2).element(2),s=qu.element(3).element(2).mul(-.5).div(r).sub(e.z).div(t.z.sub(e.z));return Yi(va(e.xyz,t.xyz,s),t.w)})).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=Fi((()=>{const e=Mu("instanceStart"),t=Mu("instanceEnd"),r=Yi(pl.mul(Yi(e,1))).toVar("start"),s=Yi(pl.mul(Yi(t,1))).toVar("end");if(i){const e=this.dashScaleNode?Vi(this.dashScaleNode):Kd,t=this.offsetNode?Vi(this.offsetNode):Jd,r=Mu("instanceDistanceStart"),s=Mu("instanceDistanceEnd");let i=yl.y.lessThan(.5).select(e.mul(r),e.mul(s));i=i.add(t),xn("float","lineDistance").assign(i)}n&&(xn("vec3","worldStart").assign(r.xyz),xn("vec3","worldEnd").assign(s.xyz));const a=kc.z.div(kc.w),u=qu.element(2).element(3).equal(-1);Ii(u,(()=>{Ii(r.z.lessThan(0).and(s.z.greaterThan(0)),(()=>{s.assign(o({start:r,end:s}))})).ElseIf(s.z.lessThan(0).and(r.z.greaterThanEqual(0)),(()=>{r.assign(o({start:s,end:r}))}))}));const l=qu.mul(r),d=qu.mul(s),c=l.xyz.div(l.w),h=d.xyz.div(d.w),p=h.xy.sub(c.xy).toVar();p.x.assign(p.x.mul(a)),p.assign(p.normalize());const g=Yi().toVar();if(n){const e=s.xyz.sub(r.xyz).normalize(),t=va(r.xyz,s.xyz,.5).normalize(),n=e.cross(t).normalize(),o=e.cross(n),a=xn("vec4","worldPos");a.assign(yl.y.lessThan(.5).select(r,s));const u=Zd.mul(.5);a.addAssign(Yi(yl.x.lessThan(0).select(n.mul(u),n.mul(u).negate()),0)),i||(a.addAssign(Yi(yl.y.lessThan(.5).select(e.mul(u).negate(),e.mul(u)),0)),a.addAssign(Yi(o.mul(u),0)),Ii(yl.y.greaterThan(1).or(yl.y.lessThan(0)),(()=>{a.subAssign(Yi(o.mul(2).mul(u),0))}))),g.assign(qu.mul(a));const l=ji().toVar();l.assign(yl.y.lessThan(.5).select(c,h)),g.z.assign(l.z.mul(g.w))}else{const e=zi(p.y,p.x.negate()).toVar("offset");p.x.assign(p.x.div(a)),e.x.assign(e.x.div(a)),e.assign(yl.x.lessThan(0).select(e.negate(),e)),Ii(yl.y.lessThan(0),(()=>{e.assign(e.sub(p))})).ElseIf(yl.y.greaterThan(1),(()=>{e.assign(e.add(p))})),e.assign(e.mul(Zd)),e.assign(e.div(kc.w)),g.assign(yl.y.lessThan(.5).select(l,d)),e.assign(e.mul(g.w)),g.assign(g.add(Yi(e,0,0)))}return g}))();const a=Fi((({p1:e,p2:t,p3:r,p4:s})=>{const i=e.sub(r),n=s.sub(r),o=t.sub(e),a=i.dot(n),u=n.dot(o),l=i.dot(o),d=n.dot(n),c=o.dot(o).mul(d).sub(u.mul(u)),h=a.mul(u).sub(l.mul(d)).div(c).clamp(),p=a.add(u.mul(h)).div(d).clamp();return zi(h,p)}));if(this.colorNode=Fi((()=>{const e=Bu();if(i){const t=this.dashSizeNode?Vi(this.dashSizeNode):Yd,r=this.gapSizeNode?Vi(this.gapSizeNode):Qd;Vn.assign(t),On.assign(r);const s=xn("float","lineDistance");e.y.lessThan(-1).or(e.y.greaterThan(1)).discard(),s.mod(Vn.add(On)).greaterThan(Vn).discard()}const o=Vi(1).toVar("alpha");if(n){const e=xn("vec3","worldStart"),s=xn("vec3","worldEnd"),n=xn("vec4","worldPos").xyz.normalize().mul(1e5),u=s.sub(e),l=a({p1:e,p2:s,p3:ji(0,0,0),p4:n}),d=e.add(u.mul(l.x)),c=n.mul(l.y),h=d.sub(c).length().div(Zd);if(!i)if(r&&t.samples>1){const e=h.fwidth();o.assign(Aa(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(r&&t.samples>1){const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1)),s=t.mul(t).add(r.mul(r)),i=Vi(s.fwidth()).toVar("dlen");Ii(e.y.abs().greaterThan(1),(()=>{o.assign(Aa(i.oneMinus(),i.add(1),s).oneMinus())}))}else Ii(e.y.abs().greaterThan(1),(()=>{const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1));t.mul(t).add(r.mul(r)).greaterThan(1).discard()}));let u;if(this.lineColorNode)u=this.lineColorNode;else if(s){const e=Mu("instanceColorStart"),t=Mu("instanceColorEnd");u=yl.y.lessThan(.5).select(e,t).mul(vd)}else u=vd;return Yi(u,o)}))(),this.transparent){const e=this.opacityNode?Vi(this.opacityNode):Rd;this.outputNode=Yi(this.colorNode.rgb.mul(e).add(vh().rgb.mul(e.oneMinus())),this.colorNode.a)}super.setup(e)}get worldUnits(){return this._useWorldUnits}set worldUnits(e){this._useWorldUnits!==e&&(this._useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this._useDash}set dashed(e){this._useDash!==e&&(this._useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}const Rh=e=>Ei(e).mul(.5).add(.5),Ah=new V;class Eh extends mh{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(Ah),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?Vi(this.opacityNode):Rd;bn.assign(Yi(Rh(Fl),e))}}class Ch extends zs{static get type(){return"EquirectUVNode"}constructor(e=_l){super("vec2"),this.dirNode=e}setup(){const e=this.dirNode,t=e.z.atan(e.x).mul(1/(2*Math.PI)).add(.5),r=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return zi(t,r)}}const wh=Mi(Ch);class Mh extends O{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const r=t.minFilter,s=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i=new G(5,5,5),n=wh(_l),o=new mh;o.colorNode=Du(t,n,0),o.side=_,o.blending=D;const a=new k(i,o),u=new z;u.add(a),t.minFilter===B&&(t.minFilter=$);const l=new W(1,10,this),d=e.getMRT();return e.setMRT(null),l.update(e,u),e.setMRT(d),t.minFilter=r,t.currentGenerateMipmaps=s,a.geometry.dispose(),a.material.dispose(),this}}const Bh=new WeakMap;class Fh extends zs{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=$l();const t=new H;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=Bs.RENDER}updateBefore(e){const{renderer:t,material:r}=e,s=this.envNode;if(s.isTextureNode||s.isMaterialReferenceNode){const e=s.isTextureNode?s.value:r[s.property];if(e&&e.isTexture){const r=e.mapping;if(r===j||r===q){if(Bh.has(e)){const t=Bh.get(e);Ph(t,e.mapping),this._cubeTexture=t}else{const r=e.image;if(function(e){return null!=e&&e.height>0}(r)){const s=new Mh(r.height);s.fromEquirectangularTexture(t,e),Ph(s.texture,e.mapping),this._cubeTexture=s.texture,Bh.set(e,s.texture),e.addEventListener("dispose",Uh)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function Uh(e){const t=e.target;t.removeEventListener("dispose",Uh);const r=Bh.get(t);void 0!==r&&(Bh.delete(t),r.dispose())}function Ph(e,t){t===j?e.mapping=v:t===q&&(e.mapping=N)}const Ih=Mi(Fh);class Lh extends Mc{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=Ih(this.envNode)}}class Dh extends Mc{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=Vi(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class Vh{start(){}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class Oh extends Vh{constructor(){super()}indirect(e,t,r){const s=e.ambientOcclusion,i=e.reflectedLight,n=r.context.irradianceLightMap;i.indirectDiffuse.assign(Yi(0)),n?i.indirectDiffuse.addAssign(n):i.indirectDiffuse.addAssign(Yi(1,1,1,0)),i.indirectDiffuse.mulAssign(s),i.indirectDiffuse.mulAssign(bn.rgb)}finish(e,t,r){const s=r.material,i=e.outgoingLight,n=r.context.environment;if(n)switch(s.combine){case Y:i.rgb.assign(va(i.rgb,i.rgb.mul(n.rgb),wd.mul(Md)));break;case K:i.rgb.assign(va(i.rgb,n.rgb,wd.mul(Md)));break;case X:i.rgb.addAssign(n.rgb.mul(wd.mul(Md)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",s.combine)}}}const Gh=new Q;class kh extends mh{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Gh),this.setValues(e)}setupNormal(){return Ml}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Lh(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new Dh(rc)),t}setupOutgoingLight(){return bn.rgb}setupLightingModel(){return new Oh}}const zh=Fi((({f0:e,f90:t,dotVH:r})=>{const s=r.mul(-5.55473).sub(6.98316).mul(r).exp2();return e.mul(s.oneMinus()).add(t.mul(s))})),$h=Fi((e=>e.diffuseColor.mul(1/Math.PI))),Wh=Fi((({dotNH:e})=>Ln.mul(Vi(.5)).add(1).mul(Vi(1/Math.PI)).mul(e.pow(Ln)))),Hh=Fi((({lightDirection:e})=>{const t=e.add(Nl).normalize(),r=Fl.dot(t).clamp(),s=Nl.dot(t).clamp(),i=zh({f0:Pn,f90:1,dotVH:s}),n=Vi(.25),o=Wh({dotNH:r});return i.mul(n).mul(o)}));class jh extends Oh{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=Fl.dot(e).clamp().mul(t);r.directDiffuse.addAssign(s.mul($h({diffuseColor:bn.rgb}))),!0===this.specular&&r.directSpecular.addAssign(s.mul(Hh({lightDirection:e})).mul(wd))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:r}){r.indirectDiffuse.addAssign(t.mul($h({diffuseColor:bn}))),r.indirectDiffuse.mulAssign(e)}}const qh=new Z;class Xh extends mh{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(qh),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Lh(t):null}setupLightingModel(){return new jh(!1)}}const Kh=new J;class Yh extends mh{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(Kh),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Lh(t):null}setupLightingModel(){return new jh}setupVariants(){const e=(this.shininessNode?Vi(this.shininessNode):Nd).max(1e-4);Ln.assign(e);const t=this.specularNode||Ad;Pn.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const Qh=Fi((e=>{if(!1===e.geometry.hasAttribute("normal"))return Vi(0);const t=Ml.dFdx().abs().max(Ml.dFdy().abs());return t.x.max(t.y).max(t.z)})),Zh=Fi((e=>{const{roughness:t}=e,r=Qh();let s=t.max(.0525);return s=s.add(r),s=s.min(1),s})),Jh=Fi((({alpha:e,dotNL:t,dotNV:r})=>{const s=e.pow2(),i=t.mul(s.add(s.oneMinus().mul(r.pow2())).sqrt()),n=r.mul(s.add(s.oneMinus().mul(t.pow2())).sqrt());return to(.5,i.add(n).max(vo))})).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),ep=Fi((({alphaT:e,alphaB:t,dotTV:r,dotBV:s,dotTL:i,dotBL:n,dotNV:o,dotNL:a})=>{const u=a.mul(ji(e.mul(r),t.mul(s),o).length()),l=o.mul(ji(e.mul(i),t.mul(n),a).length());return to(.5,u.add(l)).saturate()})).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),tp=Fi((({alpha:e,dotNH:t})=>{const r=e.pow2(),s=t.pow2().mul(r.oneMinus()).oneMinus();return r.div(s.pow2()).mul(1/Math.PI)})).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),rp=Vi(1/Math.PI),sp=Fi((({alphaT:e,alphaB:t,dotNH:r,dotTH:s,dotBH:i})=>{const n=e.mul(t),o=ji(t.mul(s),e.mul(i),n.mul(r)),a=o.dot(o),u=n.div(a);return rp.mul(n.mul(u.pow2()))})).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),ip=Fi((e=>{const{lightDirection:t,f0:r,f90:s,roughness:i,f:n,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=e,u=e.normalView||Fl,l=i.pow2(),d=t.add(Nl).normalize(),c=u.dot(t).clamp(),h=u.dot(Nl).clamp(),p=u.dot(d).clamp(),g=Nl.dot(d).clamp();let m,f,y=zh({f0:r,f90:s,dotVH:g});if(Si(o)&&(y=En.mix(y,n)),Si(a)){const e=Fn.dot(t),r=Fn.dot(Nl),s=Fn.dot(d),i=Un.dot(t),n=Un.dot(Nl),o=Un.dot(d);m=ep({alphaT:Mn,alphaB:l,dotTV:r,dotBV:n,dotTL:e,dotBL:i,dotNV:h,dotNL:c}),f=sp({alphaT:Mn,alphaB:l,dotNH:p,dotTH:s,dotBH:o})}else m=Jh({alpha:l,dotNL:c,dotNV:h}),f=tp({alpha:l,dotNH:p});return y.mul(m).mul(f)})),np=Fi((({roughness:e,dotNV:t})=>{const r=Yi(-1,-.0275,-.572,.022),s=Yi(1,.0425,1.04,-.04),i=e.mul(r).add(s),n=i.x.mul(i.x).min(t.mul(-9.28).exp2()).mul(i.x).add(i.y);return zi(-1.04,1.04).mul(n).add(i.zw)})).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),op=Fi((e=>{const{dotNV:t,specularColor:r,specularF90:s,roughness:i}=e,n=np({dotNV:t,roughness:i});return r.mul(n.x).add(s.mul(n.y))})),ap=Fi((({f:e,f90:t,dotVH:r})=>{const s=r.oneMinus().saturate(),i=s.mul(s),n=s.mul(i,i).clamp(0,.9999);return e.sub(ji(t).mul(n)).div(n.oneMinus())})).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),up=Fi((({roughness:e,dotNH:t})=>{const r=e.pow2(),s=Vi(1).div(r),i=t.pow2().oneMinus().max(.0078125);return Vi(2).add(s).mul(i.pow(s.mul(.5))).div(2*Math.PI)})).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),lp=Fi((({dotNV:e,dotNL:t})=>Vi(1).div(Vi(4).mul(t.add(e).sub(t.mul(e)))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),dp=Fi((({lightDirection:e})=>{const t=e.add(Nl).normalize(),r=Fl.dot(e).clamp(),s=Fl.dot(Nl).clamp(),i=Fl.dot(t).clamp(),n=up({roughness:An,dotNH:i}),o=lp({dotNV:s,dotNL:r});return Rn.mul(n).mul(o)})),cp=Fi((({N:e,V:t,roughness:r})=>{const s=e.dot(t).saturate(),i=zi(r,s.oneMinus().sqrt());return i.assign(i.mul(.984375).add(.0078125)),i})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),hp=Fi((({f:e})=>{const t=e.length();return aa(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),pp=Fi((({v1:e,v2:t})=>{const r=e.dot(t),s=r.abs().toVar(),i=s.mul(.0145206).add(.4965155).mul(s).add(.8543985).toVar(),n=s.add(4.1616724).mul(s).add(3.417594).toVar(),o=i.div(n),a=r.greaterThan(0).select(o,aa(r.mul(r).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return e.cross(t).mul(a)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),gp=Fi((({N:e,V:t,P:r,mInv:s,p0:i,p1:n,p2:o,p3:a})=>{const u=n.sub(i).toVar(),l=a.sub(i).toVar(),d=u.cross(l),c=ji().toVar();return Ii(d.dot(r.sub(i)).greaterThanEqual(0),(()=>{const u=t.sub(e.mul(t.dot(e))).normalize(),l=e.cross(u).negate(),d=s.mul(tn(u,l,e).transpose()).toVar(),h=d.mul(i.sub(r)).normalize().toVar(),p=d.mul(n.sub(r)).normalize().toVar(),g=d.mul(o.sub(r)).normalize().toVar(),m=d.mul(a.sub(r)).normalize().toVar(),f=ji(0).toVar();f.addAssign(pp({v1:h,v2:p})),f.addAssign(pp({v1:p,v2:g})),f.addAssign(pp({v1:g,v2:m})),f.addAssign(pp({v1:m,v2:h})),c.assign(ji(hp({f:f})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),mp=1/6,fp=e=>eo(mp,eo(e,eo(e,e.negate().add(3)).sub(3)).add(1)),yp=e=>eo(mp,eo(e,eo(e,eo(3,e).sub(6))).add(4)),xp=e=>eo(mp,eo(e,eo(e,eo(-3,e).add(3)).add(3)).add(1)),bp=e=>eo(mp,ma(e,3)),Tp=e=>fp(e).add(yp(e)),_p=e=>xp(e).add(bp(e)),vp=e=>Zn(-1,yp(e).div(fp(e).add(yp(e)))),Np=e=>Zn(1,bp(e).div(xp(e).add(bp(e)))),Sp=(e,t,r)=>{const s=e.uvNode,i=eo(s,t.zw).add(.5),n=Lo(i),o=Oo(i),a=Tp(o.x),u=_p(o.x),l=vp(o.x),d=Np(o.x),c=vp(o.y),h=Np(o.y),p=zi(n.x.add(l),n.y.add(c)).sub(.5).mul(t.xy),g=zi(n.x.add(d),n.y.add(c)).sub(.5).mul(t.xy),m=zi(n.x.add(l),n.y.add(h)).sub(.5).mul(t.xy),f=zi(n.x.add(d),n.y.add(h)).sub(.5).mul(t.xy),y=Tp(o.y).mul(Zn(a.mul(e.sample(p).level(r)),u.mul(e.sample(g).level(r)))),x=_p(o.y).mul(Zn(a.mul(e.sample(m).level(r)),u.mul(e.sample(f).level(r))));return y.add(x)},Rp=Fi((([e,t=Vi(3)])=>{const r=zi(e.size(Oi(t))),s=zi(e.size(Oi(t.add(1)))),i=to(1,r),n=to(1,s),o=Sp(e,Yi(i,r),Lo(t)),a=Sp(e,Yi(n,s),Do(t));return Oo(t).mix(o,a)})),Ap=Fi((([e,t,r,s,i])=>{const n=ji(Ra(t.negate(),Vo(e),to(1,s))),o=ji(Xo(i[0].xyz),Xo(i[1].xyz),Xo(i[2].xyz));return Vo(n).mul(r.mul(o))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),Ep=Fi((([e,t])=>e.mul(Na(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),Cp=Qc(),wp=Qc(),Mp=Fi((([e,t,r],{material:s})=>{const i=(s.side===_?Cp:wp).sample(e),n=Uo(Oc.x).mul(Ep(t,r));return Rp(i,n)})),Bp=Fi((([e,t,r])=>(Ii(r.notEqual(0),(()=>{const s=Fo(t).negate().div(r);return Mo(s.negate().mul(e))})),ji(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),Fp=Fi((([e,t,r,s,i,n,o,a,u,l,d,c,h,p,g])=>{let m,f;if(g){m=Yi().toVar(),f=ji().toVar();const i=d.sub(1).mul(g.mul(.025)),n=ji(d.sub(i),d,d.add(i));Nc({start:0,end:3},(({i:i})=>{const d=n.element(i),g=Ap(e,t,c,d,a),y=o.add(g),x=l.mul(u.mul(Yi(y,1))),b=zi(x.xy.div(x.w)).toVar();b.addAssign(1),b.divAssign(2),b.assign(zi(b.x,b.y.oneMinus()));const T=Mp(b,r,d);m.element(i).assign(T.element(i)),m.a.addAssign(T.a),f.element(i).assign(s.element(i).mul(Bp(Xo(g),h,p).element(i)))})),m.a.divAssign(3)}else{const i=Ap(e,t,c,d,a),n=o.add(i),g=l.mul(u.mul(Yi(n,1))),y=zi(g.xy.div(g.w)).toVar();y.addAssign(1),y.divAssign(2),y.assign(zi(y.x,y.y.oneMinus())),m=Mp(y,r,d),f=s.mul(Bp(Xo(i),h,p))}const y=f.rgb.mul(m.rgb),x=e.dot(t).clamp(),b=ji(op({dotNV:x,specularColor:i,specularF90:n,roughness:r})),T=f.r.add(f.g,f.b).div(3);return Yi(b.oneMinus().mul(y),m.a.oneMinus().mul(T).oneMinus())})),Up=tn(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),Pp=(e,t)=>e.sub(t).div(e.add(t)).pow2(),Ip=Fi((({outsideIOR:e,eta2:t,cosTheta1:r,thinFilmThickness:s,baseF0:i})=>{const n=va(e,t,Aa(0,.03,s)),o=e.div(n).pow2().mul(r.pow2().oneMinus()).oneMinus();Ii(o.lessThan(0),(()=>ji(1)));const a=o.sqrt(),u=Pp(n,e),l=zh({f0:u,f90:1,dotVH:r}),d=l.oneMinus(),c=n.lessThan(e).select(Math.PI,0),h=Vi(Math.PI).sub(c),p=(e=>{const t=e.sqrt();return ji(1).add(t).div(ji(1).sub(t))})(i.clamp(0,.9999)),g=Pp(p,n.toVec3()),m=zh({f0:g,f90:1,dotVH:a}),f=ji(p.x.lessThan(n).select(Math.PI,0),p.y.lessThan(n).select(Math.PI,0),p.z.lessThan(n).select(Math.PI,0)),y=n.mul(s,a,2),x=ji(h).add(f),b=l.mul(m).clamp(1e-5,.9999),T=b.sqrt(),_=d.pow2().mul(m).div(ji(1).sub(b)),v=l.add(_).toVar(),N=_.sub(d).toVar();return Nc({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{N.mulAssign(T);const t=((e,t)=>{const r=e.mul(2*Math.PI*1e-9),s=ji(54856e-17,44201e-17,52481e-17),i=ji(1681e3,1795300,2208400),n=ji(43278e5,93046e5,66121e5),o=Vi(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(r.mul(2239900).add(t.x).cos()).mul(r.pow2().mul(-45282e5).exp());let a=s.mul(n.mul(2*Math.PI).sqrt()).mul(i.mul(r).add(t).cos()).mul(r.pow2().negate().mul(n).exp());return a=ji(a.x.add(o),a.y,a.z).div(1.0685e-7),Up.mul(a)})(Vi(e).mul(y),Vi(e).mul(x)).mul(2);v.addAssign(N.mul(t))})),v.max(ji(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),Lp=Fi((({normal:e,viewDir:t,roughness:r})=>{const s=e.dot(t).saturate(),i=r.pow2(),n=Ia(r.lessThan(.25),Vi(-339.2).mul(i).add(Vi(161.4).mul(r)).sub(25.9),Vi(-8.48).mul(i).add(Vi(14.3).mul(r)).sub(9.95)),o=Ia(r.lessThan(.25),Vi(44).mul(i).sub(Vi(23.7).mul(r)).add(3.26),Vi(1.97).mul(i).sub(Vi(3.27).mul(r)).add(.72));return Ia(r.lessThan(.25),0,Vi(.1).mul(r).sub(.025)).add(n.mul(s).add(o).exp()).mul(1/Math.PI).saturate()})),Dp=ji(.04),Vp=Vi(1);class Op extends Vh{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=r,this.anisotropy=s,this.transmission=i,this.dispersion=n,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=ji().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=ji().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=ji().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=ji().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=ji().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=Fl.dot(Nl).clamp();this.iridescenceFresnel=Ip({outsideIOR:Vi(1),eta2:Cn,cosTheta1:e,thinFilmThickness:wn,baseF0:Pn}),this.iridescenceF0=ap({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=Tl,r=Zu.sub(Tl).normalize(),s=Ul;e.backdrop=Fp(s,r,_n,bn,Pn,In,t,al,Ku,qu,kn,$n,Hn,Wn,this.dispersion?jn:null),e.backdropAlpha=zn,bn.a.mulAssign(va(1,e.backdrop.a,zn))}}computeMultiscattering(e,t,r){const s=Fl.dot(Nl).clamp(),i=np({roughness:_n,dotNV:s}),n=(this.iridescenceF0?En.mix(Pn,this.iridescenceF0):Pn).mul(i.x).add(r.mul(i.y)),o=i.x.add(i.y).oneMinus(),a=Pn.add(Pn.oneMinus().mul(.047619)),u=n.mul(a).div(o.mul(a).oneMinus());e.addAssign(n),t.addAssign(u.mul(o))}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=Fl.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(s.mul(dp({lightDirection:e}))),!0===this.clearcoat){const r=Pl.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(r.mul(ip({lightDirection:e,f0:Dp,f90:Vp,roughness:Sn,normalView:Pl})))}r.directDiffuse.addAssign(s.mul($h({diffuseColor:bn.rgb}))),r.directSpecular.addAssign(s.mul(ip({lightDirection:e,f0:Pn,f90:1,roughness:_n,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s,reflectedLight:i,ltc_1:n,ltc_2:o}){const a=t.add(r).sub(s),u=t.sub(r).sub(s),l=t.sub(r).add(s),d=t.add(r).add(s),c=Fl,h=Nl,p=vl.toVar(),g=cp({N:c,V:h,roughness:_n}),m=n.sample(g).toVar(),f=o.sample(g).toVar(),y=tn(ji(m.x,0,m.y),ji(0,1,0),ji(m.z,0,m.w)).toVar(),x=Pn.mul(f.x).add(Pn.oneMinus().mul(f.y)).toVar();i.directSpecular.addAssign(e.mul(x).mul(gp({N:c,V:h,P:p,mInv:y,p0:a,p1:u,p2:l,p3:d}))),i.directDiffuse.addAssign(e.mul(bn).mul(gp({N:c,V:h,P:p,mInv:tn(1,0,0,0,1,0,0,0,1),p0:a,p1:u,p2:l,p3:d})))}indirect(e,t,r){this.indirectDiffuse(e,t,r),this.indirectSpecular(e,t,r),this.ambientOcclusion(e,t,r)}indirectDiffuse({irradiance:e,reflectedLight:t}){t.indirectDiffuse.addAssign(e.mul($h({diffuseColor:bn})))}indirectSpecular({radiance:e,iblIrradiance:t,reflectedLight:r}){if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(t.mul(Rn,Lp({normal:Fl,viewDir:Nl,roughness:An}))),!0===this.clearcoat){const e=Pl.dot(Nl).clamp(),t=op({dotNV:e,specularColor:Dp,specularF90:Vp,roughness:Sn});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const s=ji().toVar("singleScattering"),i=ji().toVar("multiScattering"),n=t.mul(1/Math.PI);this.computeMultiscattering(s,i,In);const o=s.add(i),a=bn.mul(o.r.max(o.g).max(o.b).oneMinus());r.indirectSpecular.addAssign(e.mul(s)),r.indirectSpecular.addAssign(i.mul(n)),r.indirectDiffuse.addAssign(a.mul(n))}ambientOcclusion({ambientOcclusion:e,reflectedLight:t}){const r=Fl.dot(Nl).clamp().add(e),s=_n.mul(-16).oneMinus().negate().exp2(),i=e.sub(r.pow(s).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(e),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(e),t.indirectDiffuse.mulAssign(e),t.indirectSpecular.mulAssign(i)}finish(e){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=Pl.dot(Nl).clamp(),r=zh({dotVH:e,f0:Dp,f90:Vp}),s=t.mul(Nn.mul(r).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(Nn));t.assign(s)}if(!0===this.sheen){const e=Rn.r.max(Rn.g).max(Rn.b).mul(.157).oneMinus(),r=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(r)}}}const Gp=Vi(1),kp=Vi(-2),zp=Vi(.8),$p=Vi(-1),Wp=Vi(.4),Hp=Vi(2),jp=Vi(.305),qp=Vi(3),Xp=Vi(.21),Kp=Vi(4),Yp=Vi(4),Qp=Vi(16),Zp=Fi((([e])=>{const t=ji(jo(e)).toVar(),r=Vi(-1).toVar();return Ii(t.x.greaterThan(t.z),(()=>{Ii(t.x.greaterThan(t.y),(()=>{r.assign(Ia(e.x.greaterThan(0),0,3))})).Else((()=>{r.assign(Ia(e.y.greaterThan(0),1,4))}))})).Else((()=>{Ii(t.z.greaterThan(t.y),(()=>{r.assign(Ia(e.z.greaterThan(0),2,5))})).Else((()=>{r.assign(Ia(e.y.greaterThan(0),1,4))}))})),r})).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),Jp=Fi((([e,t])=>{const r=zi().toVar();return Ii(t.equal(0),(()=>{r.assign(zi(e.z,e.y).div(jo(e.x)))})).ElseIf(t.equal(1),(()=>{r.assign(zi(e.x.negate(),e.z.negate()).div(jo(e.y)))})).ElseIf(t.equal(2),(()=>{r.assign(zi(e.x.negate(),e.y).div(jo(e.z)))})).ElseIf(t.equal(3),(()=>{r.assign(zi(e.z.negate(),e.y).div(jo(e.x)))})).ElseIf(t.equal(4),(()=>{r.assign(zi(e.x.negate(),e.z).div(jo(e.y)))})).Else((()=>{r.assign(zi(e.x,e.y).div(jo(e.z)))})),eo(.5,r.add(1))})).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),eg=Fi((([e])=>{const t=Vi(0).toVar();return Ii(e.greaterThanEqual(zp),(()=>{t.assign(Gp.sub(e).mul($p.sub(kp)).div(Gp.sub(zp)).add(kp))})).ElseIf(e.greaterThanEqual(Wp),(()=>{t.assign(zp.sub(e).mul(Hp.sub($p)).div(zp.sub(Wp)).add($p))})).ElseIf(e.greaterThanEqual(jp),(()=>{t.assign(Wp.sub(e).mul(qp.sub(Hp)).div(Wp.sub(jp)).add(Hp))})).ElseIf(e.greaterThanEqual(Xp),(()=>{t.assign(jp.sub(e).mul(Kp.sub(qp)).div(jp.sub(Xp)).add(qp))})).Else((()=>{t.assign(Vi(-2).mul(Uo(eo(1.16,e))))})),t})).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),tg=Fi((([e,t])=>{const r=e.toVar();r.assign(eo(2,r).sub(1));const s=ji(r,1).toVar();return Ii(t.equal(0),(()=>{s.assign(s.zyx)})).ElseIf(t.equal(1),(()=>{s.assign(s.xzy),s.xz.mulAssign(-1)})).ElseIf(t.equal(2),(()=>{s.x.mulAssign(-1)})).ElseIf(t.equal(3),(()=>{s.assign(s.zyx),s.xz.mulAssign(-1)})).ElseIf(t.equal(4),(()=>{s.assign(s.xzy),s.xy.mulAssign(-1)})).ElseIf(t.equal(5),(()=>{s.z.mulAssign(-1)})),s})).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),rg=Fi((([e,t,r,s,i,n])=>{const o=Vi(r),a=ji(t),u=Na(eg(o),kp,n),l=Oo(u),d=Lo(u),c=ji(sg(e,a,d,s,i,n)).toVar();return Ii(l.notEqual(0),(()=>{const t=ji(sg(e,a,d.add(1),s,i,n)).toVar();c.assign(va(c,t,l))})),c})),sg=Fi((([e,t,r,s,i,n])=>{const o=Vi(r).toVar(),a=ji(t),u=Vi(Zp(a)).toVar(),l=Vi(aa(Yp.sub(o),0)).toVar();o.assign(aa(o,Yp));const d=Vi(Bo(o)).toVar(),c=zi(Jp(a,u).mul(d.sub(2)).add(1)).toVar();return Ii(u.greaterThan(2),(()=>{c.y.addAssign(d),u.subAssign(3)})),c.x.addAssign(u.mul(d)),c.x.addAssign(l.mul(eo(3,Qp))),c.y.addAssign(eo(4,Bo(n).sub(d))),c.x.mulAssign(s),c.y.mulAssign(i),e.sample(c).grad(zi(),zi())})),ig=Fi((({envMap:e,mipInt:t,outputDirection:r,theta:s,axis:i,CUBEUV_TEXEL_WIDTH:n,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const u=ko(s),l=r.mul(u).add(i.cross(r).mul(Go(s))).add(i.mul(i.dot(r).mul(u.oneMinus())));return sg(e,l,t,n,o,a)})),ng=Fi((({n:e,latitudinal:t,poleAxis:r,outputDirection:s,weights:i,samples:n,dTheta:o,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})=>{const h=ji(Ia(t,r,ga(r,s))).toVar();Ii(Ao(h.equals(ji(0))),(()=>{h.assign(ji(s.z,0,s.x.negate()))})),h.assign(Vo(h));const p=ji().toVar();return p.addAssign(i.element(0).mul(ig({theta:0,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),Nc({start:Oi(1),end:e},(({i:e})=>{Ii(e.greaterThanEqual(n),(()=>{Sc()}));const t=Vi(o.mul(Vi(e))).toVar();p.addAssign(i.element(e).mul(ig({theta:t.mul(-1),axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),p.addAssign(i.element(e).mul(ig({theta:t,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})))})),Yi(p,1)}));let og=null;const ag=new WeakMap;function ug(e){let t=ag.get(e);if((void 0!==t?t.pmremVersion:-1)!==e.pmremVersion){const r=e.image;if(e.isCubeTexture){if(!function(e){if(null==e)return!1;let t=0;const r=6;for(let s=0;s<r;s++)void 0!==e[s]&&t++;return t===r}(r))return null;t=og.fromCubemap(e,t)}else{if(!function(e){return null!=e&&e.height>0}(r))return null;t=og.fromEquirectangular(e,t)}t.pmremVersion=e.pmremVersion,ag.set(e,t)}return t.texture}class lg extends zs{static get type(){return"PMREMNode"}constructor(e,t=null,r=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=r,this._generator=null;const s=new ee;s.isRenderTargetTexture=!0,this._texture=Du(s),this._width=mn(0),this._height=mn(0),this._maxMip=mn(0),this.updateBeforeType=Bs.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=function(e){const t=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:r,maxMip:t}}(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(){let e=this._pmrem;const t=e?e.pmremVersion:-1,r=this._value;t!==r.pmremVersion&&(e=!0===r.isPMREMTexture?r:ug(r),null!==e&&(this._pmrem=e,this.updateFromTexture(e)))}setup(e){null===og&&(og=e.createPMREMGenerator()),this.updateBefore(e);let t=this.uvNode;null===t&&e.context.getUV&&(t=e.context.getUV(this));const r=this.value;e.renderer.coordinateSystem===l&&!0!==r.isPMREMTexture&&!0===r.isRenderTargetTexture&&(t=ji(t.x.negate(),t.yz)),t=ji(t.x,t.y.negate(),t.z);let s=this.levelNode;return null===s&&e.context.getTextureLevel&&(s=e.context.getTextureLevel(this)),rg(this._texture,t,s,this._width,this._height,this._maxMip)}}const dg=Mi(lg),cg=new WeakMap;class hg extends Mc{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let r=this.envNode;if(r.isTextureNode||r.isMaterialReferenceNode){const e=r.isTextureNode?r.value:t[r.property];let s=cg.get(e);void 0===s&&(s=dg(e),cg.set(e,s)),r=s}const s=t.envMap?jl("envMapIntensity","float",e.material):jl("environmentIntensity","float",e.scene),i=!0===t.useAnisotropy||t.anisotropy>0?cd:Fl,n=r.context(pg(_n,i)).mul(s),o=r.context(gg(Ul)).mul(Math.PI).mul(s),a=xu(n),u=xu(o);e.context.radiance.addAssign(a),e.context.iblIrradiance.addAssign(u);const l=e.context.lightingModel.clearcoatRadiance;if(l){const e=r.context(pg(Sn,Pl)).mul(s),t=xu(e);l.addAssign(t)}}}const pg=(e,t)=>{let r=null;return{getUV:()=>(null===r&&(r=Nl.negate().reflect(t),r=e.mul(e).mix(r,t).normalize(),r=r.transformDirection(Ku)),r),getTextureLevel:()=>e}},gg=e=>({getUV:()=>e,getTextureLevel:()=>Vi(1)}),mg=new te;class fg extends mh{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(mg),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return null===t&&e.environmentNode&&(t=e.environmentNode),t?new hg(t):null}setupLightingModel(){return new Op}setupSpecular(){const e=va(ji(.04),bn.rgb,vn);Pn.assign(e),In.assign(1)}setupVariants(){const e=this.metalnessNode?Vi(this.metalnessNode):Fd;vn.assign(e);let t=this.roughnessNode?Vi(this.roughnessNode):Bd;t=Zh({roughness:t}),_n.assign(t),this.setupSpecular(),bn.assign(Yi(bn.rgb.mul(e.oneMinus()),bn.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const yg=new re;class xg extends fg{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(yg),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?Vi(this.iorNode):jd;kn.assign(e),Pn.assign(va(oa(fa(kn.sub(1).div(kn.add(1))).mul(Cd),ji(1)).mul(Ed),bn.rgb,vn)),In.assign(va(Ed,1,vn))}setupLightingModel(){return new Op(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?Vi(this.clearcoatNode):Pd,t=this.clearcoatRoughnessNode?Vi(this.clearcoatRoughnessNode):Id;Nn.assign(e),Sn.assign(Zh({roughness:t}))}if(this.useSheen){const e=this.sheenNode?ji(this.sheenNode):Vd,t=this.sheenRoughnessNode?Vi(this.sheenRoughnessNode):Od;Rn.assign(e),An.assign(t)}if(this.useIridescence){const e=this.iridescenceNode?Vi(this.iridescenceNode):kd,t=this.iridescenceIORNode?Vi(this.iridescenceIORNode):zd,r=this.iridescenceThicknessNode?Vi(this.iridescenceThicknessNode):$d;En.assign(e),Cn.assign(t),wn.assign(r)}if(this.useAnisotropy){const e=(this.anisotropyNode?zi(this.anisotropyNode):Gd).toVar();Bn.assign(e.length()),Ii(Bn.equal(0),(()=>{e.assign(zi(1,0))})).Else((()=>{e.divAssign(zi(Bn)),Bn.assign(Bn.saturate())})),Mn.assign(Bn.pow2().mix(_n.pow2(),1)),Fn.assign(ld[0].mul(e.x).add(ld[1].mul(e.y))),Un.assign(ld[1].mul(e.x).sub(ld[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?Vi(this.transmissionNode):Wd,t=this.thicknessNode?Vi(this.thicknessNode):Hd,r=this.attenuationDistanceNode?Vi(this.attenuationDistanceNode):qd,s=this.attenuationColorNode?ji(this.attenuationColorNode):Xd;if(zn.assign(e),$n.assign(t),Wn.assign(r),Hn.assign(s),this.useDispersion){const e=this.dispersionNode?Vi(this.dispersionNode):tc;jn.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?ji(this.clearcoatNormalNode):Ld}setup(e){e.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(e),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class bg extends Op{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1,o=!1){super(e,t,r,s,i,n),this.useSSS=o}direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i){if(!0===this.useSSS){const s=i.material,{thicknessColorNode:n,thicknessDistortionNode:o,thicknessAmbientNode:a,thicknessAttenuationNode:u,thicknessPowerNode:l,thicknessScaleNode:d}=s,c=e.add(Fl.mul(o)).normalize(),h=Vi(Nl.dot(c.negate()).saturate().pow(l).mul(d)),p=ji(h.add(a).mul(n));r.directDiffuse.addAssign(p.mul(u.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i)}}class Tg extends xg{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=Vi(.1),this.thicknessAmbientNode=Vi(0),this.thicknessAttenuationNode=Vi(.1),this.thicknessPowerNode=Vi(2),this.thicknessScaleNode=Vi(10)}get useSSS(){return null!==this.thicknessColorNode}setupLightingModel(){return new bg(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const _g=Fi((({normal:e,lightDirection:t,builder:r})=>{const s=e.dot(t),i=zi(s.mul(.5).add(.5),0);if(r.material.gradientMap){const e=Kl("gradientMap","texture").context({getUV:()=>i});return ji(e.r)}{const e=i.fwidth().mul(.5);return va(ji(.7),ji(1),Aa(Vi(.7).sub(e.x),Vi(.7).add(e.x),i.x))}}));class vg extends Vh{direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i){const n=_g({normal:El,lightDirection:e,builder:i}).mul(t);r.directDiffuse.addAssign(n.mul($h({diffuseColor:bn.rgb})))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:r}){r.indirectDiffuse.addAssign(t.mul($h({diffuseColor:bn}))),r.indirectDiffuse.mulAssign(e)}}const Ng=new se;class Sg extends mh{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Ng),this.setValues(e)}setupLightingModel(){return new vg}}class Rg extends zs{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const e=ji(Nl.z,0,Nl.x.negate()).normalize(),t=Nl.cross(e);return zi(e.dot(Fl),t.dot(Fl)).mul(.495).add(.5)}}const Ag=Bi(Rg),Eg=new ie;class Cg extends mh{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(Eg),this.setValues(e)}setupVariants(e){const t=Ag;let r;r=e.material.matcap?Kl("matcap","texture").context({getUV:()=>t}):ji(va(.2,.8,t.y)),bn.rgb.mulAssign(r.rgb)}}class wg extends zs{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:r}=this;if("vec2"===this.getNodeType(e)){const e=t.cos(),s=t.sin();return en(e,s,s.negate(),e).mul(r)}{const e=t,s=rn(Yi(1,0,0,0),Yi(0,ko(e.x),Go(e.x).negate(),0),Yi(0,Go(e.x),ko(e.x),0),Yi(0,0,0,1)),i=rn(Yi(ko(e.y),0,Go(e.y),0),Yi(0,1,0,0),Yi(Go(e.y).negate(),0,ko(e.y),0),Yi(0,0,0,1)),n=rn(Yi(ko(e.z),Go(e.z).negate(),0,0),Yi(Go(e.z),ko(e.z),0,0),Yi(0,0,1,0),Yi(0,0,0,1));return s.mul(i).mul(n).mul(Yi(r,1)).xyz}}}const Mg=Mi(wg),Bg=new ne;class Fg extends mh{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(Bg),this.setValues(e)}setupPositionView(e){const{object:t,camera:r}=e,s=this.sizeAttenuation,{positionNode:i,rotationNode:n,scaleNode:o}=this,a=pl.mul(ji(i||0));let u=zi(al[0].xyz.length(),al[1].xyz.length());if(null!==o&&(u=u.mul(Vi(o))),!1===s)if(r.isPerspectiveCamera)u=u.mul(a.z.negate());else{const e=Vi(2).div(qu.element(1).element(1));u=u.mul(e.mul(2))}let l=yl.xy;if(t.center&&!0===t.center.isVector2){const e=((e,t,r)=>Ei(new iu(e,t,r)))("center","vec2",t);l=l.sub(e.sub(.5))}l=l.mul(u);const d=Vi(n||Dd),c=Mg(l,d);return Yi(a.xy.add(c),a.zw)}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}const Ug=new oe;class Pg extends Fg{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.sizeNode=null,this.isPointsNodeMaterial=!0,this.setDefaultValues(Ug),this.setValues(e)}setupPositionView(){const{positionNode:e}=this;return pl.mul(ji(e||xl)).xyz}setupVertex(e){const t=super.setupVertex(e);if(!0!==e.material.isNodeMaterial)return t;const{rotationNode:r,scaleNode:s,sizeNode:i}=this,n=yl.xy.toVar(),o=kc.z.div(kc.w);if(r&&r.isNode){const e=Vi(r);n.assign(Mg(n,e))}let a=null!==i?zi(i):ec;return!0===this.sizeAttenuation&&(a=a.mul(a.div(vl.z.negate()))),s&&s.isNode&&(a=a.mul(zi(s))),n.mulAssign(a.mul(2)),n.assign(n.div(kc.z)),n.y.assign(n.y.mul(o)),n.assign(n.mul(t.w)),t.addAssign(Yi(n,0,0)),t}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}class Ig extends Vh{constructor(){super(),this.shadowNode=Vi(1).toVar("shadowMask")}direct({shadowMask:e}){this.shadowNode.mulAssign(e)}finish(e){bn.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(bn.rgb)}}const Lg=new ae;class Dg extends mh{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Lg),this.setValues(e)}setupLightingModel(){return new Ig}}const Vg=Fi((({texture:e,uv:t})=>{const r=1e-4,s=ji().toVar();return Ii(t.x.lessThan(r),(()=>{s.assign(ji(1,0,0))})).ElseIf(t.y.lessThan(r),(()=>{s.assign(ji(0,1,0))})).ElseIf(t.z.lessThan(r),(()=>{s.assign(ji(0,0,1))})).ElseIf(t.x.greaterThan(.9999),(()=>{s.assign(ji(-1,0,0))})).ElseIf(t.y.greaterThan(.9999),(()=>{s.assign(ji(0,-1,0))})).ElseIf(t.z.greaterThan(.9999),(()=>{s.assign(ji(0,0,-1))})).Else((()=>{const r=.01,i=e.sample(t.add(ji(-.01,0,0))).r.sub(e.sample(t.add(ji(r,0,0))).r),n=e.sample(t.add(ji(0,-.01,0))).r.sub(e.sample(t.add(ji(0,r,0))).r),o=e.sample(t.add(ji(0,0,-.01))).r.sub(e.sample(t.add(ji(0,0,r))).r);s.assign(ji(i,n,o))})),s.normalize()}));class Og extends Lu{static get type(){return"Texture3DNode"}constructor(e,t=null,r=null){super(e,t,r),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return ji(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return!e.isFlipY()||!0!==r.isRenderTargetTexture&&!0!==r.isFramebufferTexture||(t=this.sampler?t.flipY():t.setY(Oi(Uu(this,this.levelNode).y).sub(t.y).sub(1))),t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return Vg({texture:this,uv:e})}}const Gg=Mi(Og);class kg extends mh{static get type(){return"VolumeNodeMaterial"}constructor(t){super(),this.isVolumeNodeMaterial=!0,this.base=new e(16777215),this.map=null,this.steps=100,this.testNode=null,this.setValues(t)}setup(e){const t=Gg(this.map,null,0),r=Fi((({orig:e,dir:t})=>{const r=ji(-.5),s=ji(.5),i=t.reciprocal(),n=r.sub(e).mul(i),o=s.sub(e).mul(i),a=oa(n,o),u=aa(n,o),l=aa(a.x,aa(a.y,a.z)),d=oa(u.x,oa(u.y,u.z));return zi(l,d)}));this.fragmentNode=Fi((()=>{const e=ja(ji(hl.mul(Yi(Zu,1)))),s=ja(yl.sub(e)).normalize(),i=zi(r({orig:e,dir:s})).toVar();i.x.greaterThan(i.y).discard(),i.assign(zi(aa(i.x,0),i.y));const n=ji(e.add(i.x.mul(s))).toVar(),o=ji(s.abs().reciprocal()).toVar(),a=Vi(oa(o.x,oa(o.y,o.z))).toVar("delta");a.divAssign(Kl("steps","float"));const u=Yi(Kl("base","color"),0).toVar();return Nc({type:"float",start:i.x,end:i.y,update:"+= delta"},(()=>{const e=yn("float","d").assign(t.sample(n.add(.5)).r);null!==this.testNode?this.testNode({map:t,mapValue:e,probe:n,finalColor:u}).append():(u.a.assign(1),Sc()),n.addAssign(s.mul(a))})),u.a.equal(0).discard(),Yi(u)}))(),super.setup(e)}}class zg{constructor(e,t){this.nodes=e,this.info=t,this._context=self,this._animationLoop=null,this._requestId=null}start(){const e=(t,r)=>{this._requestId=this._context.requestAnimationFrame(e),!0===this.info.autoReset&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,null!==this._animationLoop&&this._animationLoop(t,r)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}getAnimationLoop(){return this._animationLoop}setAnimationLoop(e){this._animationLoop=e}getContext(){return this._context}setContext(e){this._context=e}dispose(){this.stop()}}class $g{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return;return t.get(e[e.length-1])}set(e,t){let r=this.weakMap;for(let t=0;t<e.length-1;t++){const s=e[t];!1===r.has(s)&&r.set(s,new WeakMap),r=r.get(s)}return r.set(e[e.length-1],t),this}delete(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return!1;return t.delete(e[e.length-1])}}let Wg=0;class Hg{constructor(e,t,r,s,i,n,o,a,u,l){this.id=Wg++,this._nodes=e,this._geometries=t,this.renderer=r,this.object=s,this.material=i,this.scene=n,this.camera=o,this.lightsNode=a,this.context=u,this.geometry=s.geometry,this.version=i.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.group=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=l,this.clippingContextCacheKey=null!==l?l.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return null!==this.clippingContext&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return!0===this.material.hardwareClipping?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().observer)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getBindingGroup(e){for(const t of this.getBindings())if(t.name===e)return t}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null}getAttributes(){if(null!==this.attributes)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,r=[],s=new Set;for(const i of e){const e=i.node&&i.node.attribute?i.node.attribute:t.getAttribute(i.name);if(void 0===e)continue;r.push(e);const n=e.isInterleavedBufferAttribute?e.data:e;s.add(n)}return this.attributes=r,this.vertexBuffers=Array.from(s.values()),r}getVertexBuffers(){return null===this.vertexBuffers&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:r,group:s,drawRange:i}=this,n=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),o=this.getIndex(),a=null!==o,u=r.isInstancedBufferGeometry?r.instanceCount:e.count>1?e.count:1;if(0===u)return null;if(n.instanceCount=u,!0===e.isBatchedMesh)return n;let l=1;!0!==t.wireframe||e.isPoints||e.isLineSegments||e.isLine||e.isLineLoop||(l=2);let d=i.start*l,c=(i.start+i.count)*l;null!==s&&(d=Math.max(d,s.start*l),c=Math.min(c,(s.start+s.count)*l));const h=r.attributes.position;let p=1/0;a?p=o.count:null!=h&&(p=h.count),d=Math.max(d,0),c=Math.min(c,p);const g=c-d;return g<0||g===1/0?null:(n.vertexCount=g,n.firstVertex=d,n)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const r of Object.keys(e.attributes).sort()){const s=e.attributes[r];t+=r+",",s.data&&(t+=s.data.stride+","),s.offset&&(t+=s.offset+","),s.itemSize&&(t+=s.itemSize+","),s.normalized&&(t+="n,")}for(const r of Object.keys(e.morphAttributes).sort()){const s=e.morphAttributes[r];t+="morph-"+r+",";for(let e=0,r=s.length;e<r;e++){t+=s[e].id+","}}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let r=t.customProgramCacheKey();for(const e of function(e){const t=Object.keys(e);let r=Object.getPrototypeOf(e);for(;r;){const e=Object.getOwnPropertyDescriptors(r);for(const r in e)if(void 0!==e[r]){const s=e[r];s&&"function"==typeof s.get&&t.push(r)}r=Object.getPrototypeOf(r)}return t}(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(e))continue;const s=t[e];let i;if(null!==s){const e=typeof s;"number"===e?i=0!==s?"1":"0":"object"===e?(i="{",s.isTexture&&(i+=s.mapping),i+="}"):i=String(s)}else i=String(s);r+=i+","}return r+=this.clippingContextCacheKey+",",e.geometry&&(r+=this.getGeometryCacheKey()),e.skeleton&&(r+=e.skeleton.bones.length+","),e.isBatchedMesh&&(r+=e._matricesTexture.uuid+",",null!==e._colorsTexture&&(r+=e._colorsTexture.uuid+",")),e.count>1&&(r+=e.uuid+","),r+=e.receiveShadow+",",gs(r)}get needsGeometryUpdate(){return this.geometry.id!==this.object.geometry.id}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=0;return!0!==this.material.isShadowPassMaterial&&(e=this._nodes.getCacheKey(this.scene,this.lightsNode)),this.camera.isArrayCamera&&(e=fs(e,this.camera.cameras.length)),this.object.receiveShadow&&(e=fs(e,1)),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const jg=[];class qg{constructor(e,t,r,s,i,n){this.renderer=e,this.nodes=t,this.geometries=r,this.pipelines=s,this.bindings=i,this.info=n,this.chainMaps={}}get(e,t,r,s,i,n,o,a){const u=this.getChainMap(a);jg[0]=e,jg[1]=t,jg[2]=n,jg[3]=i;let l=u.get(jg);return void 0===l?(l=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,r,s,i,n,o,a),u.set(jg,l)):(l.updateClipping(o),l.needsGeometryUpdate&&l.setGeometry(e.geometry),(l.version!==t.version||l.needsUpdate)&&(l.initialCacheKey!==l.getCacheKey()?(l.dispose(),l=this.get(e,t,r,s,i,n,o,a)):l.version=t.version)),jg.length=0,l}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new $g)}dispose(){this.chainMaps={}}createRenderObject(e,t,r,s,i,n,o,a,u,l,d){const c=this.getChainMap(d),h=new Hg(e,t,r,s,i,n,o,a,u,l);return h.onDispose=()=>{this.pipelines.delete(h),this.bindings.delete(h),this.nodes.delete(h),c.delete(h.getChainArray())},h}}class Xg{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}delete(e){let t=null;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const Kg=1,Yg=2,Qg=3,Zg=4,Jg=16;class em extends Xg{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return void 0!==t&&this.backend.destroyAttribute(e),t}update(e,t){const r=this.get(e);if(void 0===r.version)t===Kg?this.backend.createAttribute(e):t===Yg?this.backend.createIndexAttribute(e):t===Qg?this.backend.createStorageAttribute(e):t===Zg&&this.backend.createIndirectStorageAttribute(e),r.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(r.version<t.version||t.usage===f)&&(this.backend.updateAttribute(e),r.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function tm(e){return null!==e.index?e.index.version:e.attributes.position.version}function rm(e){const t=[],r=e.index,s=e.attributes.position;if(null!==r){const e=r.array;for(let r=0,s=e.length;r<s;r+=3){const s=e[r+0],i=e[r+1],n=e[r+2];t.push(s,i,i,n,n,s)}}else{for(let e=0,r=s.array.length/3-1;e<r;e+=3){const r=e+0,s=e+1,i=e+2;t.push(r,s,s,i,i,r)}}const i=new(ue(t)?le:de)(t,1);return i.version=tm(e),i}class sm extends Xg{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&!0===this.get(t).initialized}updateForRender(e){!1===this.has(e)&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry;this.get(t).initialized=!0,this.info.memory.geometries++;const r=()=>{this.info.memory.geometries--;const s=t.index,i=e.getAttributes();null!==s&&this.attributes.delete(s);for(const e of i)this.attributes.delete(e);const n=this.wireframes.get(t);void 0!==n&&this.attributes.delete(n),t.removeEventListener("dispose",r)};t.addEventListener("dispose",r)}updateAttributes(e){const t=e.getAttributes();for(const e of t)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,Qg):this.updateAttribute(e,Kg);const r=this.getIndex(e);null!==r&&this.updateAttribute(r,Yg);const s=e.geometry.indirect;null!==s&&this.updateAttribute(s,Zg)}updateAttribute(e,t){const r=this.info.render.calls;e.isInterleavedBufferAttribute?void 0===this.attributeCall.get(e)?(this.attributes.update(e,t),this.attributeCall.set(e,r)):this.attributeCall.get(e.data)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e.data,r),this.attributeCall.set(e,r)):this.attributeCall.get(e)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e,r))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:r}=e;let s=t.index;if(!0===r.wireframe){const e=this.wireframes;let r=e.get(t);void 0===r?(r=rm(t),e.set(t,r)):r.version!==tm(t)&&(this.attributes.delete(r),r=rm(t),e.set(t,r)),s=r}return s}}class im{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0},this.compute={calls:0,frameCalls:0,timestamp:0},this.memory={geometries:0,textures:0}}update(e,t,r){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=r*(t/3):e.isPoints?this.render.points+=r*t:e.isLineSegments?this.render.lines+=r*(t/2):e.isLine?this.render.lines+=r*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}reset(){this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class nm{constructor(e){this.cacheKey=e,this.usedTimes=0}}class om extends nm{constructor(e,t,r){super(e),this.vertexProgram=t,this.fragmentProgram=r}}class am extends nm{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let um=0;class lm{constructor(e,t,r,s=null,i=null){this.id=um++,this.code=e,this.stage=t,this.name=r,this.transforms=s,this.attributes=i,this.usedTimes=0}}class dm extends Xg{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:r}=this,s=this.get(e);if(this._needsComputeUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.computeProgram.usedTimes--);const n=this.nodes.getForCompute(e);let o=this.programs.compute.get(n.computeShader);void 0===o&&(i&&0===i.computeProgram.usedTimes&&this._releaseProgram(i.computeProgram),o=new lm(n.computeShader,"compute",e.name,n.transforms,n.nodeAttributes),this.programs.compute.set(n.computeShader,o),r.createProgram(o));const a=this._getComputeCacheKey(e,o);let u=this.caches.get(a);void 0===u&&(i&&0===i.usedTimes&&this._releasePipeline(i),u=this._getComputePipeline(e,o,a,t)),u.usedTimes++,o.usedTimes++,s.version=e.version,s.pipeline=u}return s.pipeline}getForRender(e,t=null){const{backend:r}=this,s=this.get(e);if(this._needsRenderUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.vertexProgram.usedTimes--,i.fragmentProgram.usedTimes--);const n=e.getNodeBuilderState(),o=e.material?e.material.name:"";let a=this.programs.vertex.get(n.vertexShader);void 0===a&&(i&&0===i.vertexProgram.usedTimes&&this._releaseProgram(i.vertexProgram),a=new lm(n.vertexShader,"vertex",o),this.programs.vertex.set(n.vertexShader,a),r.createProgram(a));let u=this.programs.fragment.get(n.fragmentShader);void 0===u&&(i&&0===i.fragmentProgram.usedTimes&&this._releaseProgram(i.fragmentProgram),u=new lm(n.fragmentShader,"fragment",o),this.programs.fragment.set(n.fragmentShader,u),r.createProgram(u));const l=this._getRenderCacheKey(e,a,u);let d=this.caches.get(l);void 0===d?(i&&0===i.usedTimes&&this._releasePipeline(i),d=this._getRenderPipeline(e,a,u,l,t)):e.pipeline=d,d.usedTimes++,a.usedTimes++,u.usedTimes++,s.pipeline=d}return s.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,0===t.usedTimes&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,0===t.computeProgram.usedTimes&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,0===t.vertexProgram.usedTimes&&this._releaseProgram(t.vertexProgram),0===t.fragmentProgram.usedTimes&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,r,s){r=r||this._getComputeCacheKey(e,t);let i=this.caches.get(r);return void 0===i&&(i=new am(r,t),this.caches.set(r,i),this.backend.createComputePipeline(i,s)),i}_getRenderPipeline(e,t,r,s,i){s=s||this._getRenderCacheKey(e,t,r);let n=this.caches.get(s);return void 0===n&&(n=new om(s,t,r),this.caches.set(s,n),e.pipeline=n,this.backend.createRenderPipeline(e,i)),n}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,r){return t.id+","+r.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,r=e.stage;this.programs[r].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return void 0===t.pipeline||t.version!==e.version}_needsRenderUpdate(e){return void 0===this.get(e).pipeline||this.backend.needsRenderUpdate(e)}}class cm extends Xg{constructor(e,t,r,s,i,n){super(),this.backend=e,this.textures=r,this.pipelines=i,this.attributes=s,this.nodes=t,this.info=n,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?Zg:Qg;this.attributes.update(e,r)}}_update(e,t){const{backend:r}=this;let s=!1,i=!0,n=0,o=0;for(const t of e.bindings){if(t.isNodeUniformsGroup){if(!1===this.nodes.updateGroup(t))continue}if(t.isUniformBuffer){t.update()&&r.updateBinding(t)}else if(t.isSampler)t.update();else if(t.isSampledTexture){const e=this.textures.get(t.texture);t.needsBindingsUpdate(e.generation)&&(s=!0);const a=t.update(),u=t.texture;a&&this.textures.updateTexture(u);const l=r.get(u);if(void 0!==l.externalTexture||e.isDefaultTexture?i=!1:(n=10*n+u.id,o+=u.version),!0===r.isWebGPUBackend&&void 0===l.texture&&void 0===l.externalTexture&&(console.error("Bindings._update: binding should be available:",t,a,u,t.textureNode.value,s),this.textures.updateTexture(u),s=!0),!0===u.isStorageTexture){const e=this.get(u);!0===t.store?e.needsMipmap=!0:this.textures.needsMipmaps(u)&&!0===e.needsMipmap&&(this.backend.generateMipmaps(u),e.needsMipmap=!1)}}}!0===s&&this.backend.updateBindings(e,t,i?n:0,o)}}function hm(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function pm(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function gm(e){return(e.transmission>0||e.transmissionNode)&&e.side===ce&&!1===e.forceSinglePass}class mm{constructor(e,t,r){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,r),this.lightsArray=[],this.scene=t,this.camera=r,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,r,s,i,n,o){let a=this.renderItems[this.renderItemsIndex];return void 0===a?(a={id:e.id,object:e,geometry:t,material:r,groupOrder:s,renderOrder:e.renderOrder,z:i,group:n,clippingContext:o},this.renderItems[this.renderItemsIndex]=a):(a.id=e.id,a.object=e,a.geometry=t,a.material=r,a.groupOrder=s,a.renderOrder=e.renderOrder,a.z=i,a.group=n,a.clippingContext=o),this.renderItemsIndex++,a}push(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===e.occlusionTest&&this.occlusionQueryCount++,!0===r.transparent||r.transmission>0?(gm(r)&&this.transparentDoublePass.push(a),this.transparent.push(a)):this.opaque.push(a)}unshift(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===r.transparent||r.transmission>0?(gm(r)&&this.transparentDoublePass.unshift(a),this.transparent.unshift(a)):this.opaque.unshift(a)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||hm),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||pm),this.transparent.length>1&&this.transparent.sort(t||pm)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const t=this.renderItems[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.groupOrder=null,t.renderOrder=null,t.z=null,t.group=null,t.clippingContext=null}}}const fm=[];class ym{constructor(e){this.lighting=e,this.lists=new $g}get(e,t){const r=this.lists;fm[0]=e,fm[1]=t;let s=r.get(fm);return void 0===s&&(s=new mm(this.lighting,e,t),r.set(fm,s)),fm.length=0,s}dispose(){this.lists=new $g}}let xm=0;class bm{constructor(){this.id=xm++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new s,this.scissor=!1,this.scissorValue=new s,this.renderTarget=null,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.activeMipmapLevel=0,this.sampleCount=1,this.width=0,this.height=0,this.occlusionQueryCount=0,this.clippingContext=null,this.isRenderContext=!0}getCacheKey(){return Tm(this)}}function Tm(e){const{textures:t,activeCubeFace:r}=e,s=[r];for(const e of t)s.push(e.id);return ms(s)}const _m=[],vm=new z,Nm=new he;class Sm{constructor(){this.chainMaps={}}get(e,t,r=null){let s;if(_m[0]=e,_m[1]=t,null===r)s="default";else{const e=r.texture.format;s=`${r.textures.length}:${e}:${r.samples}:${r.depthBuffer}:${r.stencilBuffer}`}const i=this._getChainMap(s);let n=i.get(_m);return void 0===n&&(n=new bm,i.set(_m,n)),_m.length=0,null!==r&&(n.sampleCount=0===r.samples?1:r.samples),n}getForClear(e=null){return this.get(vm,Nm,e)}_getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new $g)}dispose(){this.chainMaps={}}}const Rm=new r;class Am extends Xg{constructor(e,t,r){super(),this.renderer=e,this.backend=t,this.info=r}updateRenderTarget(e,t=0){const r=this.get(e),s=0===e.samples?1:e.samples,i=r.depthTextureMips||(r.depthTextureMips={}),n=e.textures,o=this.getSize(n[0]),a=o.width>>t,u=o.height>>t;let l=e.depthTexture||i[t];const d=!0===e.depthBuffer||!0===e.stencilBuffer;let c=!1;void 0===l&&d&&(l=new F,l.format=e.stencilBuffer?pe:ge,l.type=e.stencilBuffer?me:b,l.image.width=a,l.image.height=u,i[t]=l),r.width===o.width&&o.height===r.height||(c=!0,l&&(l.needsUpdate=!0,l.image.width=a,l.image.height=u)),r.width=o.width,r.height=o.height,r.textures=n,r.depthTexture=l||null,r.depth=e.depthBuffer,r.stencil=e.stencilBuffer,r.renderTarget=e,r.sampleCount!==s&&(c=!0,l&&(l.needsUpdate=!0),r.sampleCount=s);const h={sampleCount:s};if(!0!==e.isXRRenderTarget){for(let e=0;e<n.length;e++){const t=n[e];c&&(t.needsUpdate=!0),this.updateTexture(t,h)}l&&this.updateTexture(l,h)}if(!0!==r.initialized){r.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<n.length;e++)this._destroyTexture(n[e]);l&&this._destroyTexture(l),this.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const r=this.get(e);if(!0===r.initialized&&r.version===e.version)return;const s=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,i=this.backend;if(s&&!0===r.initialized&&(i.destroySampler(e),i.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();e.type=t?t.texture.type:fe}const{width:n,height:o,depth:a}=this.getSize(e);if(t.width=n,t.height=o,t.depth=a,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,n,o):1,s||!0===e.isStorageTexture)i.createSampler(e),i.createTexture(e,t),r.generation=e.version;else{if(!0!==r.initialized&&i.createSampler(e),e.version>0){const s=e.image;if(void 0===s)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(!1===s.complete)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const r=[];for(const t of e.images)r.push(t);t.images=r}else t.image=s;void 0!==r.isDefaultTexture&&!0!==r.isDefaultTexture||(i.createTexture(e,t),r.isDefaultTexture=!1,r.generation=e.version),!0===e.source.dataReady&&i.updateTexture(e,t),t.needsMipmaps&&0===e.mipmaps.length&&i.generateMipmaps(e)}}else i.createDefaultTexture(e),r.isDefaultTexture=!0,r.generation=e.version}if(!0!==r.initialized){r.initialized=!0,r.generation=e.version,this.info.memory.textures++;const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e),this.info.memory.textures--};e.addEventListener("dispose",t)}r.version=e.version}getSize(e,t=Rm){let r=e.images?e.images[0]:e.image;return r?(void 0!==r.image&&(r=r.image),t.width=r.width||1,t.height=r.height||1,t.depth=e.isCubeTexture?6:r.depth||1):t.width=t.height=t.depth=1,t}getMipLevels(e,t,r){let s;return s=e.isCompressedTexture?e.mipmaps?e.mipmaps.length:1:Math.floor(Math.log2(Math.max(t,r)))+1,s}needsMipmaps(e){return this.isEnvironmentTexture(e)||!0===e.isCompressedTexture||e.generateMipmaps}isEnvironmentTexture(e){const t=e.mapping;return t===j||t===q||t===v||t===N}_destroyTexture(e){this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e)}}class Em extends e{constructor(e,t,r,s=1){super(e,t,r),this.a=s}set(e,t,r,s=1){return this.a=s,super.set(e,t,r)}copy(e){return void 0!==e.a&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class Cm extends fn{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}class wm extends Os{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}getMemberType(e,t){return this.outputNode?this.outputNode.getMemberType(e,t):"void"}add(e){return this.nodes.push(e),this}If(e,t){const r=new Ai(t);return this._currentCond=Ia(e,r),this.add(this._currentCond)}ElseIf(e,t){const r=new Ai(t),s=Ia(e,r);return this._currentCond.elseNode=s,this._currentCond=s,this}Else(e){return this._currentCond.elseNode=new Ai(e),this}build(e,...t){const r=Pi();Ui(this);for(const t of this.nodes)t.build(e,"void");return Ui(r),this.outputNode?this.outputNode.build(e,...t):super.build(e,...t)}else(...e){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...e)}elseif(...e){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...e)}}const Mm=Mi(wm);class Bm extends Os{static get type(){return"StructTypeNode"}constructor(e,t=null){var r;super("struct"),this.membersLayout=(r=e,Object.entries(r).map((([e,t])=>"string"==typeof t?{name:e,type:t,atomic:!1}:{name:e,type:t.type,atomic:t.atomic||!1}))),this.name=t,this.isStructLayoutNode=!0}getLength(){let e=0;for(const t of this.membersLayout)e+=Ns(t.type);return e}getMemberType(e,t){const r=this.membersLayout.find((e=>e.name===t));return r?r.type:"void"}getNodeType(e){return e.getStructTypeFromNode(this,this.membersLayout,this.name).name}generate(e){return this.getNodeType(e)}}class Fm extends Os{static get type(){return"StructNode"}constructor(e,t){super("vec3"),this.structLayoutNode=e,this.values=t,this.isStructNode=!0}getNodeType(e){return this.structLayoutNode.getNodeType(e)}getMemberType(e,t){return this.structLayoutNode.getMemberType(e,t)}generate(e){const t=e.getVarFromNode(this),r=t.type,s=e.getPropertyName(t);return e.addLineFlowCode(`${s} = ${e.generateStruct(r,this.structLayoutNode.membersLayout,this.values)}`,this),t.name}}class Um extends Os{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}getNodeType(e){const t=e.getNodeProperties(this);if(void 0===t.membersLayout){const r=this.members,s=[];for(let t=0;t<r.length;t++){const i="m"+t,n=r[t].getNodeType(e);s.push({name:i,type:n,index:t})}t.membersLayout=s,t.structType=e.getOutputStructTypeFromNode(this,t.membersLayout)}return t.structType.name}generate(e){const t=e.getOutputStructName(),r=this.members,s=""!==t?t+".":"";for(let t=0;t<r.length;t++){const i=r[t].build(e);e.addLineFlowCode(`${s}m${t} = ${i}`,this)}return t}}const Pm=Mi(Um);function Im(e,t){for(let r=0;r<e.length;r++)if(e[r].name===t)return r;return-1}class Lm extends Um{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return void 0!==this.outputNodes[e]}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return Dm(t)}setup(e){const t=this.outputNodes,r=[],s=e.renderer.getRenderTarget().textures;for(const e in t){r[Im(s,e)]=Yi(t[e])}return this.members=r,super.setup(e)}}const Dm=Mi(Lm),Vm=Fi((([e])=>{const t=e.toUint().mul(747796405).add(2891336453),r=t.shiftRight(t.shiftRight(28).add(4)).bitXor(t).mul(277803737);return r.shiftRight(22).bitXor(r).toFloat().mul(1/2**32)})),Om=(e,t)=>ma(eo(4,e.mul(Jn(1,e))),t),Gm=Fi((([e])=>e.fract().sub(.5).abs())).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),km=Fi((([e])=>ji(Gm(e.z.add(Gm(e.y.mul(1)))),Gm(e.z.add(Gm(e.x.mul(1)))),Gm(e.y.add(Gm(e.x.mul(1))))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),zm=Fi((([e,t,r])=>{const s=ji(e).toVar(),i=Vi(1.4).toVar(),n=Vi(0).toVar(),o=ji(s).toVar();return Nc({start:Vi(0),end:Vi(3),type:"float",condition:"<="},(()=>{const e=ji(km(o.mul(2))).toVar();s.addAssign(e.add(r.mul(Vi(.1).mul(t)))),o.mulAssign(1.8),i.mulAssign(1.5),s.mulAssign(1.2);const a=Vi(Gm(s.z.add(Gm(s.x.add(Gm(s.y)))))).toVar();n.addAssign(a.div(i)),o.addAssign(.14)})),n})).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"position",type:"vec3"},{name:"speed",type:"float"},{name:"time",type:"float"}]});class $m extends Os{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let r=this._candidateFnCall;if(null===r){let s=null,i=-1;for(const r of this.functionNodes){const n=r.shaderNode.layout;if(null===n)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const o=n.inputs;if(t.length===o.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r],i=o[r];s.getNodeType(e)===i.type?n++:n=0}n>i&&(s=r,i=n)}}this._candidateFnCall=r=s(...t)}return r}}const Wm=Mi($m),Hm=e=>(...t)=>Wm(e,...t),jm=mn(0).setGroup(hn).onRenderUpdate((e=>e.time)),qm=mn(0).setGroup(hn).onRenderUpdate((e=>e.deltaTime)),Xm=mn(0,"uint").setGroup(hn).onRenderUpdate((e=>e.frameId)),Km=Fi((([e,t,r=zi(.5)])=>Mg(e.sub(r),t).add(r))),Ym=Fi((([e,t,r=zi(.5)])=>{const s=e.sub(r),i=s.dot(s),n=i.mul(i).mul(t);return e.add(s.mul(n))})),Qm=Fi((({position:e=null,horizontal:t=!0,vertical:r=!1})=>{let s;null!==e?(s=al.toVar(),s[3][0]=e.x,s[3][1]=e.y,s[3][2]=e.z):s=al;const i=Ku.mul(s);return Si(t)&&(i[0][0]=al[0].length(),i[0][1]=0,i[0][2]=0),Si(r)&&(i[1][0]=0,i[1][1]=al[1].length(),i[1][2]=0),i[2][0]=0,i[2][1]=0,i[2][2]=1,qu.mul(i).mul(xl)})),Zm=Fi((([e=null])=>{const t=uh();return uh(eh(e)).sub(t).lessThan(0).select(Vc,e)}));class Jm extends Os{static get type(){return"SpriteSheetUVNode"}constructor(e,t=Bu(),r=Vi(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=r}setup(){const{frameNode:e,uvNode:t,countNode:r}=this,{width:s,height:i}=r,n=e.mod(s.mul(i)).floor(),o=n.mod(s),a=i.sub(n.add(1).div(s).ceil()),u=r.reciprocal(),l=zi(o,a);return t.add(l).mul(u)}}const ef=Mi(Jm);class tf extends Os{static get type(){return"TriplanarTexturesNode"}constructor(e,t=null,r=null,s=Vi(1),i=xl,n=Cl){super("vec4"),this.textureXNode=e,this.textureYNode=t,this.textureZNode=r,this.scaleNode=s,this.positionNode=i,this.normalNode=n}setup(){const{textureXNode:e,textureYNode:t,textureZNode:r,scaleNode:s,positionNode:i,normalNode:n}=this;let o=n.abs().normalize();o=o.div(o.dot(ji(1)));const a=i.yz.mul(s),u=i.zx.mul(s),l=i.xy.mul(s),d=e.value,c=null!==t?t.value:d,h=null!==r?r.value:d,p=Du(d,a).mul(o.x),g=Du(c,u).mul(o.y),m=Du(h,l).mul(o.z);return Zn(p,g,m)}}const rf=Mi(tf),sf=new xe,nf=new r,of=new r,af=new r,uf=new o,lf=new r(0,0,-1),df=new s,cf=new r,hf=new r,pf=new s,gf=new t,mf=new ye,ff=Vc.flipX();mf.depthTexture=new F(1,1);let yf=!1;class xf extends Lu{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||mf.texture,ff),this._reflectorBaseNode=e.reflector||new bf(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(null===this._depthNode){if(!0!==this._reflectorBaseNode.depth)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=Ei(new xf({defaultTexture:mf.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e._reflectorBaseNode=this._reflectorBaseNode,e}}class bf extends Os{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:r=new be,resolution:s=1,generateMipmaps:i=!1,bounces:n=!0,depth:o=!1}=t;this.textureNode=e,this.target=r,this.resolution=s,this.generateMipmaps=i,this.bounces=n,this.depth=o,this.updateBeforeType=n?Bs.RENDER:Bs.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new WeakMap}_updateResolution(e,t){const r=this.resolution;t.getDrawingBufferSize(gf),e.setSize(Math.round(gf.width*r),Math.round(gf.height*r))}setup(e){return this._updateResolution(mf,e.renderer),super.setup(e)}getVirtualCamera(e){let t=this.virtualCameras.get(e);return void 0===t&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return void 0===t&&(t=new ye(0,0,{type:Te}),!0===this.generateMipmaps&&(t.texture.minFilter=_e,t.texture.generateMipmaps=!0),!0===this.depth&&(t.depthTexture=new F),this.renderTargets.set(e,t)),t}updateBefore(e){if(!1===this.bounces&&yf)return!1;yf=!0;const{scene:t,camera:r,renderer:s,material:i}=e,{target:n}=this,o=this.getVirtualCamera(r),a=this.getRenderTarget(o);if(s.getDrawingBufferSize(gf),this._updateResolution(a,s),of.setFromMatrixPosition(n.matrixWorld),af.setFromMatrixPosition(r.matrixWorld),uf.extractRotation(n.matrixWorld),nf.set(0,0,1),nf.applyMatrix4(uf),cf.subVectors(of,af),cf.dot(nf)>0)return;cf.reflect(nf).negate(),cf.add(of),uf.extractRotation(r.matrixWorld),lf.set(0,0,-1),lf.applyMatrix4(uf),lf.add(af),hf.subVectors(of,lf),hf.reflect(nf).negate(),hf.add(of),o.coordinateSystem=r.coordinateSystem,o.position.copy(cf),o.up.set(0,1,0),o.up.applyMatrix4(uf),o.up.reflect(nf),o.lookAt(hf),o.near=r.near,o.far=r.far,o.updateMatrixWorld(),o.projectionMatrix.copy(r.projectionMatrix),sf.setFromNormalAndCoplanarPoint(nf,of),sf.applyMatrix4(o.matrixWorldInverse),df.set(sf.normal.x,sf.normal.y,sf.normal.z,sf.constant);const u=o.projectionMatrix;pf.x=(Math.sign(df.x)+u.elements[8])/u.elements[0],pf.y=(Math.sign(df.y)+u.elements[9])/u.elements[5],pf.z=-1,pf.w=(1+u.elements[10])/u.elements[14],df.multiplyScalar(1/df.dot(pf));u.elements[2]=df.x,u.elements[6]=df.y,u.elements[10]=s.coordinateSystem===d?df.z-0:df.z+1-0,u.elements[14]=df.w,this.textureNode.value=a.texture,!0===this.depth&&(this.textureNode.getDepthNode().value=a.depthTexture),i.visible=!1;const l=s.getRenderTarget(),c=s.getMRT(),h=s.autoClear;s.setMRT(null),s.setRenderTarget(a),s.autoClear=!0,s.render(t,o),s.setMRT(c),s.setRenderTarget(l),s.autoClear=h,i.visible=!0,yf=!1}}const Tf=new ve(-1,1,1,-1,0,1);class _f extends Ne{constructor(e=!1){super();const t=!1===e?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new Se([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Se(t,2))}}const vf=new _f;class Nf extends k{constructor(e=null){super(vf,e),this.camera=Tf,this.isQuadMesh=!0}async renderAsync(e){return e.renderAsync(this,Tf)}render(e){e.render(this,Tf)}}const Sf=new t;class Rf extends Lu{static get type(){return"RTTNode"}constructor(e,t=null,r=null,s={type:Te}){const i=new ye(t,r,s);super(i.texture,Bu()),this.node=e,this.width=t,this.height=r,this.pixelRatio=1,this.renderTarget=i,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new Nf(new mh),this.updateBeforeType=Bs.RENDER}get autoSize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const r=e*this.pixelRatio,s=t*this.pixelRatio;this.renderTarget.setSize(r,s),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoSize){this.pixelRatio=e.getPixelRatio();const t=e.getSize(Sf);this.setSize(t.width,t.height)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new Lu(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const Af=(e,...t)=>Ei(new Rf(Ei(e),...t)),Ef=Fi((([e,t,r],s)=>{let i;s.renderer.coordinateSystem===d?(e=zi(e.x,e.y.oneMinus()).mul(2).sub(1),i=Yi(ji(e,t),1)):i=Yi(ji(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const n=Yi(r.mul(i));return n.xyz.div(n.w)})),Cf=Fi((([e,t])=>{const r=t.mul(Yi(e,1)),s=r.xy.div(r.w).mul(.5).add(.5).toVar();return zi(s.x,s.y.oneMinus())})),wf=Fi((([e,t,r])=>{const s=Uu(Vu(t)),i=$i(e.mul(s)).toVar(),n=Vu(t,i).toVar(),o=Vu(t,i.sub($i(2,0))).toVar(),a=Vu(t,i.sub($i(1,0))).toVar(),u=Vu(t,i.add($i(1,0))).toVar(),l=Vu(t,i.add($i(2,0))).toVar(),d=Vu(t,i.add($i(0,2))).toVar(),c=Vu(t,i.add($i(0,1))).toVar(),h=Vu(t,i.sub($i(0,1))).toVar(),p=Vu(t,i.sub($i(0,2))).toVar(),g=jo(Jn(Vi(2).mul(a).sub(o),n)).toVar(),m=jo(Jn(Vi(2).mul(u).sub(l),n)).toVar(),f=jo(Jn(Vi(2).mul(c).sub(d),n)).toVar(),y=jo(Jn(Vi(2).mul(h).sub(p),n)).toVar(),x=Ef(e,n,r).toVar(),b=g.lessThan(m).select(x.sub(Ef(e.sub(zi(Vi(1).div(s.x),0)),a,r)),x.negate().add(Ef(e.add(zi(Vi(1).div(s.x),0)),u,r))),T=f.lessThan(y).select(x.sub(Ef(e.add(zi(0,Vi(1).div(s.y))),c,r)),x.negate().add(Ef(e.sub(zi(0,Vi(1).div(s.y))),h,r)));return Vo(ga(b,T))}));class Mf extends E{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageInstancedBufferAttribute=!0}}class Bf extends Re{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageBufferAttribute=!0}}class Ff extends Gs{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}getMemberType(e,t){const r=this.storageBufferNode.structTypeNode;return r?r.getMemberType(e,t):"void"}setup(e){return!1===e.isAvailable("storageBuffer")&&!0===this.node.isPBO&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let r;const s=e.context.assign;if(r=!1===e.isAvailable("storageBuffer")?!0!==this.node.isPBO||!0===s||!this.node.value.isInstancedBufferAttribute&&"compute"===e.shaderStage?this.node.build(e):e.generatePBO(this):super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}const Uf=Mi(Ff);class Pf extends Ou{static get type(){return"StorageBufferNode"}constructor(e,t=null,r=0){let s,i=null;t&&t.isStruct?(s="struct",i=t.layout):null===t&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)?(s=_s(e.itemSize),r=e.count):s=t,super(e,s,r),this.isStorageBufferNode=!0,this.structTypeNode=i,this.access=Us.READ_WRITE,this.isAtomic=!1,this.isPBO=!1,this._attribute=null,this._varying=null,this.global=!0,!0!==e.isStorageBufferAttribute&&!0!==e.isStorageInstancedBufferAttribute&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(0===this.bufferCount){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return Uf(this,e)}setPBO(e){return this.isPBO=e,this}getPBO(){return this.isPBO}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(Us.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return null===this._attribute&&(this._attribute=cu(this.value),this._varying=ja(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(null!==this.structTypeNode)return this.structTypeNode.getNodeType(e);if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}generate(e){if(null!==this.structTypeNode&&this.structTypeNode.build(e),e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:r}=this.getAttributeData(),s=r.build(e);return e.registerTransform(s,t),s}}const If=(e,t=null,r=0)=>Ei(new Pf(e,t,r));class Lf extends wu{static get type(){return"VertexColorNode"}constructor(e=0){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e);let r;return r=!0===e.hasGeometryAttribute(t)?super.generate(e):e.generateConst(this.nodeType,new s(1,1,1,1)),r}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}class Df extends Os{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const Vf=Bi(Df),Of=new Ee,Gf=new o;class kf extends Os{static get type(){return"SceneNode"}constructor(e=kf.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,r=null!==this.scene?this.scene:e.scene;let s;return t===kf.BACKGROUND_BLURRINESS?s=jl("backgroundBlurriness","float",r):t===kf.BACKGROUND_INTENSITY?s=jl("backgroundIntensity","float",r):t===kf.BACKGROUND_ROTATION?s=mn("mat4").label("backgroundRotation").setGroup(hn).onRenderUpdate((()=>{const e=r.background;return null!==e&&e.isTexture&&e.mapping!==Ae?(Of.copy(r.backgroundRotation),Of.x*=-1,Of.y*=-1,Of.z*=-1,Gf.makeRotationFromEuler(Of)):Gf.identity(),Gf})):console.error("THREE.SceneNode: Unknown scope:",t),s}}kf.BACKGROUND_BLURRINESS="backgroundBlurriness",kf.BACKGROUND_INTENSITY="backgroundIntensity",kf.BACKGROUND_ROTATION="backgroundRotation";const zf=Bi(kf,kf.BACKGROUND_BLURRINESS),$f=Bi(kf,kf.BACKGROUND_INTENSITY),Wf=Bi(kf,kf.BACKGROUND_ROTATION);class Hf extends Lu{static get type(){return"StorageTextureNode"}constructor(e,t,r=null){super(e,t),this.storeNode=r,this.isStorageTextureNode=!0,this.access=Us.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);e.getNodeProperties(this).storeNode=this.storeNode}setAccess(e){return this.access=e,this}generate(e,t){let r;return r=null!==this.storeNode?this.generateStore(e):super.generate(e,t),r}toReadWrite(){return this.setAccess(Us.READ_WRITE)}toReadOnly(){return this.setAccess(Us.READ_ONLY)}toWriteOnly(){return this.setAccess(Us.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:r,storeNode:s}=t,i=super.generate(e,"property"),n=r.build(e,"uvec2"),o=s.build(e,"vec4"),a=e.generateTextureStore(e,i,n,o);e.addLineFlowCode(a,this)}}const jf=Mi(Hf);class qf extends Hl{static get type(){return"UserDataNode"}constructor(e,t,r=null){super(e,t,r),this.userData=r}updateReference(e){return this.reference=null!==this.userData?this.userData:e.object.userData,this.reference}}const Xf=new WeakMap;class Kf extends zs{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=Bs.OBJECT,this.updateAfterType=Bs.OBJECT,this.previousModelWorldMatrix=mn(new o),this.previousProjectionMatrix=mn(new o).setGroup(hn),this.previousCameraViewMatrix=mn(new o)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:r}){const s=Qf(r);this.previousModelWorldMatrix.value.copy(s);const i=Yf(t);i.frameId!==e&&(i.frameId=e,void 0===i.previousProjectionMatrix?(i.previousProjectionMatrix=new o,i.previousCameraViewMatrix=new o,i.currentProjectionMatrix=new o,i.currentCameraViewMatrix=new o,i.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(i.previousProjectionMatrix.copy(i.currentProjectionMatrix),i.previousCameraViewMatrix.copy(i.currentCameraViewMatrix)),i.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(i.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(i.previousCameraViewMatrix))}updateAfter({object:e}){Qf(e).copy(e.matrixWorld)}setup(){const e=null===this.projectionMatrix?qu:mn(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),r=e.mul(pl).mul(xl),s=this.previousProjectionMatrix.mul(t).mul(bl),i=r.xy.div(r.w),n=s.xy.div(s.w);return Jn(i,n)}}function Yf(e){let t=Xf.get(e);return void 0===t&&(t={},Xf.set(e,t)),t}function Qf(e,t=0){const r=Yf(e);let s=r[t];return void 0===s&&(r[t]=s=new o),s}const Zf=Bi(Kf),Jf=Fi((([e,t])=>oa(1,e.oneMinus().div(t)).oneMinus())).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),ey=Fi((([e,t])=>oa(e.div(t.oneMinus()),1))).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),ty=Fi((([e,t])=>e.oneMinus().mul(t.oneMinus()).oneMinus())).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),ry=Fi((([e,t])=>va(e.mul(2).mul(t),e.oneMinus().mul(2).mul(t.oneMinus()).oneMinus(),la(.5,e)))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),sy=Fi((([e,t])=>{const r=t.a.add(e.a.mul(t.a.oneMinus()));return Yi(t.rgb.mul(t.a).add(e.rgb.mul(e.a).mul(t.a.oneMinus())).div(r),r)})).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),iy=Fi((([e])=>uy(e.rgb))),ny=Fi((([e,t=Vi(1)])=>t.mix(uy(e.rgb),e.rgb))),oy=Fi((([e,t=Vi(1)])=>{const r=Zn(e.r,e.g,e.b).div(3),s=e.r.max(e.g.max(e.b)),i=s.sub(r).mul(t).mul(-3);return va(e.rgb,s,i)})),ay=Fi((([e,t=Vi(1)])=>{const r=ji(.57735,.57735,.57735),s=t.cos();return ji(e.rgb.mul(s).add(r.cross(e.rgb).mul(t.sin()).add(r.mul(pa(r,e.rgb).mul(s.oneMinus())))))})),uy=(e,t=ji(c.getLuminanceCoefficients(new r)))=>pa(e,t),ly=Fi((([e,t=ji(1),s=ji(0),i=ji(1),n=Vi(1),o=ji(c.getLuminanceCoefficients(new r,Ce))])=>{const a=e.rgb.dot(ji(o)),u=aa(e.rgb.mul(t).add(s),0).toVar(),l=u.pow(i).toVar();return Ii(u.r.greaterThan(0),(()=>{u.r.assign(l.r)})),Ii(u.g.greaterThan(0),(()=>{u.g.assign(l.g)})),Ii(u.b.greaterThan(0),(()=>{u.b.assign(l.b)})),u.assign(a.add(u.sub(a).mul(n))),Yi(u.rgb,e.a)}));class dy extends zs{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const cy=Mi(dy),hy=new t;class py extends Lu{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return e.object.isQuadMesh&&this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class gy extends py{static get type(){return"PassMultipleTextureNode"}constructor(e,t,r=!1){super(e,null),this.textureName=t,this.previousTexture=r}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class my extends zs{static get type(){return"PassNode"}constructor(e,t,r,s={}){super("vec4"),this.scope=e,this.scene=t,this.camera=r,this.options=s,this._pixelRatio=1,this._width=1,this._height=1;const i=new F;i.isRenderTargetTexture=!0,i.name="depth";const n=new ye(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:Te,...s});n.texture.name="output",n.depthTexture=i,this.renderTarget=n,this._textures={output:n.texture,depth:i},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=mn(0),this._cameraFar=mn(0),this._mrt=null,this.isPassNode=!0,this.updateBeforeType=Bs.FRAME}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(e){let t=this._textures[e];if(void 0===t){t=this.renderTarget.texture.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return void 0===t&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(void 0!==t){const r=this._textures[e],s=this.renderTarget.textures.indexOf(r);this.renderTarget.textures[s]=t,this._textures[e]=t,this._previousTextures[e]=r,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return void 0===t&&(t=Ei(new gy(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=Ei(new gy(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar;this._viewZNodes[e]=t=ih(this.getTextureNode(e),r,s)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar,i=this.getViewZNode(e);this._linearDepthNodes[e]=t=rh(i,r,s)}return t}setup({renderer:e}){return this.renderTarget.samples=void 0===this.options.samples?e.samples:this.options.samples,!0===e.backend.isWebGLBackend&&(this.renderTarget.samples=0),this.renderTarget.texture.type=e.getColorBufferType(),this.scope===my.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:r,camera:s}=this;this._pixelRatio=t.getPixelRatio();const i=t.getSize(hy);this.setSize(i.width,i.height);const n=t.getRenderTarget(),o=t.getMRT();this._cameraNear.value=s.near,this._cameraFar.value=s.far;for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(r,s),t.setRenderTarget(n),t.setMRT(o)}setSize(e,t){this._width=e,this._height=t;const r=this._width*this._pixelRatio,s=this._height*this._pixelRatio;this.renderTarget.setSize(r,s)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}my.COLOR="color",my.DEPTH="depth";class fy extends my{static get type(){return"ToonOutlinePassNode"}constructor(e,t,r,s,i){super(my.COLOR,e,t),this.colorNode=r,this.thicknessNode=s,this.alphaNode=i,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,r=t.getRenderObjectFunction();t.setRenderObjectFunction(((e,r,s,i,n,o,a,u)=>{if((n.isMeshToonMaterial||n.isMeshToonNodeMaterial)&&!1===n.wireframe){const l=this._getOutlineMaterial(n);t.renderObject(e,r,s,i,l,o,a,u)}t.renderObject(e,r,s,i,n,o,a,u)})),super.updateBefore(e),t.setRenderObjectFunction(r)}_createMaterial(){const e=new mh;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=_;const t=Cl.negate(),r=qu.mul(pl),s=Vi(1),i=r.mul(Yi(xl,1)),n=r.mul(Yi(xl.add(t),1)),o=Vo(i.sub(n));return e.vertexNode=i.add(o.mul(this.thicknessNode).mul(i.w).mul(s)),e.colorNode=Yi(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return void 0===t&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const yy=Fi((([e,t])=>e.mul(t).clamp())).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),xy=Fi((([e,t])=>(e=e.mul(t)).div(e.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),by=Fi((([e,t])=>{const r=(e=(e=e.mul(t)).sub(.004).max(0)).mul(e.mul(6.2).add(.5)),s=e.mul(e.mul(6.2).add(1.7)).add(.06);return r.div(s).pow(2.2)})).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Ty=Fi((([e])=>{const t=e.mul(e.add(.0245786)).sub(90537e-9),r=e.mul(e.add(.432951).mul(.983729)).add(.238081);return t.div(r)})),_y=Fi((([e,t])=>{const r=tn(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),s=tn(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return e=e.mul(t).div(.6),e=r.mul(e),e=Ty(e),(e=s.mul(e)).clamp()})).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),vy=tn(ji(1.6605,-.1246,-.0182),ji(-.5876,1.1329,-.1006),ji(-.0728,-.0083,1.1187)),Ny=tn(ji(.6274,.0691,.0164),ji(.3293,.9195,.088),ji(.0433,.0113,.8956)),Sy=Fi((([e])=>{const t=ji(e).toVar(),r=ji(t.mul(t)).toVar(),s=ji(r.mul(r)).toVar();return Vi(15.5).mul(s.mul(r)).sub(eo(40.14,s.mul(t))).add(eo(31.96,s).sub(eo(6.868,r.mul(t))).add(eo(.4298,r).add(eo(.1191,t).sub(.00232))))})),Ry=Fi((([e,t])=>{const r=ji(e).toVar(),s=tn(ji(.856627153315983,.137318972929847,.11189821299995),ji(.0951212405381588,.761241990602591,.0767994186031903),ji(.0482516061458583,.101439036467562,.811302368396859)),i=tn(ji(1.1271005818144368,-.1413297634984383,-.14132976349843826),ji(-.11060664309660323,1.157823702216272,-.11060664309660294),ji(-.016493938717834573,-.016493938717834257,1.2519364065950405)),n=Vi(-12.47393),o=Vi(4.026069);return r.mulAssign(t),r.assign(Ny.mul(r)),r.assign(s.mul(r)),r.assign(aa(r,1e-10)),r.assign(Uo(r)),r.assign(r.sub(n).div(o.sub(n))),r.assign(Na(r,0,1)),r.assign(Sy(r)),r.assign(i.mul(r)),r.assign(ma(aa(ji(0),r),ji(2.2))),r.assign(vy.mul(r)),r.assign(Na(r,0,1)),r})).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Ay=Fi((([e,t])=>{const r=Vi(.76),s=Vi(.15);e=e.mul(t);const i=oa(e.r,oa(e.g,e.b)),n=Ia(i.lessThan(.08),i.sub(eo(6.25,i.mul(i))),.04);e.subAssign(n);const o=aa(e.r,aa(e.g,e.b));Ii(o.lessThan(r),(()=>e));const a=Jn(1,r),u=Jn(1,a.mul(a).div(o.add(a.sub(r))));e.mulAssign(u.div(o));const l=Jn(1,to(1,s.mul(o.sub(u)).add(1)));return va(e,ji(u),l)})).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class Ey extends Os{static get type(){return"CodeNode"}constructor(e="",t=[],r=""){super("code"),this.isCodeNode=!0,this.code=e,this.includes=t,this.language=r}isGlobal(){return!0}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const r of t)r.build(e);const r=e.getCodeFromNode(this,this.getNodeType(e));return r.code=this.code,r.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const Cy=Mi(Ey);class wy extends Ey{static get type(){return"FunctionNode"}constructor(e="",t=[],r=""){super(e,t,r)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let r=t.nodeFunction;return void 0===r&&(r=e.parser.parseFunction(this.code),t.nodeFunction=r),r}generate(e,t){super.generate(e);const r=this.getNodeFunction(e),s=r.name,i=r.type,n=e.getCodeFromNode(this,i);""!==s&&(n.name=s);const o=e.getPropertyName(n),a=this.getNodeFunction(e).getCode(o);return n.code=a+"\n","property"===t?o:e.format(`${o}()`,i,t)}}const My=(e,t=[],r="")=>{for(let e=0;e<t.length;e++){const r=t[e];"function"==typeof r&&(t[e]=r.functionNode)}const s=Ei(new wy(e,t,r)),i=(...e)=>s.call(...e);return i.functionNode=s,i};class By extends Os{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outputType=null,this.events=new a,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return null!==this.outputType}set value(e){this._value!==e&&(this._cache&&"URL"===this.inputType&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&null===this._cache&&"URL"===this.inputType&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&null!==e.value&&void 0!==e.value&&(("URL"===this.inputType||"String"===this.inputType)&&"string"==typeof e.value||"Number"===this.inputType&&"number"==typeof e.value||"Vector2"===this.inputType&&e.value.isVector2||"Vector3"===this.inputType&&e.value.isVector3||"Vector4"===this.inputType&&e.value.isVector4||"Color"===this.inputType&&e.value.isColor||"Matrix3"===this.inputType&&e.value.isMatrix3||"Matrix4"===this.inputType&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:Vi()}serialize(e){super.serialize(e),null!==this.value?"ArrayBuffer"===this.inputType?e.value=Es(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;null!==e.value&&(t="ArrayBuffer"===e.inputType?Cs(e.value):"Texture"===e.inputType?e.meta.textures[e.value]:e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const Fy=Mi(By);class Uy extends Map{get(e,t=null,...r){if(this.has(e))return super.get(e);if(null!==t){const s=t(...r);return this.set(e,s),s}}}class Py{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const Iy=new Uy;class Ly extends Os{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new Uy,this._output=Fy(),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const r=this._outputs;return void 0===r[e]?r[e]=Fy(t):r[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const r=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),r[e]=t,r[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),r[e]=t,r[e].events.addEventListener("refresh",this.onRefresh)):void 0===r[e]?(r[e]=Fy(t),r[e].events.addEventListener("refresh",this.onRefresh)):r[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const r=this.getObject()[e];if("function"==typeof r)return r(...t)}async callAsync(e,...t){const r=this.getObject()[e];if("function"==typeof r)return"AsyncFunction"===r.constructor.name?await r(...t):r(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){null!==e?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),null!==this._object)return this._object;const e=new Py(this),t=Iy.get("THREE"),r=Iy.get("TSL"),s=this.getMethod(),i=[e,this._local,Iy,()=>this.refresh(),(e,t)=>this.setOutput(e,t),t,r];this._object=s(...i);const n=this._object.layout;if(n&&(!1===n.cache&&this._local.clear(),this._output.outputType=n.outputType||null,Array.isArray(n.elements)))for(const e of n.elements){const t=e.id||e.name;e.inputType&&(void 0===this.getParameter(t)&&this.setParameter(t,null),this.getParameter(t).inputType=e.inputType),e.outputType&&(void 0===this.getOutput(t)&&this.setOutput(t,null),this.getOutput(t).outputType=e.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const e in this.parameters){let t=this.parameters[e];t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:Vi()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),null!==this._method)return this._method;const e=["layout","init","main","dispose"].join(", "),t="\nreturn { ...output, "+e+" };",r="var "+e+"; var output = {};\n"+this.codeNode.code+t;return this._method=new Function(...["parameters","local","global","refresh","setOutput","THREE","TSL"],r),this._method}dispose(){null!==this._method&&(this._object&&"function"==typeof this._object.dispose&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[gs(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const r in this.parameters)t.push(this.parameters[r].getCacheKey(e));return ms(t)}set needsUpdate(e){!0===e&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return null===this.codeNode||(!0===this._needsOutputUpdate&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value),this}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const Dy=Mi(Ly);function Vy(e){let t;const r=e.context.getViewZ;return void 0!==r&&(t=r(this)),(t||vl.z).negate()}const Oy=Fi((([e,t],r)=>{const s=Vy(r);return Aa(e,t,s)})),Gy=Fi((([e],t)=>{const r=Vy(t);return e.mul(e,r,r).negate().exp().oneMinus()})),ky=Fi((([e,t])=>Yi(t.toFloat().mix(Dn.rgb,e.toVec3()),Dn.a)));let zy=null,$y=null;class Wy extends Os{static get type(){return"RangeNode"}constructor(e=Vi(),t=Vi()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(Ss(this.minNode.value)),r=e.getTypeLength(Ss(this.maxNode.value));return t>r?t:r}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let r=null;if(t.count>1){const i=this.minNode.value,n=this.maxNode.value,o=e.getTypeLength(Ss(i)),a=e.getTypeLength(Ss(n));zy=zy||new s,$y=$y||new s,zy.setScalar(0),$y.setScalar(0),1===o?zy.setScalar(i):i.isColor?zy.set(i.r,i.g,i.b,1):zy.set(i.x,i.y,i.z||0,i.w||0),1===a?$y.setScalar(n):n.isColor?$y.set(n.r,n.g,n.b,1):$y.set(n.x,n.y,n.z||0,n.w||0);const l=4,d=l*t.count,c=new Float32Array(d);for(let e=0;e<d;e++){const t=e%l,r=zy.getComponent(t),s=$y.getComponent(t);c[e]=u.lerp(r,s,Math.random())}const h=this.getNodeType(e);if(t.count<=4096)r=Gu(c,"vec4",t.count).element(uc).convert(h);else{const t=new E(c,4);e.geometry.setAttribute("__range"+this.id,t),r=pu(t).convert(h)}}else r=Vi(0);return r}}const Hy=Mi(Wy);class jy extends Os{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){e.hasBuiltin(this._builtinName)}generate(e,t){const r=this.getBuiltinName(e),s=this.getNodeType(e);return"compute"===e.shaderStage?e.format(r,s,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${r} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(s))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const qy=(e,t)=>Ei(new jy(e,t)),Xy=qy("numWorkgroups","uvec3"),Ky=qy("workgroupId","uvec3"),Yy=qy("globalId","uvec3"),Qy=qy("localId","uvec3"),Zy=qy("subgroupSize","uint");const Jy=Mi(class extends Os{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:r}=e;!0===r.backend.isWebGLBackend?e.addFlowCode(`\t// ${t}Barrier \n`):e.addLineFlowCode(`${t}Barrier()`,this)}});class ex extends Gs{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let r;const s=e.context.assign;if(r=super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}class tx extends Os{constructor(e,t,r=0){super(t),this.bufferType=t,this.bufferCount=r,this.isWorkgroupInfoNode=!0,this.elementType=t,this.scope=e}label(e){return this.name=e,this}setScope(e){return this.scope=e,this}getElementType(){return this.elementType}getInputType(){return`${this.scope}Array`}element(e){return Ei(new ex(this,e))}generate(e){return e.getScopedArray(this.name||`${this.scope}Array_${this.id}`,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}class rx extends zs{static get type(){return"AtomicFunctionNode"}constructor(e,t,r,s=null){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=r,this.storeNode=s}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=this.method,r=this.getNodeType(e),s=this.getInputType(e),i=this.pointerNode,n=this.valueNode,o=[];o.push(`&${i.build(e,s)}`),null!==n&&o.push(n.build(e,s));const a=`${e.getMethod(t,r)}( ${o.join(", ")} )`;if(null!==this.storeNode){const t=this.storeNode.build(e,s);e.addLineFlowCode(`${t} = ${a}`,this)}else e.addLineFlowCode(a,this)}}rx.ATOMIC_LOAD="atomicLoad",rx.ATOMIC_STORE="atomicStore",rx.ATOMIC_ADD="atomicAdd",rx.ATOMIC_SUB="atomicSub",rx.ATOMIC_MAX="atomicMax",rx.ATOMIC_MIN="atomicMin",rx.ATOMIC_AND="atomicAnd",rx.ATOMIC_OR="atomicOr",rx.ATOMIC_XOR="atomicXor";const sx=Mi(rx),ix=(e,t,r,s=null)=>{const i=sx(e,t,r,s);return i.append(),i};let nx;function ox(e){nx=nx||new WeakMap;let t=nx.get(e);return void 0===t&&nx.set(e,t={}),t}function ax(e){const t=ox(e);return t.shadowMatrix||(t.shadowMatrix=mn("mat4").setGroup(hn).onRenderUpdate((()=>(!0!==e.castShadow&&e.shadow.updateMatrices(e),e.shadow.matrix))))}function ux(e){const t=ox(e);if(void 0===t.projectionUV){const r=ax(e).mul(Tl);t.projectionUV=r.xyz.div(r.w)}return t.projectionUV}function lx(e){const t=ox(e);return t.position||(t.position=mn(new r).setGroup(hn).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.matrixWorld))))}function dx(e){const t=ox(e);return t.targetPosition||(t.targetPosition=mn(new r).setGroup(hn).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.target.matrixWorld))))}function cx(e){const t=ox(e);return t.viewPosition||(t.viewPosition=mn(new r).setGroup(hn).onRenderUpdate((({camera:t},s)=>{s.value=s.value||new r,s.value.setFromMatrixPosition(e.matrixWorld),s.value.applyMatrix4(t.matrixWorldInverse)})))}const hx=e=>Ku.transformDirection(lx(e).sub(dx(e))),px=(e,t)=>{for(const r of t)if(r.isAnalyticLightNode&&r.light.id===e)return r;return null},gx=new WeakMap;class mx extends Os{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=ji().toVar("totalDiffuse"),this.totalSpecularNode=ji().toVar("totalSpecular"),this.outgoingLightNode=ji().toVar("outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=[],t=this._lights;for(let r=0;r<t.length;r++)e.push(t[r].id);return ms(e)}getHash(e){if(null===this._lightNodesHash){null===this._lightNodes&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getDataFromNode(this);for(const r of t.nodes)r.build(e)}setupLightsNode(e){const t=[],r=this._lightNodes,s=(e=>e.sort(((e,t)=>e.id-t.id)))(this._lights),i=e.renderer.library;for(const e of s)if(e.isNode)t.push(Ei(e));else{let s=null;if(null!==r&&(s=px(e.id,r)),null===s){const r=i.getLightNodeClass(e.constructor);if(null===r){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let s=null;gx.has(e)?s=gx.get(e):(s=Ei(new r(e)),gx.set(e,s)),t.push(s)}}this._lightNodes=t}setupLights(e,t){for(const r of t)r.build(e)}setup(e){null===this._lightNodes&&this.setupLightsNode(e);const t=e.context,r=t.lightingModel;let s=this.outgoingLightNode;if(r){const{_lightNodes:i,totalDiffuseNode:n,totalSpecularNode:o}=this;t.outgoingLight=s;const a=e.addStack();e.getDataFromNode(this).nodes=a.nodes,r.start(t,a,e),this.setupLights(e,i),r.indirect(t,a,e);const{backdrop:u,backdropAlpha:l}=t,{directDiffuse:d,directSpecular:c,indirectDiffuse:h,indirectSpecular:p}=t.reflectedLight;let g=d.add(h);null!==u&&(g=ji(null!==l?l.mix(g,u):u),t.material.transparent=!0),n.assign(g),o.assign(c.add(p)),s.assign(n.add(o)),r.finish(t,a,e),s=s.bypass(e.removeStack())}return s}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}class fx extends Os{static get type(){return"ShadowBaseNode"}constructor(e){super(),this.light=e,this.updateBeforeType=Bs.RENDER,this.isShadowBaseNode=!0}setupShadowPosition({material:e}){yx.assign(e.shadowPositionNode||Tl)}dispose(){this.updateBeforeType=Bs.NONE}}const yx=ji().toVar("shadowPositionWorld");function xx(t,r={}){return r.toneMapping=t.toneMapping,r.toneMappingExposure=t.toneMappingExposure,r.outputColorSpace=t.outputColorSpace,r.renderTarget=t.getRenderTarget(),r.activeCubeFace=t.getActiveCubeFace(),r.activeMipmapLevel=t.getActiveMipmapLevel(),r.renderObjectFunction=t.getRenderObjectFunction(),r.pixelRatio=t.getPixelRatio(),r.mrt=t.getMRT(),r.clearColor=t.getClearColor(r.clearColor||new e),r.clearAlpha=t.getClearAlpha(),r.autoClear=t.autoClear,r.scissorTest=t.getScissorTest(),r}function bx(e,t){return t=xx(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t}function Tx(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}function _x(e,t={}){return t.background=e.background,t.backgroundNode=e.backgroundNode,t.overrideMaterial=e.overrideMaterial,t}function vx(e,t){return t=_x(e,t),e.background=null,e.backgroundNode=null,e.overrideMaterial=null,t}function Nx(e,t){e.background=t.background,e.backgroundNode=t.backgroundNode,e.overrideMaterial=t.overrideMaterial}function Sx(e,t,r){return r=vx(t,r=bx(e,r))}function Rx(e,t,r){Tx(e,r),Nx(t,r)}var Ax=Object.freeze({__proto__:null,resetRendererAndSceneState:Sx,resetRendererState:bx,resetSceneState:vx,restoreRendererAndSceneState:Rx,restoreRendererState:Tx,restoreSceneState:Nx,saveRendererAndSceneState:function(e,t,r={}){return r=_x(t,r=xx(e,r))},saveRendererState:xx,saveSceneState:_x});const Ex=new WeakMap,Cx=Fi((([e,t,r])=>{let s=Tl.sub(e).length();return s=s.sub(t).div(r.sub(t)),s=s.saturate(),s})),wx=e=>{let t=Ex.get(e);if(void 0===t){const r=e.isPointLight?(e=>{const t=e.shadow.camera,r=jl("near","float",t).setGroup(hn),s=jl("far","float",t).setGroup(hn),i=rl(e);return Cx(i,r,s)})(e):null;t=new mh,t.colorNode=Yi(0,0,0,1),t.depthNode=r,t.isShadowPassMaterial=!0,t.name="ShadowMaterial",t.fog=!1,Ex.set(e,t)}return t},Mx=Fi((({depthTexture:e,shadowCoord:t})=>Du(e,t.xy).compare(t.z))),Bx=Fi((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>Du(e,t).compare(r),i=jl("mapSize","vec2",r).setGroup(hn),n=jl("radius","float",r).setGroup(hn),o=zi(1).div(i),a=o.x.negate().mul(n),u=o.y.negate().mul(n),l=o.x.mul(n),d=o.y.mul(n),c=a.div(2),h=u.div(2),p=l.div(2),g=d.div(2);return Zn(s(t.xy.add(zi(a,u)),t.z),s(t.xy.add(zi(0,u)),t.z),s(t.xy.add(zi(l,u)),t.z),s(t.xy.add(zi(c,h)),t.z),s(t.xy.add(zi(0,h)),t.z),s(t.xy.add(zi(p,h)),t.z),s(t.xy.add(zi(a,0)),t.z),s(t.xy.add(zi(c,0)),t.z),s(t.xy,t.z),s(t.xy.add(zi(p,0)),t.z),s(t.xy.add(zi(l,0)),t.z),s(t.xy.add(zi(c,g)),t.z),s(t.xy.add(zi(0,g)),t.z),s(t.xy.add(zi(p,g)),t.z),s(t.xy.add(zi(a,d)),t.z),s(t.xy.add(zi(0,d)),t.z),s(t.xy.add(zi(l,d)),t.z)).mul(1/17)})),Fx=Fi((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>Du(e,t).compare(r),i=jl("mapSize","vec2",r).setGroup(hn),n=zi(1).div(i),o=n.x,a=n.y,u=t.xy,l=Oo(u.mul(i).add(.5));return u.subAssign(l.mul(n)),Zn(s(u,t.z),s(u.add(zi(o,0)),t.z),s(u.add(zi(0,a)),t.z),s(u.add(n),t.z),va(s(u.add(zi(o.negate(),0)),t.z),s(u.add(zi(o.mul(2),0)),t.z),l.x),va(s(u.add(zi(o.negate(),a)),t.z),s(u.add(zi(o.mul(2),a)),t.z),l.x),va(s(u.add(zi(0,a.negate())),t.z),s(u.add(zi(0,a.mul(2))),t.z),l.y),va(s(u.add(zi(o,a.negate())),t.z),s(u.add(zi(o,a.mul(2))),t.z),l.y),va(va(s(u.add(zi(o.negate(),a.negate())),t.z),s(u.add(zi(o.mul(2),a.negate())),t.z),l.x),va(s(u.add(zi(o.negate(),a.mul(2))),t.z),s(u.add(zi(o.mul(2),a.mul(2))),t.z),l.x),l.y)).mul(1/9)})),Ux=Fi((({depthTexture:e,shadowCoord:t})=>{const r=Vi(1).toVar(),s=Du(e).sample(t.xy).rg,i=la(t.z,s.x);return Ii(i.notEqual(Vi(1)),(()=>{const e=t.z.sub(s.x),n=aa(0,s.y.mul(s.y));let o=n.div(n.add(e.mul(e)));o=Na(Jn(o,.3).div(.95-.3)),r.assign(Na(aa(i,o)))})),r})),Px=Fi((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=Vi(0).toVar(),n=Vi(0).toVar(),o=e.lessThanEqual(Vi(1)).select(Vi(0),Vi(2).div(e.sub(1))),a=e.lessThanEqual(Vi(1)).select(Vi(0),Vi(-1));Nc({start:Oi(0),end:Oi(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Vi(e).mul(o)),l=s.sample(Zn(Gc.xy,zi(0,u).mul(t)).div(r)).x;i.addAssign(l),n.addAssign(l.mul(l))})),i.divAssign(e),n.divAssign(e);const u=Po(n.sub(i.mul(i)));return zi(i,u)})),Ix=Fi((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=Vi(0).toVar(),n=Vi(0).toVar(),o=e.lessThanEqual(Vi(1)).select(Vi(0),Vi(2).div(e.sub(1))),a=e.lessThanEqual(Vi(1)).select(Vi(0),Vi(-1));Nc({start:Oi(0),end:Oi(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Vi(e).mul(o)),l=s.sample(Zn(Gc.xy,zi(u,0).mul(t)).div(r));i.addAssign(l.x),n.addAssign(Zn(l.y.mul(l.y),l.x.mul(l.x)))})),i.divAssign(e),n.divAssign(e);const u=Po(n.sub(i.mul(i)));return zi(i,u)})),Lx=[Mx,Bx,Fx,Ux];let Dx;const Vx=new Nf;class Ox extends fx{static get type(){return"ShadowNode"}constructor(e,t=null){super(e),this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this._node=null,this.isShadowNode=!0}setupShadowFilter(e,{filterFn:t,depthTexture:r,shadowCoord:s,shadow:i}){const n=s.x.greaterThanEqual(0).and(s.x.lessThanEqual(1)).and(s.y.greaterThanEqual(0)).and(s.y.lessThanEqual(1)).and(s.z.lessThanEqual(1)),o=t({depthTexture:r,shadowCoord:s,shadow:i});return n.select(o,Vi(1))}setupShadowCoord(e,t){const{shadow:r}=this,{renderer:s}=e,i=jl("bias","float",r).setGroup(hn);let n,o=t;if(r.camera.isOrthographicCamera||!0!==s.logarithmicDepthBuffer)o=o.xyz.div(o.w),n=o.z,s.coordinateSystem===d&&(n=n.mul(2).sub(1));else{const e=o.w;o=o.xy.div(e);const t=jl("near","float",r.camera).setGroup(hn),s=jl("far","float",r.camera).setGroup(hn);n=nh(e.negate(),t,s)}return o=ji(o.x,o.y.oneMinus(),n.add(i)),o}getShadowFilterFn(e){return Lx[e]}setupShadow(e){const{renderer:t}=e,{light:r,shadow:s}=this,i=t.shadowMap.type,n=new F(s.mapSize.width,s.mapSize.height);n.compareFunction=we;const o=e.createRenderTarget(s.mapSize.width,s.mapSize.height);if(o.depthTexture=n,s.camera.updateProjectionMatrix(),i===Me){n.compareFunction=null,this.vsmShadowMapVertical=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Be,type:Te}),this.vsmShadowMapHorizontal=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Be,type:Te});const t=Du(n),r=Du(this.vsmShadowMapVertical.texture),i=jl("blurSamples","float",s).setGroup(hn),o=jl("radius","float",s).setGroup(hn),a=jl("mapSize","vec2",s).setGroup(hn);let u=this.vsmMaterialVertical||(this.vsmMaterialVertical=new mh);u.fragmentNode=Px({samples:i,radius:o,size:a,shadowPass:t}).context(e.getSharedContext()),u.name="VSMVertical",u=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new mh),u.fragmentNode=Ix({samples:i,radius:o,size:a,shadowPass:r}).context(e.getSharedContext()),u.name="VSMHorizontal"}const a=jl("intensity","float",s).setGroup(hn),u=jl("normalBias","float",s).setGroup(hn),l=ax(r).mul(yx.add(Ul.mul(u))),d=this.setupShadowCoord(e,l),c=s.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(null===c)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const h=i===Me?this.vsmShadowMapHorizontal.texture:n,p=this.setupShadowFilter(e,{filterFn:c,shadowTexture:o.texture,depthTexture:h,shadowCoord:d,shadow:s}),g=Du(o.texture,d),m=va(1,p.rgb.mix(g,1),a.mul(g.a)).toVar();return this.shadowMap=o,this.shadow.map=o,m}setup(e){if(!1!==e.renderer.shadowMap.enabled)return Fi((()=>{let t=this._node;return this.setupShadowPosition(e),null===t&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t}))()}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e;t.updateMatrices(s),r.setSize(t.mapSize.width,t.mapSize.height),i.render(n,t.camera)}updateShadow(e){const{shadowMap:t,light:r,shadow:s}=this,{renderer:i,scene:n,camera:o}=e,a=i.shadowMap.type,u=t.depthTexture.version;this._depthVersionCached=u,s.camera.layers.mask=o.layers.mask;const l=i.getRenderObjectFunction(),d=i.getMRT(),c=!!d&&d.has("velocity");Dx=Sx(i,n,Dx),n.overrideMaterial=wx(r),i.setRenderObjectFunction(((e,t,r,n,u,l,...d)=>{(!0===e.castShadow||e.receiveShadow&&a===Me)&&(c&&(As(e).useVelocity=!0),e.onBeforeShadow(i,e,o,s.camera,n,t.overrideMaterial,l),i.renderObject(e,t,r,n,u,l,...d),e.onAfterShadow(i,e,o,s.camera,n,t.overrideMaterial,l))})),i.setRenderTarget(t),this.renderShadow(e),i.setRenderObjectFunction(l),!0!==r.isPointLight&&a===Me&&this.vsmPass(i),Rx(i,n,Dx)}vsmPass(e){const{shadow:t}=this;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height),e.setRenderTarget(this.vsmShadowMapVertical),Vx.material=this.vsmMaterialVertical,Vx.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),Vx.material=this.vsmMaterialHorizontal,Vx.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,null!==this.vsmShadowMapVertical&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),null!==this.vsmShadowMapHorizontal&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),super.dispose()}updateBefore(e){const{shadow:t}=this;(t.needsUpdate||t.autoUpdate)&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const Gx=(e,t)=>Ei(new Ox(e,t));class kx extends Mc{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.light=t,this.color=new e,this.colorNode=t&&t.colorNode||mn(this.color).setGroup(hn),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0,this.updateType=Bs.FRAME}customCacheKey(){return fs(this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadowNode(){return Gx(this.light)}setupShadow(e){const{renderer:t}=e;if(!1===t.shadowMap.enabled)return;let r=this.shadowColorNode;if(null===r){const t=this.light.shadow.shadowNode;let s;s=void 0!==t?Ei(t):this.setupShadowNode(e),this.shadowNode=s,this.shadowColorNode=r=this.colorNode.mul(s),this.baseColorNode=this.colorNode}this.colorNode=r}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):null!==this.shadowNode&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const zx=Fi((e=>{const{lightDistance:t,cutoffDistance:r,decayExponent:s}=e,i=t.pow(s).max(.01).reciprocal();return r.greaterThan(0).select(i.mul(t.div(r).pow4().oneMinus().clamp().pow2()),i)})),$x=new e,Wx=Fi((([e,t])=>{const r=e.toVar(),s=jo(r),i=to(1,aa(s.x,aa(s.y,s.z)));s.mulAssign(i),r.mulAssign(i.mul(t.mul(2).oneMinus()));const n=zi(r.xy).toVar(),o=t.mul(1.5).oneMinus();return Ii(s.z.greaterThanEqual(o),(()=>{Ii(r.z.greaterThan(0),(()=>{n.x.assign(Jn(4,r.x))}))})).ElseIf(s.x.greaterThanEqual(o),(()=>{const e=qo(r.x);n.x.assign(r.z.mul(e).add(e.mul(2)))})).ElseIf(s.y.greaterThanEqual(o),(()=>{const e=qo(r.y);n.x.assign(r.x.add(e.mul(2)).add(2)),n.y.assign(r.z.mul(e).sub(2))})),zi(.125,.25).mul(n).add(zi(.375,.75)).flipY()})).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),Hx=Fi((({depthTexture:e,bd3D:t,dp:r,texelSize:s})=>Du(e,Wx(t,s.y)).compare(r))),jx=Fi((({depthTexture:e,bd3D:t,dp:r,texelSize:s,shadow:i})=>{const n=jl("radius","float",i).setGroup(hn),o=zi(-1,1).mul(n).mul(s.y);return Du(e,Wx(t.add(o.xyy),s.y)).compare(r).add(Du(e,Wx(t.add(o.yyy),s.y)).compare(r)).add(Du(e,Wx(t.add(o.xyx),s.y)).compare(r)).add(Du(e,Wx(t.add(o.yyx),s.y)).compare(r)).add(Du(e,Wx(t,s.y)).compare(r)).add(Du(e,Wx(t.add(o.xxy),s.y)).compare(r)).add(Du(e,Wx(t.add(o.yxy),s.y)).compare(r)).add(Du(e,Wx(t.add(o.xxx),s.y)).compare(r)).add(Du(e,Wx(t.add(o.yxx),s.y)).compare(r)).mul(1/9)})),qx=Fi((({filterFn:e,depthTexture:t,shadowCoord:r,shadow:s})=>{const i=r.xyz.toVar(),n=i.length(),o=mn("float").setGroup(hn).onRenderUpdate((()=>s.camera.near)),a=mn("float").setGroup(hn).onRenderUpdate((()=>s.camera.far)),u=jl("bias","float",s).setGroup(hn),l=mn(s.mapSize).setGroup(hn),d=Vi(1).toVar();return Ii(n.sub(a).lessThanEqual(0).and(n.sub(o).greaterThanEqual(0)),(()=>{const r=n.sub(o).div(a.sub(o)).toVar();r.addAssign(u);const c=i.normalize(),h=zi(1).div(l.mul(zi(4,2)));d.assign(e({depthTexture:t,bd3D:c,dp:r,texelSize:h,shadow:s}))})),d})),Xx=new s,Kx=new t,Yx=new t;class Qx extends Ox{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===Fe?Hx:jx}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n}){return qx({filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n})}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e,o=t.getFrameExtents();Yx.copy(t.mapSize),Yx.multiply(o),r.setSize(Yx.width,Yx.height),Kx.copy(t.mapSize);const a=i.autoClear,u=i.getClearColor($x),l=i.getClearAlpha();i.autoClear=!1,i.setClearColor(t.clearColor,t.clearAlpha),i.clear();const d=t.getViewportCount();for(let e=0;e<d;e++){const o=t.getViewport(e),a=Kx.x*o.x,u=Yx.y-Kx.y-Kx.y*o.y;Xx.set(a,u,Kx.x*o.z,Kx.y*o.w),r.viewport.copy(Xx),t.updateMatrices(s,e),i.render(n,t.camera)}i.autoClear=a,i.setClearColor(u,l)}}const Zx=Fi((({color:e,lightViewPosition:t,cutoffDistance:r,decayExponent:s},i)=>{const n=i.context.lightingModel,o=t.sub(vl),a=o.normalize(),u=o.length(),l=zx({lightDistance:u,cutoffDistance:r,decayExponent:s}),d=e.mul(l),c=i.context.reflectedLight;n.direct({lightDirection:a,lightColor:d,reflectedLight:c},i.stack,i)}));class Jx extends kx{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=mn(0).setGroup(hn),this.decayExponentNode=mn(2).setGroup(hn)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return((e,t)=>Ei(new Qx(e,t)))(this.light)}setup(e){super.setup(e),Zx({color:this.colorNode,lightViewPosition:cx(this.light),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode}).append()}}const eb=Fi((([e=t()])=>{const t=e.mul(2),r=t.x.floor(),s=t.y.floor();return r.add(s).mod(2).sign()})),tb=Fi((([e=Bu()],{renderer:t,material:r})=>{const s=Vi(1).toVar(),i=_a(e.mul(2).sub(1));if(r.alphaToCoverage&&t.samples>1){const e=Vi(i.fwidth()).toVar();s.assign(Aa(e.oneMinus(),e.add(1),i).oneMinus())}else i.greaterThan(1).discard();return s})),rb=Fi((([e,t,r])=>{const s=Vi(r).toVar(),i=Vi(t).toVar(),n=ki(e).toVar();return Ia(n,i,s)})).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),sb=Fi((([e,t])=>{const r=ki(t).toVar(),s=Vi(e).toVar();return Ia(r,s.negate(),s)})).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),ib=Fi((([e])=>{const t=Vi(e).toVar();return Oi(Lo(t))})).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),nb=Fi((([e,t])=>{const r=Vi(e).toVar();return t.assign(ib(r)),r.sub(Vi(t))})),ob=Hm([Fi((([e,t,r,s,i,n])=>{const o=Vi(n).toVar(),a=Vi(i).toVar(),u=Vi(s).toVar(),l=Vi(r).toVar(),d=Vi(t).toVar(),c=Vi(e).toVar(),h=Vi(Jn(1,a)).toVar();return Jn(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),Fi((([e,t,r,s,i,n])=>{const o=Vi(n).toVar(),a=Vi(i).toVar(),u=ji(s).toVar(),l=ji(r).toVar(),d=ji(t).toVar(),c=ji(e).toVar(),h=Vi(Jn(1,a)).toVar();return Jn(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]})]),ab=Hm([Fi((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=Vi(d).toVar(),h=Vi(l).toVar(),p=Vi(u).toVar(),g=Vi(a).toVar(),m=Vi(o).toVar(),f=Vi(n).toVar(),y=Vi(i).toVar(),x=Vi(s).toVar(),b=Vi(r).toVar(),T=Vi(t).toVar(),_=Vi(e).toVar(),v=Vi(Jn(1,p)).toVar(),N=Vi(Jn(1,h)).toVar();return Vi(Jn(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),Fi((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=Vi(d).toVar(),h=Vi(l).toVar(),p=Vi(u).toVar(),g=ji(a).toVar(),m=ji(o).toVar(),f=ji(n).toVar(),y=ji(i).toVar(),x=ji(s).toVar(),b=ji(r).toVar(),T=ji(t).toVar(),_=ji(e).toVar(),v=Vi(Jn(1,p)).toVar(),N=Vi(Jn(1,h)).toVar();return Vi(Jn(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]})]),ub=Fi((([e,t,r])=>{const s=Vi(r).toVar(),i=Vi(t).toVar(),n=Gi(e).toVar(),o=Gi(n.bitAnd(Gi(7))).toVar(),a=Vi(rb(o.lessThan(Gi(4)),i,s)).toVar(),u=Vi(eo(2,rb(o.lessThan(Gi(4)),s,i))).toVar();return sb(a,ki(o.bitAnd(Gi(1)))).add(sb(u,ki(o.bitAnd(Gi(2)))))})).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),lb=Fi((([e,t,r,s])=>{const i=Vi(s).toVar(),n=Vi(r).toVar(),o=Vi(t).toVar(),a=Gi(e).toVar(),u=Gi(a.bitAnd(Gi(15))).toVar(),l=Vi(rb(u.lessThan(Gi(8)),o,n)).toVar(),d=Vi(rb(u.lessThan(Gi(4)),n,rb(u.equal(Gi(12)).or(u.equal(Gi(14))),o,i))).toVar();return sb(l,ki(u.bitAnd(Gi(1)))).add(sb(d,ki(u.bitAnd(Gi(2)))))})).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),db=Hm([ub,lb]),cb=Fi((([e,t,r])=>{const s=Vi(r).toVar(),i=Vi(t).toVar(),n=Xi(e).toVar();return ji(db(n.x,i,s),db(n.y,i,s),db(n.z,i,s))})).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),hb=Fi((([e,t,r,s])=>{const i=Vi(s).toVar(),n=Vi(r).toVar(),o=Vi(t).toVar(),a=Xi(e).toVar();return ji(db(a.x,o,n,i),db(a.y,o,n,i),db(a.z,o,n,i))})).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),pb=Hm([cb,hb]),gb=Fi((([e])=>{const t=Vi(e).toVar();return eo(.6616,t)})).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),mb=Fi((([e])=>{const t=Vi(e).toVar();return eo(.982,t)})).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),fb=Hm([gb,Fi((([e])=>{const t=ji(e).toVar();return eo(.6616,t)})).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),yb=Hm([mb,Fi((([e])=>{const t=ji(e).toVar();return eo(.982,t)})).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),xb=Fi((([e,t])=>{const r=Oi(t).toVar(),s=Gi(e).toVar();return s.shiftLeft(r).bitOr(s.shiftRight(Oi(32).sub(r)))})).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),bb=Fi((([e,t,r])=>{e.subAssign(r),e.bitXorAssign(xb(r,Oi(4))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(xb(e,Oi(6))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(xb(t,Oi(8))),t.addAssign(e),e.subAssign(r),e.bitXorAssign(xb(r,Oi(16))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(xb(e,Oi(19))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(xb(t,Oi(4))),t.addAssign(e)})),Tb=Fi((([e,t,r])=>{const s=Gi(r).toVar(),i=Gi(t).toVar(),n=Gi(e).toVar();return s.bitXorAssign(i),s.subAssign(xb(i,Oi(14))),n.bitXorAssign(s),n.subAssign(xb(s,Oi(11))),i.bitXorAssign(n),i.subAssign(xb(n,Oi(25))),s.bitXorAssign(i),s.subAssign(xb(i,Oi(16))),n.bitXorAssign(s),n.subAssign(xb(s,Oi(4))),i.bitXorAssign(n),i.subAssign(xb(n,Oi(14))),s.bitXorAssign(i),s.subAssign(xb(i,Oi(24))),s})).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),_b=Fi((([e])=>{const t=Gi(e).toVar();return Vi(t).div(Vi(Gi(Oi(4294967295))))})).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),vb=Fi((([e])=>{const t=Vi(e).toVar();return t.mul(t).mul(t).mul(t.mul(t.mul(6).sub(15)).add(10))})).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),Nb=Hm([Fi((([e])=>{const t=Oi(e).toVar(),r=Gi(Gi(1)).toVar(),s=Gi(Gi(Oi(3735928559)).add(r.shiftLeft(Gi(2))).add(Gi(13))).toVar();return Tb(s.add(Gi(t)),s,s)})).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),Fi((([e,t])=>{const r=Oi(t).toVar(),s=Oi(e).toVar(),i=Gi(Gi(2)).toVar(),n=Gi().toVar(),o=Gi().toVar(),a=Gi().toVar();return n.assign(o.assign(a.assign(Gi(Oi(3735928559)).add(i.shiftLeft(Gi(2))).add(Gi(13))))),n.addAssign(Gi(s)),o.addAssign(Gi(r)),Tb(n,o,a)})).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),Fi((([e,t,r])=>{const s=Oi(r).toVar(),i=Oi(t).toVar(),n=Oi(e).toVar(),o=Gi(Gi(3)).toVar(),a=Gi().toVar(),u=Gi().toVar(),l=Gi().toVar();return a.assign(u.assign(l.assign(Gi(Oi(3735928559)).add(o.shiftLeft(Gi(2))).add(Gi(13))))),a.addAssign(Gi(n)),u.addAssign(Gi(i)),l.addAssign(Gi(s)),Tb(a,u,l)})).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),Fi((([e,t,r,s])=>{const i=Oi(s).toVar(),n=Oi(r).toVar(),o=Oi(t).toVar(),a=Oi(e).toVar(),u=Gi(Gi(4)).toVar(),l=Gi().toVar(),d=Gi().toVar(),c=Gi().toVar();return l.assign(d.assign(c.assign(Gi(Oi(3735928559)).add(u.shiftLeft(Gi(2))).add(Gi(13))))),l.addAssign(Gi(a)),d.addAssign(Gi(o)),c.addAssign(Gi(n)),bb(l,d,c),l.addAssign(Gi(i)),Tb(l,d,c)})).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),Fi((([e,t,r,s,i])=>{const n=Oi(i).toVar(),o=Oi(s).toVar(),a=Oi(r).toVar(),u=Oi(t).toVar(),l=Oi(e).toVar(),d=Gi(Gi(5)).toVar(),c=Gi().toVar(),h=Gi().toVar(),p=Gi().toVar();return c.assign(h.assign(p.assign(Gi(Oi(3735928559)).add(d.shiftLeft(Gi(2))).add(Gi(13))))),c.addAssign(Gi(l)),h.addAssign(Gi(u)),p.addAssign(Gi(a)),bb(c,h,p),c.addAssign(Gi(o)),h.addAssign(Gi(n)),Tb(c,h,p)})).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]})]),Sb=Hm([Fi((([e,t])=>{const r=Oi(t).toVar(),s=Oi(e).toVar(),i=Gi(Nb(s,r)).toVar(),n=Xi().toVar();return n.x.assign(i.bitAnd(Oi(255))),n.y.assign(i.shiftRight(Oi(8)).bitAnd(Oi(255))),n.z.assign(i.shiftRight(Oi(16)).bitAnd(Oi(255))),n})).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),Fi((([e,t,r])=>{const s=Oi(r).toVar(),i=Oi(t).toVar(),n=Oi(e).toVar(),o=Gi(Nb(n,i,s)).toVar(),a=Xi().toVar();return a.x.assign(o.bitAnd(Oi(255))),a.y.assign(o.shiftRight(Oi(8)).bitAnd(Oi(255))),a.z.assign(o.shiftRight(Oi(16)).bitAnd(Oi(255))),a})).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]})]),Rb=Hm([Fi((([e])=>{const t=zi(e).toVar(),r=Oi().toVar(),s=Oi().toVar(),i=Vi(nb(t.x,r)).toVar(),n=Vi(nb(t.y,s)).toVar(),o=Vi(vb(i)).toVar(),a=Vi(vb(n)).toVar(),u=Vi(ob(db(Nb(r,s),i,n),db(Nb(r.add(Oi(1)),s),i.sub(1),n),db(Nb(r,s.add(Oi(1))),i,n.sub(1)),db(Nb(r.add(Oi(1)),s.add(Oi(1))),i.sub(1),n.sub(1)),o,a)).toVar();return fb(u)})).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),Fi((([e])=>{const t=ji(e).toVar(),r=Oi().toVar(),s=Oi().toVar(),i=Oi().toVar(),n=Vi(nb(t.x,r)).toVar(),o=Vi(nb(t.y,s)).toVar(),a=Vi(nb(t.z,i)).toVar(),u=Vi(vb(n)).toVar(),l=Vi(vb(o)).toVar(),d=Vi(vb(a)).toVar(),c=Vi(ab(db(Nb(r,s,i),n,o,a),db(Nb(r.add(Oi(1)),s,i),n.sub(1),o,a),db(Nb(r,s.add(Oi(1)),i),n,o.sub(1),a),db(Nb(r.add(Oi(1)),s.add(Oi(1)),i),n.sub(1),o.sub(1),a),db(Nb(r,s,i.add(Oi(1))),n,o,a.sub(1)),db(Nb(r.add(Oi(1)),s,i.add(Oi(1))),n.sub(1),o,a.sub(1)),db(Nb(r,s.add(Oi(1)),i.add(Oi(1))),n,o.sub(1),a.sub(1)),db(Nb(r.add(Oi(1)),s.add(Oi(1)),i.add(Oi(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return yb(c)})).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]})]),Ab=Hm([Fi((([e])=>{const t=zi(e).toVar(),r=Oi().toVar(),s=Oi().toVar(),i=Vi(nb(t.x,r)).toVar(),n=Vi(nb(t.y,s)).toVar(),o=Vi(vb(i)).toVar(),a=Vi(vb(n)).toVar(),u=ji(ob(pb(Sb(r,s),i,n),pb(Sb(r.add(Oi(1)),s),i.sub(1),n),pb(Sb(r,s.add(Oi(1))),i,n.sub(1)),pb(Sb(r.add(Oi(1)),s.add(Oi(1))),i.sub(1),n.sub(1)),o,a)).toVar();return fb(u)})).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),Fi((([e])=>{const t=ji(e).toVar(),r=Oi().toVar(),s=Oi().toVar(),i=Oi().toVar(),n=Vi(nb(t.x,r)).toVar(),o=Vi(nb(t.y,s)).toVar(),a=Vi(nb(t.z,i)).toVar(),u=Vi(vb(n)).toVar(),l=Vi(vb(o)).toVar(),d=Vi(vb(a)).toVar(),c=ji(ab(pb(Sb(r,s,i),n,o,a),pb(Sb(r.add(Oi(1)),s,i),n.sub(1),o,a),pb(Sb(r,s.add(Oi(1)),i),n,o.sub(1),a),pb(Sb(r.add(Oi(1)),s.add(Oi(1)),i),n.sub(1),o.sub(1),a),pb(Sb(r,s,i.add(Oi(1))),n,o,a.sub(1)),pb(Sb(r.add(Oi(1)),s,i.add(Oi(1))),n.sub(1),o,a.sub(1)),pb(Sb(r,s.add(Oi(1)),i.add(Oi(1))),n,o.sub(1),a.sub(1)),pb(Sb(r.add(Oi(1)),s.add(Oi(1)),i.add(Oi(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return yb(c)})).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]})]),Eb=Hm([Fi((([e])=>{const t=Vi(e).toVar(),r=Oi(ib(t)).toVar();return _b(Nb(r))})).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),Fi((([e])=>{const t=zi(e).toVar(),r=Oi(ib(t.x)).toVar(),s=Oi(ib(t.y)).toVar();return _b(Nb(r,s))})).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),Fi((([e])=>{const t=ji(e).toVar(),r=Oi(ib(t.x)).toVar(),s=Oi(ib(t.y)).toVar(),i=Oi(ib(t.z)).toVar();return _b(Nb(r,s,i))})).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),Fi((([e])=>{const t=Yi(e).toVar(),r=Oi(ib(t.x)).toVar(),s=Oi(ib(t.y)).toVar(),i=Oi(ib(t.z)).toVar(),n=Oi(ib(t.w)).toVar();return _b(Nb(r,s,i,n))})).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]})]),Cb=Hm([Fi((([e])=>{const t=Vi(e).toVar(),r=Oi(ib(t)).toVar();return ji(_b(Nb(r,Oi(0))),_b(Nb(r,Oi(1))),_b(Nb(r,Oi(2))))})).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),Fi((([e])=>{const t=zi(e).toVar(),r=Oi(ib(t.x)).toVar(),s=Oi(ib(t.y)).toVar();return ji(_b(Nb(r,s,Oi(0))),_b(Nb(r,s,Oi(1))),_b(Nb(r,s,Oi(2))))})).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),Fi((([e])=>{const t=ji(e).toVar(),r=Oi(ib(t.x)).toVar(),s=Oi(ib(t.y)).toVar(),i=Oi(ib(t.z)).toVar();return ji(_b(Nb(r,s,i,Oi(0))),_b(Nb(r,s,i,Oi(1))),_b(Nb(r,s,i,Oi(2))))})).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),Fi((([e])=>{const t=Yi(e).toVar(),r=Oi(ib(t.x)).toVar(),s=Oi(ib(t.y)).toVar(),i=Oi(ib(t.z)).toVar(),n=Oi(ib(t.w)).toVar();return ji(_b(Nb(r,s,i,n,Oi(0))),_b(Nb(r,s,i,n,Oi(1))),_b(Nb(r,s,i,n,Oi(2))))})).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]})]),wb=Fi((([e,t,r,s])=>{const i=Vi(s).toVar(),n=Vi(r).toVar(),o=Oi(t).toVar(),a=ji(e).toVar(),u=Vi(0).toVar(),l=Vi(1).toVar();return Nc(o,(()=>{u.addAssign(l.mul(Rb(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Mb=Fi((([e,t,r,s])=>{const i=Vi(s).toVar(),n=Vi(r).toVar(),o=Oi(t).toVar(),a=ji(e).toVar(),u=ji(0).toVar(),l=Vi(1).toVar();return Nc(o,(()=>{u.addAssign(l.mul(Ab(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Bb=Fi((([e,t,r,s])=>{const i=Vi(s).toVar(),n=Vi(r).toVar(),o=Oi(t).toVar(),a=ji(e).toVar();return zi(wb(a,o,n,i),wb(a.add(ji(Oi(19),Oi(193),Oi(17))),o,n,i))})).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Fb=Fi((([e,t,r,s])=>{const i=Vi(s).toVar(),n=Vi(r).toVar(),o=Oi(t).toVar(),a=ji(e).toVar(),u=ji(Mb(a,o,n,i)).toVar(),l=Vi(wb(a.add(ji(Oi(19),Oi(193),Oi(17))),o,n,i)).toVar();return Yi(u,l)})).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Ub=Hm([Fi((([e,t,r,s,i,n,o])=>{const a=Oi(o).toVar(),u=Vi(n).toVar(),l=Oi(i).toVar(),d=Oi(s).toVar(),c=Oi(r).toVar(),h=Oi(t).toVar(),p=zi(e).toVar(),g=ji(Cb(zi(h.add(d),c.add(l)))).toVar(),m=zi(g.x,g.y).toVar();m.subAssign(.5),m.mulAssign(u),m.addAssign(.5);const f=zi(zi(Vi(h),Vi(c)).add(m)).toVar(),y=zi(f.sub(p)).toVar();return Ii(a.equal(Oi(2)),(()=>jo(y.x).add(jo(y.y)))),Ii(a.equal(Oi(3)),(()=>aa(jo(y.x),jo(y.y)))),pa(y,y)})).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),Fi((([e,t,r,s,i,n,o,a,u])=>{const l=Oi(u).toVar(),d=Vi(a).toVar(),c=Oi(o).toVar(),h=Oi(n).toVar(),p=Oi(i).toVar(),g=Oi(s).toVar(),m=Oi(r).toVar(),f=Oi(t).toVar(),y=ji(e).toVar(),x=ji(Cb(ji(f.add(p),m.add(h),g.add(c)))).toVar();x.subAssign(.5),x.mulAssign(d),x.addAssign(.5);const b=ji(ji(Vi(f),Vi(m),Vi(g)).add(x)).toVar(),T=ji(b.sub(y)).toVar();return Ii(l.equal(Oi(2)),(()=>jo(T.x).add(jo(T.y)).add(jo(T.z)))),Ii(l.equal(Oi(3)),(()=>aa(aa(jo(T.x),jo(T.y)),jo(T.z)))),pa(T,T)})).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),Pb=Fi((([e,t,r])=>{const s=Oi(r).toVar(),i=Vi(t).toVar(),n=zi(e).toVar(),o=Oi().toVar(),a=Oi().toVar(),u=zi(nb(n.x,o),nb(n.y,a)).toVar(),l=Vi(1e6).toVar();return Nc({start:-1,end:Oi(1),name:"x",condition:"<="},(({x:e})=>{Nc({start:-1,end:Oi(1),name:"y",condition:"<="},(({y:t})=>{const r=Vi(Ub(u,e,t,o,a,i,s)).toVar();l.assign(oa(l,r))}))})),Ii(s.equal(Oi(0)),(()=>{l.assign(Po(l))})),l})).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),Ib=Fi((([e,t,r])=>{const s=Oi(r).toVar(),i=Vi(t).toVar(),n=zi(e).toVar(),o=Oi().toVar(),a=Oi().toVar(),u=zi(nb(n.x,o),nb(n.y,a)).toVar(),l=zi(1e6,1e6).toVar();return Nc({start:-1,end:Oi(1),name:"x",condition:"<="},(({x:e})=>{Nc({start:-1,end:Oi(1),name:"y",condition:"<="},(({y:t})=>{const r=Vi(Ub(u,e,t,o,a,i,s)).toVar();Ii(r.lessThan(l.x),(()=>{l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.y.assign(r)}))}))})),Ii(s.equal(Oi(0)),(()=>{l.assign(Po(l))})),l})).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),Lb=Fi((([e,t,r])=>{const s=Oi(r).toVar(),i=Vi(t).toVar(),n=zi(e).toVar(),o=Oi().toVar(),a=Oi().toVar(),u=zi(nb(n.x,o),nb(n.y,a)).toVar(),l=ji(1e6,1e6,1e6).toVar();return Nc({start:-1,end:Oi(1),name:"x",condition:"<="},(({x:e})=>{Nc({start:-1,end:Oi(1),name:"y",condition:"<="},(({y:t})=>{const r=Vi(Ub(u,e,t,o,a,i,s)).toVar();Ii(r.lessThan(l.x),(()=>{l.z.assign(l.y),l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.z.assign(l.y),l.y.assign(r)})).ElseIf(r.lessThan(l.z),(()=>{l.z.assign(r)}))}))})),Ii(s.equal(Oi(0)),(()=>{l.assign(Po(l))})),l})).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),Db=Hm([Pb,Fi((([e,t,r])=>{const s=Oi(r).toVar(),i=Vi(t).toVar(),n=ji(e).toVar(),o=Oi().toVar(),a=Oi().toVar(),u=Oi().toVar(),l=ji(nb(n.x,o),nb(n.y,a),nb(n.z,u)).toVar(),d=Vi(1e6).toVar();return Nc({start:-1,end:Oi(1),name:"x",condition:"<="},(({x:e})=>{Nc({start:-1,end:Oi(1),name:"y",condition:"<="},(({y:t})=>{Nc({start:-1,end:Oi(1),name:"z",condition:"<="},(({z:r})=>{const n=Vi(Ub(l,e,t,r,o,a,u,i,s)).toVar();d.assign(oa(d,n))}))}))})),Ii(s.equal(Oi(0)),(()=>{d.assign(Po(d))})),d})).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),Vb=Hm([Ib,Fi((([e,t,r])=>{const s=Oi(r).toVar(),i=Vi(t).toVar(),n=ji(e).toVar(),o=Oi().toVar(),a=Oi().toVar(),u=Oi().toVar(),l=ji(nb(n.x,o),nb(n.y,a),nb(n.z,u)).toVar(),d=zi(1e6,1e6).toVar();return Nc({start:-1,end:Oi(1),name:"x",condition:"<="},(({x:e})=>{Nc({start:-1,end:Oi(1),name:"y",condition:"<="},(({y:t})=>{Nc({start:-1,end:Oi(1),name:"z",condition:"<="},(({z:r})=>{const n=Vi(Ub(l,e,t,r,o,a,u,i,s)).toVar();Ii(n.lessThan(d.x),(()=>{d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.y.assign(n)}))}))}))})),Ii(s.equal(Oi(0)),(()=>{d.assign(Po(d))})),d})).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),Ob=Hm([Lb,Fi((([e,t,r])=>{const s=Oi(r).toVar(),i=Vi(t).toVar(),n=ji(e).toVar(),o=Oi().toVar(),a=Oi().toVar(),u=Oi().toVar(),l=ji(nb(n.x,o),nb(n.y,a),nb(n.z,u)).toVar(),d=ji(1e6,1e6,1e6).toVar();return Nc({start:-1,end:Oi(1),name:"x",condition:"<="},(({x:e})=>{Nc({start:-1,end:Oi(1),name:"y",condition:"<="},(({y:t})=>{Nc({start:-1,end:Oi(1),name:"z",condition:"<="},(({z:r})=>{const n=Vi(Ub(l,e,t,r,o,a,u,i,s)).toVar();Ii(n.lessThan(d.x),(()=>{d.z.assign(d.y),d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.z.assign(d.y),d.y.assign(n)})).ElseIf(n.lessThan(d.z),(()=>{d.z.assign(n)}))}))}))})),Ii(s.equal(Oi(0)),(()=>{d.assign(Po(d))})),d})).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),Gb=Fi((([e])=>{const t=e.y,r=e.z,s=ji().toVar();return Ii(t.lessThan(1e-4),(()=>{s.assign(ji(r,r,r))})).Else((()=>{let i=e.x;i=i.sub(Lo(i)).mul(6).toVar();const n=Oi(ta(i)),o=i.sub(Vi(n)),a=r.mul(t.oneMinus()),u=r.mul(t.mul(o).oneMinus()),l=r.mul(t.mul(o.oneMinus()).oneMinus());Ii(n.equal(Oi(0)),(()=>{s.assign(ji(r,l,a))})).ElseIf(n.equal(Oi(1)),(()=>{s.assign(ji(u,r,a))})).ElseIf(n.equal(Oi(2)),(()=>{s.assign(ji(a,r,l))})).ElseIf(n.equal(Oi(3)),(()=>{s.assign(ji(a,u,r))})).ElseIf(n.equal(Oi(4)),(()=>{s.assign(ji(l,a,r))})).Else((()=>{s.assign(ji(r,a,u))}))})),s})).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),kb=Fi((([e])=>{const t=ji(e).toVar(),r=Vi(t.x).toVar(),s=Vi(t.y).toVar(),i=Vi(t.z).toVar(),n=Vi(oa(r,oa(s,i))).toVar(),o=Vi(aa(r,aa(s,i))).toVar(),a=Vi(o.sub(n)).toVar(),u=Vi().toVar(),l=Vi().toVar(),d=Vi().toVar();return d.assign(o),Ii(o.greaterThan(0),(()=>{l.assign(a.div(o))})).Else((()=>{l.assign(0)})),Ii(l.lessThanEqual(0),(()=>{u.assign(0)})).Else((()=>{Ii(r.greaterThanEqual(o),(()=>{u.assign(s.sub(i).div(a))})).ElseIf(s.greaterThanEqual(o),(()=>{u.assign(Zn(2,i.sub(r).div(a)))})).Else((()=>{u.assign(Zn(4,r.sub(s).div(a)))})),u.mulAssign(1/6),Ii(u.lessThan(0),(()=>{u.addAssign(1)}))})),ji(u,l,d)})).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),zb=Fi((([e])=>{const t=ji(e).toVar(),r=Ki(oo(t,ji(.04045))).toVar(),s=ji(t.div(12.92)).toVar(),i=ji(ma(aa(t.add(ji(.055)),ji(0)).div(1.055),ji(2.4))).toVar();return va(s,i,r)})).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),$b=(e,t)=>{e=Vi(e),t=Vi(t);const r=zi(t.dFdx(),t.dFdy()).length().mul(.7071067811865476);return Aa(e.sub(r),e.add(r),t)},Wb=(e,t,r,s)=>va(e,t,r[s].clamp()),Hb=(e,t,r,s,i)=>va(e,t,$b(r,s[i])),jb=Fi((([e,t,r])=>{const s=Vo(e).toVar("nDir"),i=Jn(Vi(.5).mul(t.sub(r)),Tl).div(s).toVar("rbmax"),n=Jn(Vi(-.5).mul(t.sub(r)),Tl).div(s).toVar("rbmin"),o=ji().toVar("rbminmax");o.x=s.x.greaterThan(Vi(0)).select(i.x,n.x),o.y=s.y.greaterThan(Vi(0)).select(i.y,n.y),o.z=s.z.greaterThan(Vi(0)).select(i.z,n.z);const a=oa(oa(o.x,o.y),o.z).toVar("correction");return Tl.add(s.mul(a)).toVar("boxIntersection").sub(r)})),qb=Fi((([e,t])=>{const r=e.x,s=e.y,i=e.z;let n=t.element(0).mul(.886227);return n=n.add(t.element(1).mul(1.023328).mul(s)),n=n.add(t.element(2).mul(1.023328).mul(i)),n=n.add(t.element(3).mul(1.023328).mul(r)),n=n.add(t.element(4).mul(.858086).mul(r).mul(s)),n=n.add(t.element(5).mul(.858086).mul(s).mul(i)),n=n.add(t.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),n=n.add(t.element(7).mul(.858086).mul(r).mul(i)),n=n.add(t.element(8).mul(.429043).mul(eo(r,r).sub(eo(s,s)))),n}));var Xb=Object.freeze({__proto__:null,BRDF_GGX:ip,BRDF_Lambert:$h,BasicShadowFilter:Mx,Break:Sc,Const:$a,Continue:()=>Ru("continue").append(),DFGApprox:np,D_GGX:tp,Discard:Au,EPSILON:vo,F_Schlick:zh,Fn:Fi,INFINITY:No,If:Ii,Loop:Nc,NodeAccess:Us,NodeShaderStage:Ms,NodeType:Fs,NodeUpdateType:Bs,PCFShadowFilter:Bx,PCFSoftShadowFilter:Fx,PI:So,PI2:Ro,Return:()=>Ru("return").append(),Schlick_to_F0:ap,ScriptableNodeResources:Iy,ShaderNode:Ai,TBNViewMatrix:ld,VSMShadowFilter:Ux,V_GGX_SmithCorrelated:Jh,Var:za,abs:jo,acesFilmicToneMapping:_y,acos:Wo,add:Zn,addMethodChaining:ei,addNodeElement:function(e){console.warn("THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add",e)},agxToneMapping:Ry,all:Ao,alphaT:Mn,and:lo,anisotropy:Bn,anisotropyB:Un,anisotropyT:Fn,any:Eo,append:Li,array:an,arrayBuffer:e=>Ei(new Ys(e,"ArrayBuffer")),asin:$o,assign:Xn,atan:Ho,atan2:Ba,atomicAdd:(e,t,r=null)=>ix(rx.ATOMIC_ADD,e,t,r),atomicAnd:(e,t,r=null)=>ix(rx.ATOMIC_AND,e,t,r),atomicFunc:ix,atomicLoad:(e,t=null)=>ix(rx.ATOMIC_LOAD,e,null,t),atomicMax:(e,t,r=null)=>ix(rx.ATOMIC_MAX,e,t,r),atomicMin:(e,t,r=null)=>ix(rx.ATOMIC_MIN,e,t,r),atomicOr:(e,t,r=null)=>ix(rx.ATOMIC_OR,e,t,r),atomicStore:(e,t,r=null)=>ix(rx.ATOMIC_STORE,e,t,r),atomicSub:(e,t,r=null)=>ix(rx.ATOMIC_SUB,e,t,r),atomicXor:(e,t,r=null)=>ix(rx.ATOMIC_XOR,e,t,r),attenuationColor:Hn,attenuationDistance:Wn,attribute:Mu,attributeArray:(e,t="float")=>{let r,s;!0===t.isStruct?(r=t.layout.getLength(),s=vs("float")):(r=Ns(t),s=vs(t));const i=new Bf(e,r,s);return If(i,t,e)},backgroundBlurriness:zf,backgroundIntensity:$f,backgroundRotation:Wf,batch:xc,billboarding:Qm,bitAnd:go,bitNot:mo,bitOr:fo,bitXor:yo,bitangentGeometry:sd,bitangentLocal:id,bitangentView:nd,bitangentWorld:od,bitcast:ia,blendBurn:Jf,blendColor:sy,blendDodge:ey,blendOverlay:ry,blendScreen:ty,blur:ng,bool:ki,buffer:Gu,bufferAttribute:cu,bumpMap:xd,burn:(...e)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),Jf(e)),bvec2:Hi,bvec3:Ki,bvec4:Ji,bypass:Tu,cache:xu,call:Yn,cameraFar:ju,cameraIndex:Wu,cameraNear:Hu,cameraNormalMatrix:Qu,cameraPosition:Zu,cameraProjectionMatrix:qu,cameraProjectionMatrixInverse:Xu,cameraViewMatrix:Ku,cameraWorldMatrix:Yu,cbrt:Ta,cdl:ly,ceil:Do,checker:eb,cineonToneMapping:by,clamp:Na,clearcoat:Nn,clearcoatRoughness:Sn,code:Cy,color:Di,colorSpaceToWorking:ru,colorToDirection:e=>Ei(e).mul(2).sub(1),compute:fu,cond:La,context:Va,convert:nn,convertColorSpace:(e,t,r)=>Ei(new Za(Ei(e),t,r)),convertToTexture:(e,...t)=>e.isTextureNode?e:e.isPassNode?e.getTextureNode():Af(e,...t),cos:ko,cross:ga,cubeTexture:$l,dFdx:Qo,dFdy:Zo,dashSize:Vn,defaultBuildStages:Is,defaultShaderStages:Ps,defined:Si,degrees:wo,deltaTime:qm,densityFog:function(e,t){return console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.'),ky(e,Gy(t))},densityFogFactor:Gy,depth:ah,depthPass:(e,t,r)=>Ei(new my(my.DEPTH,e,t,r)),difference:ha,diffuseColor:bn,directPointLight:Zx,directionToColor:Rh,dispersion:jn,distance:ca,div:to,dodge:(...e)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),ey(e)),dot:pa,drawIndex:hc,dynamicBufferAttribute:hu,element:sn,emissive:Tn,equal:so,equals:na,equirectUV:wh,exp:Mo,exp2:Bo,expression:Ru,faceDirection:Al,faceForward:Ea,faceforward:Fa,float:Vi,floor:Lo,fog:ky,fract:Oo,frameGroup:cn,frameId:Xm,frontFacing:Rl,fwidth:ra,gain:(e,t)=>e.lessThan(.5)?Om(e.mul(2),t).div(2):Jn(1,Om(eo(Jn(1,e),2),t).div(2)),gapSize:On,getConstNodeType:Ri,getCurrentStack:Pi,getDirection:tg,getDistanceAttenuation:zx,getGeometryRoughness:Qh,getNormalFromDepth:wf,getParallaxCorrectNormal:jb,getRoughness:Zh,getScreenPosition:Cf,getShIrradianceAt:qb,getTextureIndex:Im,getViewPosition:Ef,globalId:Yy,glsl:(e,t)=>Cy(e,t,"glsl"),glslFn:(e,t)=>My(e,t,"glsl"),grayscale:iy,greaterThan:oo,greaterThanEqual:uo,hash:Vm,highpModelNormalViewMatrix:fl,highpModelViewMatrix:ml,hue:ay,instance:gc,instanceIndex:uc,instancedArray:(e,t="float")=>{let r,s;!0===t.isStruct?(r=t.layout.getLength(),s=vs("float")):(r=Ns(t),s=vs(t));const i=new Mf(e,r,s);return If(i,t,e)},instancedBufferAttribute:pu,instancedDynamicBufferAttribute:gu,instancedMesh:fc,int:Oi,inverseSqrt:Io,inversesqrt:Ua,invocationLocalIndex:cc,invocationSubgroupIndex:dc,ior:kn,iridescence:En,iridescenceIOR:Cn,iridescenceThickness:wn,ivec2:$i,ivec3:qi,ivec4:Qi,js:(e,t)=>Cy(e,t,"js"),label:Oa,length:Xo,lengthSq:_a,lessThan:no,lessThanEqual:ao,lightPosition:lx,lightProjectionUV:ux,lightShadowMatrix:ax,lightTargetDirection:hx,lightTargetPosition:dx,lightViewPosition:cx,lightingContext:Uc,lights:(e=[])=>Ei(new mx).setLights(e),linearDepth:uh,linearToneMapping:yy,localId:Qy,log:Fo,log2:Uo,logarithmicDepthToViewZ:(e,t,r)=>{const s=e.mul(Fo(r.div(t)));return Vi(Math.E).pow(s).mul(t).negate()},loop:(...e)=>(console.warn("TSL.LoopNode: loop() has been renamed to Loop()."),Nc(...e)),luminance:uy,mat2:en,mat3:tn,mat4:rn,matcapUV:Ag,materialAO:sc,materialAlphaTest:_d,materialAnisotropy:Gd,materialAnisotropyVector:ic,materialAttenuationColor:Xd,materialAttenuationDistance:qd,materialClearcoat:Pd,materialClearcoatNormal:Ld,materialClearcoatRoughness:Id,materialColor:vd,materialDispersion:tc,materialEmissive:Sd,materialIOR:jd,materialIridescence:kd,materialIridescenceIOR:zd,materialIridescenceThickness:$d,materialLightMap:rc,materialLineDashOffset:Jd,materialLineDashSize:Yd,materialLineGapSize:Qd,materialLineScale:Kd,materialLineWidth:Zd,materialMetalness:Fd,materialNormal:Ud,materialOpacity:Rd,materialPointSize:ec,materialReference:Kl,materialReflectivity:Md,materialRefractionRatio:Dl,materialRotation:Dd,materialRoughness:Bd,materialSheen:Vd,materialSheenRoughness:Od,materialShininess:Nd,materialSpecular:Ad,materialSpecularColor:Cd,materialSpecularIntensity:Ed,materialSpecularStrength:wd,materialThickness:Hd,materialTransmission:Wd,max:aa,maxMipLevel:Iu,mediumpModelViewMatrix:gl,metalness:vn,min:oa,mix:va,mixElement:wa,mod:ua,modInt:ro,modelDirection:ol,modelNormalMatrix:cl,modelPosition:ul,modelScale:ll,modelViewMatrix:pl,modelViewPosition:dl,modelViewProjection:nc,modelWorldMatrix:al,modelWorldMatrixInverse:hl,morphReference:wc,mrt:Dm,mul:eo,mx_aastep:$b,mx_cell_noise_float:(e=Bu())=>Eb(e.convert("vec2|vec3")),mx_contrast:(e,t=1,r=.5)=>Vi(e).sub(r).mul(t).add(r),mx_fractal_noise_float:(e=Bu(),t=3,r=2,s=.5,i=1)=>wb(e,Oi(t),r,s).mul(i),mx_fractal_noise_vec2:(e=Bu(),t=3,r=2,s=.5,i=1)=>Bb(e,Oi(t),r,s).mul(i),mx_fractal_noise_vec3:(e=Bu(),t=3,r=2,s=.5,i=1)=>Mb(e,Oi(t),r,s).mul(i),mx_fractal_noise_vec4:(e=Bu(),t=3,r=2,s=.5,i=1)=>Fb(e,Oi(t),r,s).mul(i),mx_hsvtorgb:Gb,mx_noise_float:(e=Bu(),t=1,r=0)=>Rb(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec3:(e=Bu(),t=1,r=0)=>Ab(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec4:(e=Bu(),t=1,r=0)=>{e=e.convert("vec2|vec3");return Yi(Ab(e),Rb(e.add(zi(19,73)))).mul(t).add(r)},mx_ramplr:(e,t,r=Bu())=>Wb(e,t,r,"x"),mx_ramptb:(e,t,r=Bu())=>Wb(e,t,r,"y"),mx_rgbtohsv:kb,mx_safepower:(e,t=1)=>(e=Vi(e)).abs().pow(t).mul(e.sign()),mx_splitlr:(e,t,r,s=Bu())=>Hb(e,t,r,s,"x"),mx_splittb:(e,t,r,s=Bu())=>Hb(e,t,r,s,"y"),mx_srgb_texture_to_lin_rec709:zb,mx_transform_uv:(e=1,t=0,r=Bu())=>r.mul(e).add(t),mx_worley_noise_float:(e=Bu(),t=1)=>Db(e.convert("vec2|vec3"),t,Oi(1)),mx_worley_noise_vec2:(e=Bu(),t=1)=>Vb(e.convert("vec2|vec3"),t,Oi(1)),mx_worley_noise_vec3:(e=Bu(),t=1)=>Ob(e.convert("vec2|vec3"),t,Oi(1)),negate:Ko,neutralToneMapping:Ay,nodeArray:wi,nodeImmutable:Bi,nodeObject:Ei,nodeObjects:Ci,nodeProxy:Mi,normalFlat:wl,normalGeometry:El,normalLocal:Cl,normalMap:gd,normalView:Ml,normalWorld:Bl,normalize:Vo,not:ho,notEqual:io,numWorkgroups:Xy,objectDirection:el,objectGroup:pn,objectPosition:rl,objectScale:sl,objectViewPosition:il,objectWorldMatrix:tl,oneMinus:Yo,or:co,orthographicDepthToViewZ:(e,t,r)=>t.sub(r).mul(e).sub(t),oscSawtooth:(e=jm)=>e.fract(),oscSine:(e=jm)=>e.add(.75).mul(2*Math.PI).sin().mul(.5).add(.5),oscSquare:(e=jm)=>e.fract().round(),oscTriangle:(e=jm)=>e.add(.5).fract().mul(2).sub(1).abs(),output:Dn,outputStruct:Pm,overlay:(...e)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),ry(e)),overloadingFn:Hm,parabola:Om,parallaxDirection:dd,parallaxUV:(e,t)=>e.sub(dd.mul(t)),parameter:(e,t)=>Ei(new Cm(e,t)),pass:(e,t,r)=>Ei(new my(my.COLOR,e,t,r)),passTexture:(e,t)=>Ei(new py(e,t)),pcurve:(e,t,r)=>ma(to(ma(e,t),Zn(ma(e,t),ma(Jn(1,e),r))),1/t),perspectiveDepthToViewZ:ih,pmremTexture:dg,pointUV:Vf,pointWidth:Gn,positionGeometry:yl,positionLocal:xl,positionPrevious:bl,positionView:vl,positionViewDirection:Nl,positionWorld:Tl,positionWorldDirection:_l,posterize:cy,pow:ma,pow2:fa,pow3:ya,pow4:xa,property:yn,radians:Co,rand:Ca,range:Hy,rangeFog:function(e,t,r){return console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.'),ky(e,Oy(t,r))},rangeFogFactor:Oy,reciprocal:ea,reference:jl,referenceBuffer:ql,reflect:da,reflectVector:Gl,reflectView:Vl,reflector:e=>Ei(new xf(e)),refract:Ra,refractVector:kl,refractView:Ol,reinhardToneMapping:xy,remainder:To,remap:vu,remapClamp:Nu,renderGroup:hn,renderOutput:Cu,rendererReference:ou,rotate:Mg,rotateUV:Km,roughness:_n,round:Jo,rtt:Af,sRGBTransferEOTF:Xa,sRGBTransferOETF:Ka,sampler:e=>(!0===e.isNode?e:Du(e)).convert("sampler"),saturate:Sa,saturation:ny,screen:(...e)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),ty(e)),screenCoordinate:Gc,screenSize:Oc,screenUV:Vc,scriptable:Dy,scriptableValue:Fy,select:Ia,setCurrentStack:Ui,shaderStages:Ls,shadow:Gx,shadowPositionWorld:yx,shapeCircle:tb,sharedUniformGroup:dn,sheen:Rn,sheenRoughness:An,shiftLeft:xo,shiftRight:bo,shininess:Ln,sign:qo,sin:Go,sinc:(e,t)=>Go(So.mul(t.mul(e).sub(1))).div(So.mul(t.mul(e).sub(1))),skinning:e=>Ei(new Tc(e)),skinningReference:_c,smoothstep:Aa,smoothstepElement:Ma,specularColor:Pn,specularF90:In,spherizeUV:Ym,split:(e,t)=>Ei(new Hs(Ei(e),t)),spritesheetUV:ef,sqrt:Po,stack:Mm,step:la,storage:If,storageBarrier:()=>Jy("storage").append(),storageObject:(e,t,r)=>(console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.'),If(e,t,r).setPBO(!0)),storageTexture:jf,string:(e="")=>Ei(new Ys(e,"string")),struct:(e,t=null)=>{const r=new Bm(e,t),s=(...t)=>{let s=null;if(t.length>0)if(t[0].isNode){s={};const r=Object.keys(e);for(let e=0;e<t.length;e++)s[r[e]]=t[e]}else s=t[0];return Ei(new Fm(r,s))};return s.layout=r,s.isStruct=!0,s},sub:Jn,subgroupIndex:lc,subgroupSize:Zy,tan:zo,tangentGeometry:Yl,tangentLocal:Ql,tangentView:Zl,tangentWorld:Jl,temp:Wa,texture:Du,texture3D:Gg,textureBarrier:()=>Jy("texture").append(),textureBicubic:Rp,textureCubeUV:rg,textureLoad:Vu,textureSize:Uu,textureStore:(e,t,r)=>{const s=jf(e,t,r);return null!==r&&s.append(),s},thickness:$n,time:jm,timerDelta:(e=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),qm.mul(e)),timerGlobal:(e=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),jm.mul(e)),timerLocal:(e=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),jm.mul(e)),toOutputColorSpace:Ja,toWorkingColorSpace:eu,toneMapping:uu,toneMappingExposure:lu,toonOutlinePass:(t,r,s=new e(0,0,0),i=.003,n=1)=>Ei(new fy(t,r,Ei(s),Ei(i),Ei(n))),transformDirection:ba,transformNormal:Il,transformNormalToView:Ll,transformedBentNormalView:cd,transformedBitangentView:ad,transformedBitangentWorld:ud,transformedClearcoatNormalView:Pl,transformedNormalView:Fl,transformedNormalWorld:Ul,transformedTangentView:ed,transformedTangentWorld:td,transmission:zn,transpose:sa,triNoise3D:zm,triplanarTexture:(...e)=>rf(...e),triplanarTextures:rf,trunc:ta,tslFn:(...e)=>(console.warn("TSL.ShaderNode: tslFn() has been renamed to Fn()."),Fi(...e)),uint:Gi,uniform:mn,uniformArray:$u,uniformGroup:ln,uniforms:(e,t)=>(console.warn("TSL.UniformArrayNode: uniforms() has been renamed to uniformArray()."),Ei(new zu(e,t))),userData:(e,t,r)=>Ei(new qf(e,t,r)),uv:Bu,uvec2:Wi,uvec3:Xi,uvec4:Zi,varying:ja,varyingProperty:xn,vec2:zi,vec3:ji,vec4:Yi,vectorComponents:Ds,velocity:Zf,vertexColor:e=>Ei(new Lf(e)),vertexIndex:ac,vertexStage:qa,vibrance:oy,viewZToLogarithmicDepth:nh,viewZToOrthographicDepth:rh,viewZToPerspectiveDepth:sh,viewport:kc,viewportBottomLeft:qc,viewportCoordinate:$c,viewportDepthTexture:eh,viewportLinearDepth:lh,viewportMipTexture:Qc,viewportResolution:Hc,viewportSafeUV:Zm,viewportSharedTexture:vh,viewportSize:zc,viewportTexture:Yc,viewportTopLeft:jc,viewportUV:Wc,wgsl:(e,t)=>Cy(e,t,"wgsl"),wgslFn:(e,t)=>My(e,t,"wgsl"),workgroupArray:(e,t)=>Ei(new tx("Workgroup",e,t)),workgroupBarrier:()=>Jy("workgroup").append(),workgroupId:Ky,workingToColorSpace:tu,xor:po});const Kb=new Em;class Yb extends Xg{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,r){const s=this.renderer,i=this.nodes.getBackgroundNode(e)||e.background;let n=!1;if(null===i)s._clearColor.getRGB(Kb,Ce),Kb.a=s._clearColor.a;else if(!0===i.isColor)i.getRGB(Kb,Ce),Kb.a=1,n=!0;else if(!0===i.isNode){const r=this.get(e),n=i;Kb.copy(s._clearColor);let o=r.backgroundMesh;if(void 0===o){const e=Va(Yi(n).mul($f),{getUV:()=>Wf.mul(Bl),getTextureLevel:()=>zf});let t=nc;t=t.setZ(t.w);const s=new mh;s.name="Background.material",s.side=_,s.depthTest=!1,s.depthWrite=!1,s.fog=!1,s.lights=!1,s.vertexNode=t,s.colorNode=e,r.backgroundMeshNode=e,r.backgroundMesh=o=new k(new Ue(1,32,32),s),o.frustumCulled=!1,o.name="Background.mesh",o.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)}}const a=n.getCacheKey();r.backgroundCacheKey!==a&&(r.backgroundMeshNode.node=Yi(n).mul($f),r.backgroundMeshNode.needsUpdate=!0,o.material.needsUpdate=!0,r.backgroundCacheKey=a),t.unshift(o,o.geometry,o.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",i);const o=s.xr.getEnvironmentBlendMode();if("additive"===o?Kb.set(0,0,0,1):"alpha-blend"===o&&Kb.set(0,0,0,0),!0===s.autoClear||!0===n){const e=r.clearColorValue;e.r=Kb.r,e.g=Kb.g,e.b=Kb.b,e.a=Kb.a,!0!==s.backend.isWebGLBackend&&!0!==s.alpha||(e.r*=e.a,e.g*=e.a,e.b*=e.a),r.depthClearValue=s._clearDepth,r.stencilClearValue=s._clearStencil,r.clearColor=!0===s.autoClearColor,r.clearDepth=!0===s.autoClearDepth,r.clearStencil=!0===s.autoClearStencil}else r.clearColor=!1,r.clearDepth=!1,r.clearStencil=!1}}let Qb=0;class Zb{constructor(e="",t=[],r=0,s=[]){this.name=e,this.bindings=t,this.index=r,this.bindingsReference=s,this.id=Qb++}}class Jb{constructor(e,t,r,s,i,n,o,a,u,l=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=r,this.transforms=l,this.nodeAttributes=s,this.bindings=i,this.updateNodes=n,this.updateBeforeNodes=o,this.updateAfterNodes=a,this.observer=u,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){if(!0!==t.bindings[0].groupNode.shared){const r=new Zb(t.name,[],t.index,t);e.push(r);for(const e of t.bindings)r.bindings.push(e.clone())}else e.push(t)}return e}}class eT{constructor(e,t,r=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=r}}class tT{constructor(e,t,r){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=r.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class rT{constructor(e,t,r=!1,s=null){this.isNodeVar=!0,this.name=e,this.type=t,this.readOnly=r,this.count=s}}class sT extends rT{constructor(e,t){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0}}class iT{constructor(e,t,r=""){this.name=e,this.type=t,this.code=r,Object.defineProperty(this,"isNodeCode",{value:!0})}}let nT=0;class oT{constructor(e=null){this.id=nT++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return void 0===t&&null!==this.parent&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class aT{constructor(e,t){this.name=e,this.members=t,this.output=!1}}class uT{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class lT extends uT{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class dT extends uT{constructor(e,r=new t){super(e,r),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class cT extends uT{constructor(e,t=new r){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class hT extends uT{constructor(e,t=new s){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class pT extends uT{constructor(t,r=new e){super(t,r),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class gT extends uT{constructor(e,t=new i){super(e,t),this.isMatrix2Uniform=!0,this.boundary=16,this.itemSize=4}}class mT extends uT{constructor(e,t=new n){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class fT extends uT{constructor(e,t=new o){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class yT extends lT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class xT extends dT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class bT extends cT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class TT extends hT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class _T extends pT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class vT extends gT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class NT extends mT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class ST extends fT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}const RT=[.125,.215,.35,.446,.526,.582],AT=20,ET=new ve(-1,1,1,-1,0,1),CT=new Ie(90,1),wT=new e;let MT=null,BT=0,FT=0;const UT=(1+Math.sqrt(5))/2,PT=1/UT,IT=[new r(-UT,PT,0),new r(UT,PT,0),new r(-PT,0,UT),new r(PT,0,UT),new r(0,UT,-PT),new r(0,UT,PT),new r(-1,1,-1),new r(1,1,-1),new r(-1,1,1),new r(1,1,1)],LT=new WeakMap,DT=[3,1,5,0,4,2],VT=tg(Bu(),Mu("faceIndex")).normalize(),OT=ji(VT.x,VT.y,VT.z);class GT{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,r=.1,s=100,i=null){if(this._setSize(256),!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const n=i||this._allocateTargets();return this.fromSceneAsync(e,t,r,s,n),n}MT=this._renderer.getRenderTarget(),BT=this._renderer.getActiveCubeFace(),FT=this._renderer.getActiveMipmapLevel();const n=i||this._allocateTargets();return n.depthBuffer=!0,this._sceneToCubeUV(e,r,s,n),t>0&&this._blur(n,0,0,t),this._applyPMREM(n),this._cleanup(n),n}async fromSceneAsync(e,t=0,r=.1,s=100,i=null){return!1===this._hasInitialized&&await this._renderer.init(),this.fromScene(e,t,r,s,i)}fromEquirectangular(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromEquirectangularAsync(e,r),r}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromCubemapAsync(e,t),r}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=WT(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=HT(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose(),null!==this._backgroundBox&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===v||e.mapping===N?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(MT,BT,FT),e.scissorTest=!1,zT(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),MT=this._renderer.getRenderTarget(),BT=this._renderer.getActiveCubeFace(),FT=this._renderer.getActiveMipmapLevel();const r=t||this._allocateTargets();return this._textureToCubeUV(e,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,s={magFilter:$,minFilter:$,generateMipmaps:!1,type:Te,format:Le,colorSpace:Ce},i=kT(e,t,s);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=kT(e,t,s);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=function(e){const t=[],r=[],s=[],i=[];let n=e;const o=e-4+1+RT.length;for(let a=0;a<o;a++){const o=Math.pow(2,n);r.push(o);let u=1/o;a>e-4?u=RT[a-e+4-1]:0===a&&(u=0),s.push(u);const l=1/(o-2),d=-l,c=1+l,h=[d,d,c,d,c,c,d,d,c,c,d,c],p=6,g=6,m=3,f=2,y=1,x=new Float32Array(m*g*p),b=new Float32Array(f*g*p),T=new Float32Array(y*g*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,r=e>2?0:-1,s=[t,r,0,t+2/3,r,0,t+2/3,r+1,0,t,r,0,t+2/3,r+1,0,t,r+1,0],i=DT[e];x.set(s,m*g*i),b.set(h,f*g*i);const n=[i,i,i,i,i,i];T.set(n,y*g*i)}const _=new Ne;_.setAttribute("position",new Re(x,m)),_.setAttribute("uv",new Re(b,f)),_.setAttribute("faceIndex",new Re(T,y)),t.push(_),i.push(new k(_,null)),n>4&&n--}return{lodPlanes:t,sizeLods:r,sigmas:s,lodMeshes:i}}(i)),this._blurMaterial=function(e,t,s){const i=$u(new Array(AT).fill(0)),n=mn(new r(0,1,0)),o=mn(0),a=Vi(AT),u=mn(0),l=mn(1),d=Du(null),c=mn(0),h=Vi(1/t),p=Vi(1/s),g=Vi(e),m={n:a,latitudinal:u,weights:i,poleAxis:n,outputDirection:OT,dTheta:o,samples:l,envMap:d,mipInt:c,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:p,CUBEUV_MAX_MIP:g},f=$T("blur");return f.fragmentNode=ng({...m,latitudinal:u.equal(1)}),LT.set(f,m),f}(i,e,t)}return i}async _compileMaterial(e){const t=new k(this._lodPlanes[0],e);await this._renderer.compile(t,ET)}_sceneToCubeUV(e,t,r,s){const i=CT;i.near=t,i.far=r;const n=[1,1,1,1,-1,1],o=[1,-1,1,-1,1,-1],a=this._renderer,u=a.autoClear;a.getClearColor(wT),a.autoClear=!1;let l=this._backgroundBox;if(null===l){const e=new Q({name:"PMREM.Background",side:_,depthWrite:!1,depthTest:!1});l=new k(new G,e)}let d=!1;const c=e.background;c?c.isColor&&(l.material.color.copy(c),e.background=null,d=!0):(l.material.color.copy(wT),d=!0),a.setRenderTarget(s),a.clear(),d&&a.render(l,i);for(let t=0;t<6;t++){const r=t%3;0===r?(i.up.set(0,n[t],0),i.lookAt(o[t],0,0)):1===r?(i.up.set(0,0,n[t]),i.lookAt(0,o[t],0)):(i.up.set(0,n[t],0),i.lookAt(0,0,o[t]));const u=this._cubeSize;zT(s,r*u,t>2?u:0,u,u),a.render(e,i)}a.autoClear=u,e.background=c}_textureToCubeUV(e,t){const r=this._renderer,s=e.mapping===v||e.mapping===N;s?null===this._cubemapMaterial&&(this._cubemapMaterial=WT(e)):null===this._equirectMaterial&&(this._equirectMaterial=HT(e));const i=s?this._cubemapMaterial:this._equirectMaterial;i.fragmentNode.value=e;const n=this._lodMeshes[0];n.material=i;const o=this._cubeSize;zT(t,0,0,3*o,2*o),r.setRenderTarget(t),r.render(n,ET)}_applyPMREM(e){const t=this._renderer,r=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let t=1;t<s;t++){const r=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=IT[(s-t-1)%IT.length];this._blur(e,t-1,t,r,i)}t.autoClear=r}_blur(e,t,r,s,i){const n=this._pingPongRenderTarget;this._halfBlur(e,n,t,r,s,"latitudinal",i),this._halfBlur(n,e,r,r,s,"longitudinal",i)}_halfBlur(e,t,r,s,i,n,o){const a=this._renderer,u=this._blurMaterial;"latitudinal"!==n&&"longitudinal"!==n&&console.error("blur direction must be either latitudinal or longitudinal!");const l=this._lodMeshes[s];l.material=u;const d=LT.get(u),c=this._sizeLods[r]-1,h=isFinite(i)?Math.PI/(2*c):2*Math.PI/39,p=i/h,g=isFinite(i)?1+Math.floor(3*p):AT;g>AT&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${g} samples when the maximum is set to 20`);const m=[];let f=0;for(let e=0;e<AT;++e){const t=e/p,r=Math.exp(-t*t/2);m.push(r),0===e?f+=r:e<g&&(f+=2*r)}for(let e=0;e<m.length;e++)m[e]=m[e]/f;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=g,d.weights.array=m,d.latitudinal.value="latitudinal"===n?1:0,o&&(d.poleAxis.value=o);const{_lodMax:y}=this;d.dTheta.value=h,d.mipInt.value=y-r;const x=this._sizeLods[s];zT(t,3*x*(s>y-4?s-y+4:0),4*(this._cubeSize-x),3*x,2*x),a.setRenderTarget(t),a.render(l,ET)}}function kT(e,t,r){const s=new ye(e,t,r);return s.texture.mapping=Pe,s.texture.name="PMREM.cubeUv",s.texture.isPMREMTexture=!0,s.scissorTest=!0,s}function zT(e,t,r,s,i){e.viewport.set(t,r,s,i),e.scissor.set(t,r,s,i)}function $T(e){const t=new mh;return t.depthTest=!1,t.depthWrite=!1,t.blending=D,t.name=`PMREM_${e}`,t}function WT(e){const t=$T("cubemap");return t.fragmentNode=$l(e,OT),t}function HT(e){const t=$T("equirect");return t.fragmentNode=Du(e,wh(OT),0),t}const jT=new WeakMap,qT=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),XT=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e))+(e%1?"":".0");class KT{constructor(e,t,r){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=r,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.observer=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=Mm(),this.stacks=[],this.tab="\t",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new oT,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let e=jT.get(this.renderer);return void 0===e&&(e=new $g,jT.set(this.renderer,e)),e}createRenderTarget(e,t,r){return new ye(e,t,r)}createCubeRenderTarget(e,t){return new Mh(e,t)}createPMREMGenerator(){return new GT(this.renderer)}includes(e){return this.nodes.includes(e)}getOutputStructName(){}_getBindGroup(e,t){const r=this.getBindGroupsCache(),s=[];let i,n=!0;for(const e of t)s.push(e),n=n&&!0!==e.groupNode.shared;return n?(i=r.get(s),void 0===i&&(i=new Zb(e,s,this.bindingsIndexes[e].group,s),r.set(s,i))):i=new Zb(e,s,this.bindingsIndexes[e].group,s),i}getBindGroupArray(e,t){const r=this.bindings[t];let s=r[e];return void 0===s&&(void 0===this.bindingsIndexes[e]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),r[e]=s=[]),s}getBindings(){let e=this.bindGroups;if(null===e){const t={},r=this.bindings;for(const e of Ls)for(const s in r[e]){const i=r[e][s];(t[s]||(t[s]=[])).push(...i)}e=[];for(const r in t){const s=t[r],i=this._getBindGroup(r,s);e.push(i)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort(((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order));for(let t=0;t<e.length;t++){const r=e[t];this.bindingsIndexes[r.name].group=t,r.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){!1===this.nodes.includes(e)&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){!1===this.sequentialNodes.includes(e)&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){e.getUpdateType()!==Bs.NONE&&this.updateNodes.push(e.getSelf())}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),r=e.getUpdateAfterType();t!==Bs.NONE&&this.updateBeforeNodes.push(e.getSelf()),r!==Bs.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===$||e.magFilter===De||e.magFilter===Ve||e.magFilter===B||e.minFilter===$||e.minFilter===De||e.minFilter===Ve||e.minFilter===B}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return this.context,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const r=this.getDataFromNode(e);return void 0===r.cache&&(r.cache=new oT(t?this.getCache():null)),r.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=void 0===t.usageCount?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateArrayDeclaration(e,t){return this.getType(e)+"[ "+t+" ]"}generateArray(e,t,r=null){let s=this.generateArrayDeclaration(e,t)+"( ";for(let i=0;i<t;i++){const n=r?r[i]:null;s+=null!==n?n.build(this,e):this.generateConst(e),i<t-1&&(s+=", ")}return s+=" )",s}generateStruct(e,t,r=null){const s=[];for(const e of t){const{name:t,type:i}=e;r&&r[t]&&r[t].isNode?s.push(r[t].build(this,i)):s.push(this.generateConst(i))}return e+"( "+s.join(", ")+" )"}generateConst(i,n=null){if(null===n&&("float"===i||"int"===i||"uint"===i?n=0:"bool"===i?n=!1:"color"===i?n=new e:"vec2"===i?n=new t:"vec3"===i?n=new r:"vec4"===i&&(n=new s)),"float"===i)return XT(n);if("int"===i)return`${Math.round(n)}`;if("uint"===i)return n>=0?`${Math.round(n)}u`:"0u";if("bool"===i)return n?"true":"false";if("color"===i)return`${this.getType("vec3")}( ${XT(n.r)}, ${XT(n.g)}, ${XT(n.b)} )`;const o=this.getTypeLength(i),a=this.getComponentType(i),u=e=>this.generateConst(a,e);if(2===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)} )`;if(3===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)} )`;if(4===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)}, ${u(n.w)} )`;if(o>4&&n&&(n.isMatrix3||n.isMatrix4))return`${this.getType(i)}( ${n.elements.map(u).join(", ")} )`;if(o>4)return`${this.getType(i)}()`;throw new Error(`NodeBuilder: Type '${i}' not found in generate constant attempt.`)}getType(e){return"color"===e?"vec3":e}hasGeometryAttribute(e){return this.geometry&&void 0!==this.geometry.getAttribute(e)}getAttribute(e,t){const r=this.attributes;for(const t of r)if(t.name===e)return t;const s=new eT(e,t);return r.push(s),s}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return"void"===e||"property"===e||"sampler"===e||"texture"===e||"cubeTexture"===e||"storageTexture"===e||"depthTexture"===e||"texture3D"===e}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===T)return"int";if(t===b)return"uint"}return"float"}getElementType(e){return"mat2"===e?"vec2":"mat3"===e?"vec3":"mat4"===e?"vec4":this.getComponentType(e)}getComponentType(e){if("float"===(e=this.getVectorType(e))||"bool"===e||"int"===e||"uint"===e)return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return null===t?null:"b"===t[1]?"bool":"i"===t[1]?"int":"u"===t[1]?"uint":"float"}getVectorType(e){return"color"===e?"vec3":"texture"===e||"cubeTexture"===e||"storageTexture"===e||"texture3D"===e?"vec4":e}getTypeFromLength(e,t="float"){if(1===e)return t;let r=_s(e);const s="float"===t?"":t[0];return!0===/mat2/.test(t)&&(r=r.replace("vec","mat")),s+r}getTypeFromArray(e){return qT.get(e.constructor)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const r=t.array,s=e.itemSize,i=e.normalized;let n;return e instanceof Oe||!0===i||(n=this.getTypeFromArray(r)),this.getTypeFromLength(s,n)}getTypeLength(e){const t=this.getVectorType(e),r=/vec([2-4])/.exec(t);return null!==r?Number(r[1]):"float"===t||"bool"===t||"int"===t||"uint"===t?1:!0===/mat2/.test(e)?4:!0===/mat3/.test(e)?9:!0===/mat4/.test(e)?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return"int"===t||"uint"===t?e:this.changeComponentType(e,"int")}addStack(){return this.stack=Mm(this.stack),this.stacks.push(Pi()||this.stack),Ui(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,Ui(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,r=null){let s=(r=null===r?e.isGlobal(this)?this.globalCache:this.cache:r).getData(e);return void 0===s&&(s={},r.setData(e,s)),void 0===s[t]&&(s[t]={}),s[t]}getNodeProperties(e,t="any"){const r=this.getDataFromNode(e,t);return r.properties||(r.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const r=this.getDataFromNode(e);let s=r.bufferAttribute;if(void 0===s){const i=this.uniforms.index++;s=new eT("nodeAttribute"+i,t,e),this.bufferAttributes.push(s),r.bufferAttribute=s}return s}getStructTypeFromNode(e,t,r=null,s=this.shaderStage){const i=this.getDataFromNode(e,s);let n=i.structType;if(void 0===n){const e=this.structs.index++;null===r&&(r="StructType"+e),n=new aT(r,t),this.structs[s].push(n),i.structType=n}return n}getOutputStructTypeFromNode(e,t){const r=this.getStructTypeFromNode(e,t,"OutputType","fragment");return r.output=!0,r}getUniformFromNode(e,t,r=this.shaderStage,s=null){const i=this.getDataFromNode(e,r,this.globalCache);let n=i.uniform;if(void 0===n){const o=this.uniforms.index++;n=new tT(s||"nodeUniform"+o,t,e),this.uniforms[r].push(n),i.uniform=n}return n}getArrayCount(e){let t=null;return e.isArrayNode?t=e.count:e.isVarNode&&e.node.isArrayNode&&(t=e.node.count),t}getVarFromNode(e,t=null,r=e.getNodeType(this),s=this.shaderStage,i=!1){const n=this.getDataFromNode(e,s);let o=n.variable;if(void 0===o){const a=i?"_const":"_var",u=this.vars[s]||(this.vars[s]=[]),l=this.vars[a]||(this.vars[a]=0);null===t&&(t=(i?"nodeConst":"nodeVar")+l,this.vars[a]++);const d=this.getArrayCount(e);o=new rT(t,r,i,d),i||u.push(o),n.variable=o}return o}isDeterministic(e){if(e.isMathNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode))&&(!e.cNode||this.isDeterministic(e.cNode));if(e.isOperatorNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode));if(e.isArrayNode){if(null!==e.values)for(const t of e.values)if(!this.isDeterministic(t))return!1;return!0}return!!e.isConstNode}getVaryingFromNode(e,t=null,r=e.getNodeType(this)){const s=this.getDataFromNode(e,"any");let i=s.varying;if(void 0===i){const e=this.varyings,n=e.length;null===t&&(t="nodeVarying"+n),i=new sT(t,r),e.push(i),s.varying=i}return i}getCodeFromNode(e,t,r=this.shaderStage){const s=this.getDataFromNode(e);let i=s.code;if(void 0===i){const e=this.codes[r]||(this.codes[r]=[]),n=e.length;i=new iT("nodeCode"+n,t),e.push(i),s.code=i}return i}addFlowCodeHierarchy(e,t){const{flowCodes:r,flowCodeBlock:s}=this.getDataFromNode(e);let i=!0,n=t;for(;n;){if(!0===s.get(n)){i=!1;break}n=this.getDataFromNode(n).parentNodeBlock}if(i)for(const e of r)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,r){const s=this.getDataFromNode(e),i=s.flowCodes||(s.flowCodes=[]),n=s.flowCodeBlock||(s.flowCodeBlock=new WeakMap);i.push(t),n.set(r,!0)}addLineFlowCode(e,t=null){return""===e||(null!==t&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e+=";\n"),this.flow.code+=e),this}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="\t",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),r=this.flowChildNode(e,t);return this.flowsData.set(e,r),r}buildFunctionNode(e){const t=new wy,r=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=r,t}flowShaderNode(e){const t=e.layout,r={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)r[e.name]=new Cm(e.type,e.name);e.layout=null;const s=e.call(r),i=this.flowStagesNode(s,t.type);return e.layout=t,i}flowStagesNode(e,t=null){const r=this.flow,s=this.vars,i=this.cache,n=this.buildStage,o=this.stack,a={code:""};this.flow=a,this.vars={},this.cache=new oT,this.stack=Mm();for(const r of Is)this.setBuildStage(r),a.result=e.build(this,t);return a.vars=this.getVars(this.shaderStage),this.flow=r,this.vars=s,this.cache=i,this.stack=o,this.setBuildStage(n),a}getFunctionOperator(){return null}flowChildNode(e,t=null){const r=this.flow,s={code:""};return this.flow=s,s.result=e.build(this,t),this.flow=r,s}flowNodeFromShaderStage(e,t,r=null,s=null){const i=this.shaderStage;this.setShaderStage(e);const n=this.flowChildNode(t,r);return null!==s&&(n.code+=`${this.tab+s} = ${n.result};\n`),this.flowCode[e]=this.flowCode[e]+n.code,this.setShaderStage(i),n}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t,r=null){return`${null!==r?this.generateArrayDeclaration(e,r):this.getType(e)} ${t}`}getVars(e){let t="";const r=this.vars[e];if(void 0!==r)for(const e of r)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let r="";if(void 0!==t)for(const e of t)r+=e.code+"\n";return r}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:e,material:t,renderer:r}=this;if(null!==t){let e=r.library.fromMaterial(t);null===e&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),e=new mh),e.build(this)}else this.addFlow("compute",e);for(const e of Is){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of Ls){this.setShaderStage(t);const r=this.flowNodes[t];for(const t of r)"generate"===e?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if("float"===t||"int"===t||"uint"===t)return new yT(e);if("vec2"===t||"ivec2"===t||"uvec2"===t)return new xT(e);if("vec3"===t||"ivec3"===t||"uvec3"===t)return new bT(e);if("vec4"===t||"ivec4"===t||"uvec4"===t)return new TT(e);if("color"===t)return new _T(e);if("mat2"===t)return new vT(e);if("mat3"===t)return new NT(e);if("mat4"===t)return new ST(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,r){if((t=this.getVectorType(t))===(r=this.getVectorType(r))||null===r||this.isReference(r))return e;const s=this.getTypeLength(t),i=this.getTypeLength(r);return 16===s&&9===i?`${this.getType(r)}(${e}[0].xyz, ${e}[1].xyz, ${e}[2].xyz)`:9===s&&4===i?`${this.getType(r)}(${e}[0].xy, ${e}[1].xy)`:s>4||i>4||0===i?e:s===i?`${this.getType(r)}( ${e} )`:s>i?this.format(`${e}.${"xyz".slice(0,i)}`,this.getTypeFromLength(i,this.getComponentType(t)),r):4===i&&s>1?`${this.getType(r)}( ${this.format(e,t,"vec3")}, 1.0 )`:2===s?`${this.getType(r)}( ${this.format(e,t,"vec2")}, 0.0 )`:(1===s&&i>1&&t!==this.getComponentType(r)&&(e=`${this.getType(this.getComponentType(r))}( ${e} )`),`${this.getType(r)}( ${e} )`)}getSignature(){return`// Three.js r${Ge} - Node System\n`}createNodeMaterial(e="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${e}() instead.`)}}class YT{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let r=e.get(t);return void 0===r&&(r={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,r)),r}updateBeforeNode(e){const t=e.getUpdateBeforeType(),r=e.updateReference(this);if(t===Bs.FRAME){const{frameMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.frameId&&!1!==e.updateBefore(this)&&t.set(r,this.frameId)}else if(t===Bs.RENDER){const{renderMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.renderId&&!1!==e.updateBefore(this)&&t.set(r,this.renderId)}else t===Bs.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),r=e.updateReference(this);if(t===Bs.FRAME){const{frameMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.frameId&&!1!==e.updateAfter(this)&&t.set(r,this.frameId)}else if(t===Bs.RENDER){const{renderMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.renderId&&!1!==e.updateAfter(this)&&t.set(r,this.renderId)}else t===Bs.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),r=e.updateReference(this);if(t===Bs.FRAME){const{frameMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.frameId&&!1!==e.update(this)&&t.set(r,this.frameId)}else if(t===Bs.RENDER){const{renderMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.renderId&&!1!==e.update(this)&&t.set(r,this.renderId)}else t===Bs.OBJECT&&e.update(this)}update(){this.frameId++,void 0===this.lastTime&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class QT{constructor(e,t,r=null,s="",i=!1){this.type=e,this.name=t,this.count=r,this.qualifier=s,this.isConst=i}}QT.isNodeFunctionInput=!0;class ZT extends kx{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setup(e){super.setup(e);const t=e.context.lightingModel,r=this.colorNode,s=hx(this.light),i=e.context.reflectedLight;t.direct({lightDirection:s,lightColor:r,reflectedLight:i},e.stack,e)}}const JT=new o,e_=new o;let t_=null;class r_ extends kx{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=mn(new r).setGroup(hn),this.halfWidth=mn(new r).setGroup(hn),this.updateType=Bs.RENDER}update(e){super.update(e);const{light:t}=this,r=e.camera.matrixWorldInverse;e_.identity(),JT.copy(t.matrixWorld),JT.premultiply(r),e_.extractRotation(JT),this.halfWidth.value.set(.5*t.width,0,0),this.halfHeight.value.set(0,.5*t.height,0),this.halfWidth.value.applyMatrix4(e_),this.halfHeight.value.applyMatrix4(e_)}setup(e){let t,r;super.setup(e),e.isAvailable("float32Filterable")?(t=Du(t_.LTC_FLOAT_1),r=Du(t_.LTC_FLOAT_2)):(t=Du(t_.LTC_HALF_1),r=Du(t_.LTC_HALF_2));const{colorNode:s,light:i}=this,n=e.context.lightingModel,o=cx(i),a=e.context.reflectedLight;n.directRectArea({lightColor:s,lightPosition:o,halfWidth:this.halfWidth,halfHeight:this.halfHeight,reflectedLight:a,ltc_1:t,ltc_2:r},e.stack,e)}static setLTC(e){t_=e}}class s_ extends kx{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=mn(0).setGroup(hn),this.penumbraCosNode=mn(0).setGroup(hn),this.cutoffDistanceNode=mn(0).setGroup(hn),this.decayExponentNode=mn(0).setGroup(hn)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e){const{coneCosNode:t,penumbraCosNode:r}=this;return Aa(t,r,e)}setup(e){super.setup(e);const t=e.context.lightingModel,{colorNode:r,cutoffDistanceNode:s,decayExponentNode:i,light:n}=this,o=cx(n).sub(vl),a=o.normalize(),u=a.dot(hx(n)),l=this.getSpotAttenuation(u),d=o.length(),c=zx({lightDistance:d,cutoffDistance:s,decayExponent:i});let h=r.mul(l).mul(c);if(n.map){const e=ux(n),t=Du(n.map,e.xy).onRenderUpdate((()=>n.map));h=e.mul(2).sub(1).abs().lessThan(1).all().select(h.mul(t),h)}const p=e.context.reflectedLight;t.direct({lightDirection:a,lightColor:h,reflectedLight:p},e.stack,e)}}class i_ extends s_{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e){const t=this.light.iesMap;let r=null;if(t&&!0===t.isTexture){const s=e.acos().mul(1/Math.PI);r=Du(t,zi(s,0),0).r}else r=super.getSpotAttenuation(e);return r}}class n_ extends kx{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class o_ extends kx{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=lx(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=mn(new e).setGroup(hn)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:r,lightDirectionNode:s}=this,i=Ml.dot(s).mul(.5).add(.5),n=va(r,t,i);e.context.irradiance.addAssign(n)}}class a_ extends kx{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let e=0;e<9;e++)t.push(new r);this.lightProbe=$u(t)}update(e){const{light:t}=this;super.update(e);for(let e=0;e<9;e++)this.lightProbe.array[e].copy(t.sh.coefficients[e]).multiplyScalar(t.intensity)}setup(e){const t=qb(Bl,this.lightProbe);e.context.irradiance.addAssign(t)}}class u_{parseFunction(){console.warn("Abstract function.")}}class l_{constructor(e,t,r="",s=""){this.type=e,this.inputs=t,this.name=r,this.precision=s}getCode(){console.warn("Abstract function.")}}l_.isNodeFunction=!0;const d_=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,c_=/[a-z_0-9]+/gi,h_="#pragma main";class p_ extends l_{constructor(e){const{type:t,inputs:r,name:s,precision:i,inputsCode:n,blockCode:o,headerCode:a}=(e=>{const t=(e=e.trim()).indexOf(h_),r=-1!==t?e.slice(t+12):e,s=r.match(d_);if(null!==s&&5===s.length){const i=s[4],n=[];let o=null;for(;null!==(o=c_.exec(i));)n.push(o);const a=[];let u=0;for(;u<n.length;){const e="const"===n[u][0];!0===e&&u++;let t=n[u][0];"in"===t||"out"===t||"inout"===t?u++:t="";const r=n[u++][0];let s=Number.parseInt(n[u][0]);!1===Number.isNaN(s)?u++:s=null;const i=n[u++][0];a.push(new QT(r,i,s,t,e))}const l=r.substring(s[0].length),d=void 0!==s[3]?s[3]:"";return{type:s[2],inputs:a,name:d,precision:void 0!==s[1]?s[1]:"",inputsCode:i,blockCode:l,headerCode:-1!==t?e.slice(0,t):""}}throw new Error("FunctionNode: Function is not a GLSL code.")})(e);super(t,r,s,i),this.inputsCode=n,this.blockCode=o,this.headerCode=a}getCode(e=this.name){let t;const r=this.blockCode;if(""!==r){const{type:s,inputsCode:i,headerCode:n,precision:o}=this;let a=`${s} ${e} ( ${i.trim()} )`;""!==o&&(a=`${o} ${a}`),t=n+a+r}else t="";return t}}class g_ extends u_{parseFunction(e){return new p_(e)}}const m_=new WeakMap,f_=[],y_=[];class x_ extends Xg{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new YT,this.nodeBuilderCache=new Map,this.callHashCache=new $g,this.groupsData=new $g,this.cacheLib={}}updateGroup(e){const t=e.groupNode,r=t.name;if(r===pn.name)return!0;if(r===hn.name){const t=this.get(e),r=this.nodeFrame.renderId;return t.renderId!==r&&(t.renderId=r,!0)}if(r===cn.name){const t=this.get(e),r=this.nodeFrame.frameId;return t.frameId!==r&&(t.frameId=r,!0)}f_[0]=t,f_[1]=e;let s=this.groupsData.get(f_);return void 0===s&&this.groupsData.set(f_,s={}),f_.length=0,s.version!==t.version&&(s.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const{nodeBuilderCache:s}=this,i=this.getForRenderCacheKey(e);if(r=s.get(i),void 0===r){const t=this.backend.createNodeBuilder(e.object,this.renderer);t.scene=e.scene,t.material=e.material,t.camera=e.camera,t.context.material=e.material,t.lightsNode=e.lightsNode,t.environmentNode=this.getEnvironmentNode(e.scene),t.fogNode=this.getFogNode(e.scene),t.clippingContext=e.clippingContext,t.build(),r=this._createNodeBuilderState(t),s.set(i,r)}r.usedTimes++,t.nodeBuilderState=r}return r}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,0===t.usedTimes&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const s=this.backend.createNodeBuilder(e,this.renderer);s.build(),r=this._createNodeBuilderState(s),t.nodeBuilderState=r}return r}_createNodeBuilderState(e){return new Jb(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.observer,e.transforms)}getEnvironmentNode(e){this.updateEnvironment(e);let t=null;if(e.environmentNode&&e.environmentNode.isNode)t=e.environmentNode;else{const r=this.get(e);r.environmentNode&&(t=r.environmentNode)}return t}getBackgroundNode(e){this.updateBackground(e);let t=null;if(e.backgroundNode&&e.backgroundNode.isNode)t=e.backgroundNode;else{const r=this.get(e);r.backgroundNode&&(t=r.backgroundNode)}return t}getFogNode(e){return this.updateFog(e),e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){f_[0]=e,f_[1]=t;const r=this.renderer.info.calls,s=this.callHashCache.get(f_)||{};if(s.callId!==r){const i=this.getEnvironmentNode(e),n=this.getFogNode(e);t&&y_.push(t.getCacheKey(!0)),i&&y_.push(i.getCacheKey()),n&&y_.push(n.getCacheKey()),y_.push(this.renderer.shadowMap.enabled?1:0),s.callId=r,s.cacheKey=ms(y_),this.callHashCache.set(f_,s),y_.length=0}return f_.length=0,s.cacheKey}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),r=e.background;if(r){const s=0===e.backgroundBlurriness&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&0===t.backgroundBlurriness;if(t.background!==r||s){const i=this.getCacheNode("background",r,(()=>{if(!0===r.isCubeTexture||r.mapping===j||r.mapping===q||r.mapping===Pe){if(e.backgroundBlurriness>0||r.mapping===Pe)return dg(r);{let e;return e=!0===r.isCubeTexture?$l(r):Du(r),Ih(e)}}if(!0===r.isTexture)return Du(r,Vc.flipY()).setUpdateMatrix(!0);!0!==r.isColor&&console.error("WebGPUNodes: Unsupported background configuration.",r)}),s);t.backgroundNode=i,t.background=r,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}getCacheNode(e,t,r,s=!1){const i=this.cacheLib[e]||(this.cacheLib[e]=new WeakMap);let n=i.get(t);return(void 0===n||s)&&(n=r(),i.set(t,n)),n}updateFog(e){const t=this.get(e),r=e.fog;if(r){if(t.fog!==r){const e=this.getCacheNode("fog",r,(()=>{if(r.isFogExp2){const e=jl("color","color",r).setGroup(hn),t=jl("density","float",r).setGroup(hn);return ky(e,Gy(t))}if(r.isFog){const e=jl("color","color",r).setGroup(hn),t=jl("near","float",r).setGroup(hn),s=jl("far","float",r).setGroup(hn);return ky(e,Oy(t,s))}console.error("THREE.Renderer: Unsupported fog configuration.",r)}));t.fogNode=e,t.fog=r}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),r=e.environment;if(r){if(t.environment!==r){const e=this.getCacheNode("environment",r,(()=>!0===r.isCubeTexture?$l(r):!0===r.isTexture?Du(r):void console.error("Nodes: Unsupported environment configuration.",r)));t.environmentNode=e,t.environment=r}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,r=null,s=null,i=null){const n=this.nodeFrame;return n.renderer=e,n.scene=t,n.object=r,n.camera=s,n.material=i,n}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace}hasOutputChange(e){return m_.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,r=this.getOutputCacheKey(),s=Du(e,Vc).renderOutput(t.toneMapping,t.currentColorSpace);return m_.set(e,r),s}updateBefore(e){const t=e.getNodeBuilderState();for(const r of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(r)}updateAfter(e){const t=e.getNodeBuilderState();for(const r of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(r)}updateForCompute(e){const t=this.getNodeFrame(),r=this.getForCompute(e);for(const e of r.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),r=e.getNodeBuilderState();for(const e of r.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new YT,this.nodeBuilderCache=new Map,this.cacheLib={}}}const b_=new xe;class T_{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",this.shadowPass=!1,this.viewNormalMatrix=new n,this.clippingGroupContexts=new WeakMap,this.intersectionPlanes=[],this.unionPlanes=[],this.parentVersion=null,null!==e&&(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix)}projectPlanes(e,t,r){const s=e.length;for(let i=0;i<s;i++){b_.copy(e[i]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const s=t[r+i],n=b_.normal;s.x=-n.x,s.y=-n.y,s.z=-n.z,s.w=b_.constant}}updateGlobal(e,t){this.shadowPass=null!==e.overrideMaterial&&e.overrideMaterial.isShadowPassMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let r=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const i=t.clippingPlanes,n=i.length;let o,a;if(this.clipIntersection?(o=this.intersectionPlanes,a=e.intersectionPlanes.length):(o=this.unionPlanes,a=e.unionPlanes.length),o.length!==a+n){o.length=a+n;for(let e=0;e<n;e++)o[a+e]=new s;r=!0}this.projectPlanes(i,o,a),r&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return void 0===t&&(t=new T_(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class __{constructor(e,t){this.bundleGroup=e,this.camera=t}}const v_=[];class N_{constructor(){this.bundles=new $g}get(e,t){const r=this.bundles;v_[0]=e,v_[1]=t;let s=r.get(v_);return void 0===s&&(s=new __(e,t),r.set(v_,s)),v_.length=0,s}dispose(){this.bundles=new $g}}class S_{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const r=this.getMaterialNodeClass(e.type);if(null!==r){t=new r;for(const r in e)t[r]=e[r]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"==typeof t||"object"==typeof t)throw new Error(`Base class ${t} is not a class.`);r.set(t,e)}}addClass(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t.name}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"!=typeof t)throw new Error(`Base class ${t.name} is not a class.`);r.set(t,e)}}}const R_=new mx,A_=[];class E_ extends $g{constructor(){super()}createNode(e=[]){return(new mx).setLights(e)}getNode(e,t){if(e.isQuadMesh)return R_;A_[0]=e,A_[1]=t;let r=this.get(A_);return void 0===r&&(r=this.createNode(),this.set(A_,r)),A_.length=0,r}}class C_ extends ye{constructor(e=1,t=1,r={}){super(e,t,r),this.isXRRenderTarget=!0,this.hasExternalTextures=!1,this.autoAllocateDepthBuffer=!0}copy(e){return super.copy(e),this.hasExternalTextures=e.hasExternalTextures,this.autoAllocateDepthBuffer=e.autoAllocateDepthBuffer,this}}const w_=new r,M_=new r;class B_ extends a{constructor(e){super(),this.enabled=!1,this.isPresenting=!1,this.cameraAutoUpdate=!0,this._renderer=e,this._cameraL=new Ie,this._cameraL.viewport=new s,this._cameraR=new Ie,this._cameraR.viewport=new s,this._cameras=[this._cameraL,this._cameraR],this._cameraXR=new ke,this._currentDepthNear=null,this._currentDepthFar=null,this._controllers=[],this._controllerInputSources=[],this._currentRenderTarget=null,this._xrRenderTarget=null,this._currentAnimationContext=null,this._currentAnimationLoop=null,this._currentPixelRatio=null,this._currentSize=new t,this._onSessionEvent=U_.bind(this),this._onSessionEnd=P_.bind(this),this._onInputSourcesChange=I_.bind(this),this._onAnimationFrame=L_.bind(this),this._referenceSpace=null,this._referenceSpaceType="local-floor",this._customReferenceSpace=null,this._framebufferScaleFactor=1,this._foveation=1,this._session=null,this._glBaseLayer=null,this._glBinding=null,this._glProjLayer=null,this._xrFrame=null,this._useLayers="undefined"!=typeof XRWebGLBinding&&"createProjectionLayer"in XRWebGLBinding.prototype}getController(e){return this._getController(e).getTargetRaySpace()}getControllerGrip(e){return this._getController(e).getGripSpace()}getHand(e){return this._getController(e).getHandSpace()}getFoveation(){if(null!==this._glProjLayer||null!==this._glBaseLayer)return this._foveation}setFoveation(e){this._foveation=e,null!==this._glProjLayer&&(this._glProjLayer.fixedFoveation=e),null!==this._glBaseLayer&&void 0!==this._glBaseLayer.fixedFoveation&&(this._glBaseLayer.fixedFoveation=e)}getFramebufferScaleFactor(){return this._framebufferScaleFactor}setFramebufferScaleFactor(e){this._framebufferScaleFactor=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.")}getReferenceSpaceType(){return this._referenceSpaceType}setReferenceSpaceType(e){this._referenceSpaceType=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change reference space type while presenting.")}getReferenceSpace(){return this._customReferenceSpace||this._referenceSpace}setReferenceSpace(e){this._customReferenceSpace=e}getCamera(){return this._cameraXR}getEnvironmentBlendMode(){if(null!==this._session)return this._session.environmentBlendMode}getFrame(){return this._xrFrame}getSession(){return this._session}async setSession(e){const t=this._renderer,r=t.backend,s=t.getContext();if(this._session=e,null!==e){if(!0===r.isWebGPUBackend)throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');if(this._currentRenderTarget=t.getRenderTarget(),e.addEventListener("select",this._onSessionEvent),e.addEventListener("selectstart",this._onSessionEvent),e.addEventListener("selectend",this._onSessionEvent),e.addEventListener("squeeze",this._onSessionEvent),e.addEventListener("squeezestart",this._onSessionEvent),e.addEventListener("squeezeend",this._onSessionEvent),e.addEventListener("end",this._onSessionEnd),e.addEventListener("inputsourceschange",this._onInputSourcesChange),await r.makeXRCompatible(),this._currentPixelRatio=t.getPixelRatio(),t.getSize(this._currentSize),this._currentAnimationContext=t._animation.getContext(),this._currentAnimationLoop=t._animation.getAnimationLoop(),t._animation.stop(),!0===this._useLayers){let r=null,i=null,n=null;t.depth&&(n=t.stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24,r=t.stencil?pe:ge,i=t.stencil?me:b);const o={colorFormat:s.RGBA8,depthFormat:n,scaleFactor:this._framebufferScaleFactor},a=new XRWebGLBinding(e,s),u=a.createProjectionLayer(o);this._glBinding=a,this._glProjLayer=u,e.updateRenderState({layers:[u]}),t.setPixelRatio(1),t.setSize(u.textureWidth,u.textureHeight,!1),this._xrRenderTarget=new C_(u.textureWidth,u.textureHeight,{format:Le,type:fe,colorSpace:t.outputColorSpace,depthTexture:new F(u.textureWidth,u.textureHeight,i,void 0,void 0,void 0,void 0,void 0,void 0,r),stencilBuffer:t.stencil,samples:t.samples}),this._xrRenderTarget.hasExternalTextures=!0}else{const r={antialias:t.samples>0,alpha:!0,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:this.getFramebufferScaleFactor()},i=new XRWebGLLayer(e,s,r);this._glBaseLayer=i,e.updateRenderState({baseLayer:i}),t.setPixelRatio(1),t.setSize(i.framebufferWidth,i.framebufferHeight,!1),this._xrRenderTarget=new C_(i.framebufferWidth,i.framebufferHeight,{format:Le,type:fe,colorSpace:t.outputColorSpace,stencilBuffer:t.stencil})}this.setFoveation(this.getFoveation()),this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType()),t._animation.setAnimationLoop(this._onAnimationFrame),t._animation.setContext(e),t._animation.start(),this.isPresenting=!0,this.dispatchEvent({type:"sessionstart"})}}updateCamera(e){const t=this._session;if(null===t)return;const r=e.near,s=e.far,i=this._cameraXR,n=this._cameraL,o=this._cameraR;i.near=o.near=n.near=r,i.far=o.far=n.far=s,this._currentDepthNear===i.near&&this._currentDepthFar===i.far||(t.updateRenderState({depthNear:i.near,depthFar:i.far}),this._currentDepthNear=i.near,this._currentDepthFar=i.far),n.layers.mask=2|e.layers.mask,o.layers.mask=4|e.layers.mask,i.layers.mask=n.layers.mask|o.layers.mask;const a=e.parent,u=i.cameras;F_(i,a);for(let e=0;e<u.length;e++)F_(u[e],a);2===u.length?function(e,t,r){w_.setFromMatrixPosition(t.matrixWorld),M_.setFromMatrixPosition(r.matrixWorld);const s=w_.distanceTo(M_),i=t.projectionMatrix.elements,n=r.projectionMatrix.elements,o=i[14]/(i[10]-1),a=i[14]/(i[10]+1),u=(i[9]+1)/i[5],l=(i[9]-1)/i[5],d=(i[8]-1)/i[0],c=(n[8]+1)/n[0],h=o*d,p=o*c,g=s/(-d+c),m=g*-d;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(g),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===i[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=o+g,r=a+g,i=h-m,n=p+(s-m),d=u*a/r*t,c=l*a/r*t;e.projectionMatrix.makePerspective(i,n,d,c,t,r),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}(i,n,o):i.projectionMatrix.copy(n.projectionMatrix),function(e,t,r){null===r?e.matrix.copy(t.matrixWorld):(e.matrix.copy(r.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld));e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*$e*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}(e,i,a)}_getController(e){let t=this._controllers[e];return void 0===t&&(t=new ze,this._controllers[e]=t),t}}function F_(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}function U_(e){const t=this._controllerInputSources.indexOf(e.inputSource);if(-1===t)return;const r=this._controllers[t];if(void 0!==r){const t=this.getReferenceSpace();r.update(e.inputSource,e.frame,t),r.dispatchEvent({type:e.type,data:e.inputSource})}}function P_(){const e=this._session,t=this._renderer;e.removeEventListener("select",this._onSessionEvent),e.removeEventListener("selectstart",this._onSessionEvent),e.removeEventListener("selectend",this._onSessionEvent),e.removeEventListener("squeeze",this._onSessionEvent),e.removeEventListener("squeezestart",this._onSessionEvent),e.removeEventListener("squeezeend",this._onSessionEvent),e.removeEventListener("end",this._onSessionEnd),e.removeEventListener("inputsourceschange",this._onInputSourcesChange);for(let e=0;e<this._controllers.length;e++){const t=this._controllerInputSources[e];null!==t&&(this._controllerInputSources[e]=null,this._controllers[e].disconnect(t))}this._currentDepthNear=null,this._currentDepthFar=null,t.backend.setXRTarget(null),t.setRenderTarget(this._currentRenderTarget),this._session=null,this._xrRenderTarget=null,this.isPresenting=!1,t._animation.stop(),t._animation.setAnimationLoop(this._currentAnimationLoop),t._animation.setContext(this._currentAnimationContext),t._animation.start(),t.setPixelRatio(this._currentPixelRatio),t.setSize(this._currentSize.width,this._currentSize.height,!1),this.dispatchEvent({type:"sessionend"})}function I_(e){const t=this._controllers,r=this._controllerInputSources;for(let s=0;s<e.removed.length;s++){const i=e.removed[s],n=r.indexOf(i);n>=0&&(r[n]=null,t[n].disconnect(i))}for(let s=0;s<e.added.length;s++){const i=e.added[s];let n=r.indexOf(i);if(-1===n){for(let e=0;e<t.length;e++){if(e>=r.length){r.push(i),n=e;break}if(null===r[e]){r[e]=i,n=e;break}}if(-1===n)break}const o=t[n];o&&o.connect(i)}}function L_(e,t){if(void 0===t)return;const r=this._cameraXR,i=this._renderer,n=i.backend,o=this._glBaseLayer,a=this.getReferenceSpace(),u=t.getViewerPose(a);if(this._xrFrame=t,null!==u){const e=u.views;null!==this._glBaseLayer&&n.setXRTarget(o.framebuffer);let t=!1;e.length!==r.cameras.length&&(r.cameras.length=0,t=!0);for(let i=0;i<e.length;i++){const a=e[i];let u;if(!0===this._useLayers){const e=this._glBinding.getViewSubImage(this._glProjLayer,a);u=e.viewport,0===i&&n.setXRRenderTargetTextures(this._xrRenderTarget,e.colorTexture,this._glProjLayer.ignoreDepthValues?void 0:e.depthStencilTexture)}else u=o.getViewport(a);let l=this._cameras[i];void 0===l&&(l=new Ie,l.layers.enable(i),l.viewport=new s,this._cameras[i]=l),l.matrix.fromArray(a.transform.matrix),l.matrix.decompose(l.position,l.quaternion,l.scale),l.projectionMatrix.fromArray(a.projectionMatrix),l.projectionMatrixInverse.copy(l.projectionMatrix).invert(),l.viewport.set(u.x,u.y,u.width,u.height),0===i&&(r.matrix.copy(l.matrix),r.matrix.decompose(r.position,r.quaternion,r.scale)),!0===t&&r.cameras.push(l)}i.setRenderTarget(this._xrRenderTarget)}for(let e=0;e<this._controllers.length;e++){const r=this._controllerInputSources[e],s=this._controllers[e];null!==r&&void 0!==s&&s.update(r,t,a)}this._currentAnimationLoop&&this._currentAnimationLoop(e,t),t.detectedPlanes&&this.dispatchEvent({type:"planesdetected",data:t}),this._xrFrame=null}const D_=new z,V_=new t,O_=new s,G_=new qe,k_=new o,z_=new s;class $_{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:r=!1,alpha:i=!0,depth:n=!0,stencil:o=!1,antialias:a=!1,samples:u=0,getFallback:l=null,colorBufferType:d=Te}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=u||!0===a?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=r,this.outputColorSpace=We,this.toneMapping=p,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=n,this.stencil=o,this.info=new im,this.nodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new S_,this.lighting=new E_,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new s(0,0,this._width,this._height),this._scissor=new s(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new Nf(new mh),this._quad.material.name="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const c=!0===this.alpha?0:1;this._clearColor=new Em(0,0,0,c),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._colorBufferType=d,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:He},this.xr=new B_(this),this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,r)=>{await this.compileAsync(e,t);const s=this._renderLists.get(e,t),i=this._renderContexts.get(e,t,this._renderTarget),n=e.overrideMaterial||r.material,o=this._objects.get(r,n,e,t,s.lightsNode,i,i.clippingContext),{fragmentShader:a,vertexShader:u}=o.getNodeBuilderState();return{fragmentShader:a,vertexShader:u}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return null!==this._initPromise||(this._initPromise=new Promise((async(e,t)=>{let r=this.backend;try{await r.init(this)}catch(e){if(null===this._getFallback)return void t(e);try{this.backend=r=this._getFallback(e),await r.init(this)}catch(e){return void t(e)}}this._nodes=new x_(this,r),this._animation=new zg(this._nodes,this.info),this._attributes=new em(r),this._background=new Yb(this,this._nodes),this._geometries=new sm(this._attributes,this.info),this._textures=new Am(this,r,this.info),this._pipelines=new dm(r,this._nodes),this._bindings=new cm(r,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new qg(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new ym(this.lighting),this._bundles=new N_,this._renderContexts=new Sm,this._animation.start(),this._initialized=!0,e()}))),this._initPromise}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,r=null){if(!0===this._isDeviceLost)return;!1===this._initialized&&await this.init();const s=this._nodes.nodeFrame,i=s.renderId,n=this._currentRenderContext,o=this._currentRenderObjectFunction,a=this._compilationPromises,u=!0===e.isScene?e:D_;null===r&&(r=e);const l=this._renderTarget,d=this._renderContexts.get(r,t,l),c=this._activeMipmapLevel,h=[];this._currentRenderContext=d,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=h,s.renderId++,s.update(),d.depth=this.depth,d.stencil=this.stencil,d.clippingContext||(d.clippingContext=new T_),d.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,l);const p=this._renderLists.get(e,t);if(p.begin(),this._projectObject(e,t,0,p,d.clippingContext),r!==e&&r.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&p.pushLight(e)})),p.finish(),null!==l){this._textures.updateRenderTarget(l,c);const e=this._textures.get(l);d.textures=e.textures,d.depthTexture=e.depthTexture}else d.textures=null,d.depthTexture=null;this._background.update(u,p,d);const g=p.opaque,m=p.transparent,f=p.transparentDoublePass,y=p.lightsNode;!0===this.opaque&&g.length>0&&this._renderObjects(g,t,u,y),!0===this.transparent&&m.length>0&&this._renderTransparents(m,f,t,u,y),s.renderId=i,this._currentRenderContext=n,this._currentRenderObjectFunction=o,this._compilationPromises=a,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(h)}async renderAsync(e,t){!1===this._initialized&&await this.init(),this._renderScene(e,t)}async waitForGPU(){await this.backend.waitForGPU()}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getColorBufferType(){return this._colorBufferType}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:\n\nMessage: ${e.message}`;e.reason&&(t+=`\nReason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,r){const{bundleGroup:s,camera:i,renderList:n}=e,o=this._currentRenderContext,a=this._bundles.get(s,i),u=this.backend.get(a);void 0===u.renderContexts&&(u.renderContexts=new Set);const l=s.version!==u.version,d=!1===u.renderContexts.has(o)||l;if(u.renderContexts.add(o),d){this.backend.beginBundle(o),(void 0===u.renderObjects||l)&&(u.renderObjects=[]),this._currentRenderBundle=a;const e=n.opaque;!0===this.opaque&&e.length>0&&this._renderObjects(e,i,t,r),this._currentRenderBundle=null,this.backend.finishBundle(o,a),u.version=s.version}else{const{renderObjects:e}=u;for(let t=0,r=e.length;t<r;t++){const r=e[t];this._nodes.needsRefresh(r)&&(this._nodes.updateBefore(r),this._nodes.updateForRender(r),this._bindings.updateForRender(r),this._nodes.updateAfter(r))}}this.backend.addBundle(o,a)}render(e,t){if(!1===this._initialized)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this;if(!1===(e!==p)&&!1===(t!==Ce))return null;const{width:r,height:s}=this.getDrawingBufferSize(V_),{depth:i,stencil:n}=this;let o=this._frameBufferTarget;return null===o&&(o=new ye(r,s,{depthBuffer:i,stencilBuffer:n,type:this._colorBufferType,format:Le,colorSpace:Ce,generateMipmaps:!1,minFilter:$,magFilter:$,samples:this.samples}),o.isPostProcessingRenderTarget=!0,this._frameBufferTarget=o),o.depthBuffer=i,o.stencilBuffer=n,o.setSize(r,s),o.viewport.copy(this._viewport),o.scissor.copy(this._scissor),o.viewport.multiplyScalar(this._pixelRatio),o.scissor.multiplyScalar(this._pixelRatio),o.scissorTest=this._scissorTest,o}_renderScene(e,t,r=!0){if(!0===this._isDeviceLost)return;const s=r?this._getFrameBufferTarget():null,i=this._nodes.nodeFrame,n=i.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,u=!0===e.isScene?e:D_,l=this._renderTarget,d=this._activeCubeFace,c=this._activeMipmapLevel;let h;null!==s?(h=s,this.setRenderTarget(h)):h=l;const p=this._renderContexts.get(e,t,h);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,i.renderId=this.info.calls;const g=this.coordinateSystem,m=this.xr;if(t.coordinateSystem!==g&&!1===m.isPresenting&&(t.coordinateSystem=g,t.updateProjectionMatrix(),t.isArrayCamera))for(const e of t.cameras)e.coordinateSystem=g,e.updateProjectionMatrix();!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===m.enabled&&!0===m.isPresenting&&(!0===m.cameraAutoUpdate&&m.updateCamera(t),t=m.getCamera());let f=this._viewport,y=this._scissor,x=this._pixelRatio;null!==h&&(f=h.viewport,y=h.scissor,x=1),this.getDrawingBufferSize(V_),O_.set(0,0,V_.width,V_.height);const b=void 0===f.minDepth?0:f.minDepth,T=void 0===f.maxDepth?1:f.maxDepth;p.viewportValue.copy(f).multiplyScalar(x).floor(),p.viewportValue.width>>=c,p.viewportValue.height>>=c,p.viewportValue.minDepth=b,p.viewportValue.maxDepth=T,p.viewport=!1===p.viewportValue.equals(O_),p.scissorValue.copy(y).multiplyScalar(x).floor(),p.scissor=this._scissorTest&&!1===p.scissorValue.equals(O_),p.scissorValue.width>>=c,p.scissorValue.height>>=c,p.clippingContext||(p.clippingContext=new T_),p.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,h),k_.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),G_.setFromProjectionMatrix(k_,g);const _=this._renderLists.get(e,t);if(_.begin(),this._projectObject(e,t,0,_,p.clippingContext),_.finish(),!0===this.sortObjects&&_.sort(this._opaqueSort,this._transparentSort),null!==h){this._textures.updateRenderTarget(h,c);const e=this._textures.get(h);p.textures=e.textures,p.depthTexture=e.depthTexture,p.width=e.width,p.height=e.height,p.renderTarget=h,p.depth=h.depthBuffer,p.stencil=h.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=c,p.height>>=c,p.activeCubeFace=d,p.activeMipmapLevel=c,p.occlusionQueryCount=_.occlusionQueryCount,this._background.update(u,_,p),this.backend.beginRender(p);const{bundles:v,lightsNode:N,transparentDoublePass:S,transparent:R,opaque:A}=_;if(v.length>0&&this._renderBundles(v,u,N),!0===this.opaque&&A.length>0&&this._renderObjects(A,t,u,N),!0===this.transparent&&R.length>0&&this._renderTransparents(R,S,t,u,N),this.backend.finishRender(p),i.renderId=n,this._currentRenderContext=o,this._currentRenderObjectFunction=a,null!==s){this.setRenderTarget(l,d,c);const e=this._quad;this._nodes.hasOutputChange(h.texture)&&(e.material.fragmentNode=this._nodes.getOutputNode(h.texture),e.material.needsUpdate=!0),this._renderScene(e,e.camera,!1)}return u.onAfterRender(this,e,t,h),p}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){!1===this._initialized&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,r){this._width=e,this._height=t,this._pixelRatio=r,this.domElement.width=Math.floor(e*r),this.domElement.height=Math.floor(t*r),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setSize(e,t,r=!0){this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),!0===r&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,r,s){const i=this._scissor;e.isVector4?i.copy(e):i.set(e,t,r,s)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,r,s,i=0,n=1){const o=this._viewport;e.isVector4?o.copy(e):o.set(e,t,r,s),o.minDepth=i,o.maxDepth=n}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,r=!0){if(!1===this._initialized)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,r);const s=this._renderTarget||this._getFrameBufferTarget();let i=null;if(null!==s){this._textures.updateRenderTarget(s);const e=this._textures.get(s);i=this._renderContexts.getForClear(s),i.textures=e.textures,i.depthTexture=e.depthTexture,i.width=e.width,i.height=e.height,i.renderTarget=s,i.depth=s.depthBuffer,i.stencil=s.stencilBuffer}if(i.clearColorValue=this._clearColor,this.backend.clear(e,t,r,i),null!==s&&null===this._renderTarget){const e=this._quad;this._nodes.hasOutputChange(s.texture)&&(e.material.fragmentNode=this._nodes.getOutputNode(s.texture),e.material.needsUpdate=!0),this._renderScene(e,e.camera,!1)}}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,r=!0){!1===this._initialized&&await this.init(),this.clear(e,t,r)}async clearColorAsync(){this.clearAsync(!0,!1,!1)}async clearDepthAsync(){this.clearAsync(!1,!0,!1)}async clearStencilAsync(){this.clearAsync(!1,!1,!0)}get currentToneMapping(){return null!==this._renderTarget?p:this.toneMapping}get currentColorSpace(){return null!==this._renderTarget?Ce:this.outputColorSpace}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),null!==this._frameBufferTarget&&this._frameBufferTarget.dispose(),Object.values(this.backend.timestampQueryPool).forEach((e=>{null!==e&&e.dispose()})),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,r=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=r}getRenderTarget(){return this._renderTarget}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e){if(!0===this._isDeviceLost)return;if(!1===this._initialized)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const t=this._nodes.nodeFrame,r=t.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,t.renderId=this.info.calls;const s=this.backend,i=this._pipelines,n=this._bindings,o=this._nodes,a=Array.isArray(e)?e:[e];if(void 0===a[0]||!0!==a[0].isComputeNode)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");s.beginCompute(e);for(const t of a){if(!1===i.has(t)){const e=()=>{t.removeEventListener("dispose",e),i.delete(t),n.delete(t),o.delete(t)};t.addEventListener("dispose",e);const r=t.onInitFunction;null!==r&&r.call(t,{renderer:this})}o.updateForCompute(t),n.updateForCompute(t);const r=n.getForCompute(t),a=i.getForCompute(t,r);s.compute(e,t,r,a)}s.finishCompute(e),t.renderId=r}async computeAsync(e){!1===this._initialized&&await this.init(),this.compute(e)}async hasFeatureAsync(e){return!1===this._initialized&&await this.init(),this.backend.hasFeature(e)}async resolveTimestampsAsync(e="render"){return!1===this._initialized&&await this.init(),this.backend.resolveTimestampsAsync(e)}hasFeature(e){return!1===this._initialized?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){!1===this._initialized&&await this.init(),this._textures.updateTexture(e)}initTexture(e){!1===this._initialized&&console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(null!==t)if(t.isVector2)t=z_.set(t.x,t.y,e.image.width,e.image.height).floor();else{if(!t.isVector4)return void console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");t=z_.copy(t).floor()}else t=z_.set(0,0,e.image.width,e.image.height);let r,s=this._currentRenderContext;null!==s?r=s.renderTarget:(r=this._renderTarget||this._getFrameBufferTarget(),null!==r&&(this._textures.updateRenderTarget(r),s=this._textures.get(r))),this._textures.updateTexture(e,{renderTarget:r}),this.backend.copyFramebufferToTexture(e,s,t)}copyTextureToTexture(e,t,r=null,s=null,i=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,r,s,i)}async readRenderTargetPixelsAsync(e,t,r,s,i,n=0,o=0){return this.backend.copyTextureToBuffer(e.textures[n],t,r,s,i,o)}_projectObject(e,t,r,s,i){if(!1===e.visible)return;if(e.isGroup)r=e.renderOrder,e.isClippingGroup&&e.enabled&&(i=i.getGroupContext(e));else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)s.pushLight(e);else if(e.isSprite){if(!e.frustumCulled||G_.intersectsSprite(e)){!0===this.sortObjects&&z_.setFromMatrixPosition(e.matrixWorld).applyMatrix4(k_);const{geometry:t,material:n}=e;n.visible&&s.push(e,t,n,r,z_.z,null,i)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||G_.intersectsObject(e))){const{geometry:t,material:n}=e;if(!0===this.sortObjects&&(null===t.boundingSphere&&t.computeBoundingSphere(),z_.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(k_)),Array.isArray(n)){const o=t.groups;for(let a=0,u=o.length;a<u;a++){const u=o[a],l=n[u.materialIndex];l&&l.visible&&s.push(e,t,l,r,z_.z,u,i)}}else n.visible&&s.push(e,t,n,r,z_.z,null,i)}if(!0===e.isBundleGroup&&void 0!==this.backend.beginBundle){const r=s;(s=this._renderLists.get(e,t)).begin(),r.pushBundle({bundleGroup:e,camera:t,renderList:s}),s.finish()}const n=e.children;for(let e=0,o=n.length;e<o;e++)this._projectObject(n[e],t,r,s,i)}_renderBundles(e,t,r){for(const s of e)this._renderBundle(s,t,r)}_renderTransparents(e,t,r,s,i){if(t.length>0){for(const{material:e}of t)e.side=_;this._renderObjects(t,r,s,i,"backSide");for(const{material:e}of t)e.side=je;this._renderObjects(e,r,s,i);for(const{material:e}of t)e.side=ce}else this._renderObjects(e,r,s,i)}_renderObjects(e,t,r,s,i=null){for(let n=0,o=e.length;n<o;n++){const{object:o,geometry:a,material:u,group:l,clippingContext:d}=e[n];this._currentRenderObjectFunction(o,r,t,a,u,l,s,d,i)}}renderObject(e,t,r,s,i,n,o,a=null,u=null){let l,d,c;if(e.onBeforeRender(this,t,r,s,i,n),null!==t.overrideMaterial){const e=t.overrideMaterial;i.positionNode&&i.positionNode.isNode&&(l=e.positionNode,e.positionNode=i.positionNode),e.alphaTest=i.alphaTest,e.alphaMap=i.alphaMap,e.transparent=i.transparent||i.transmission>0,e.isShadowPassMaterial&&(e.side=null===i.shadowSide?i.side:i.shadowSide,i.depthNode&&i.depthNode.isNode&&(c=e.depthNode,e.depthNode=i.depthNode),i.castShadowNode&&i.castShadowNode.isNode&&(d=e.colorNode,e.colorNode=i.castShadowNode)),i=e}!0===i.transparent&&i.side===ce&&!1===i.forceSinglePass?(i.side=_,this._handleObjectFunction(e,i,t,r,o,n,a,"backSide"),i.side=je,this._handleObjectFunction(e,i,t,r,o,n,a,u),i.side=ce):this._handleObjectFunction(e,i,t,r,o,n,a,u),void 0!==l&&(t.overrideMaterial.positionNode=l),void 0!==c&&(t.overrideMaterial.depthNode=c),void 0!==d&&(t.overrideMaterial.colorNode=d),e.onAfterRender(this,t,r,s,i,n)}_renderObjectDirect(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n;const l=this._nodes.needsRefresh(u);if(l&&(this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u)),this._pipelines.updateForRender(u),null!==this._currentRenderBundle){this.backend.get(this._currentRenderBundle).renderObjects.push(u),u.bundle=this._currentRenderBundle.bundleGroup}this.backend.draw(u,this.info),l&&this._nodes.updateAfter(u)}_createObjectPipeline(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n,this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u),this._pipelines.getForRender(u,this._compilationPromises),this._nodes.updateAfter(u)}get compile(){return this.compileAsync}}class W_{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}class H_ extends W_{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return(e=this._buffer.byteLength)+(Jg-e%Jg)%Jg;var e}get buffer(){return this._buffer}update(){return!0}}class j_ extends H_{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let q_=0;class X_ extends j_{constructor(e,t){super("UniformBuffer_"+q_++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class K_ extends j_{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){let e=0;for(let t=0,r=this.uniforms.length;t<r;t++){const r=this.uniforms[t],{boundary:s,itemSize:i}=r,n=e%Jg;0!==n&&Jg-n-s<0?e+=Jg-n:n%s!=0&&(e+=n%s),r.offset=e/this.bytesPerElement,e+=i*this.bytesPerElement}return Math.ceil(e/Jg)*Jg}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i]!==s){this._getBufferForType(n)[i]=r[i]=s,t=!0}return t}updateVector2(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,t=!0}return t}updateVector3(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,t=!0}return t}updateVector4(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z||r[i+4]!==s.w){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,e[i+3]=r[i+3]=s.w,t=!0}return t}updateColor(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.r||r[i+1]!==s.g||r[i+2]!==s.b){const e=this.buffer;e[i+0]=r[i+0]=s.r,e[i+1]=r[i+1]=s.g,e[i+2]=r[i+2]=s.b,t=!0}return t}updateMatrix3(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(r[i+0]!==s[0]||r[i+1]!==s[1]||r[i+2]!==s[2]||r[i+4]!==s[3]||r[i+5]!==s[4]||r[i+6]!==s[5]||r[i+8]!==s[6]||r[i+9]!==s[7]||r[i+10]!==s[8]){const e=this.buffer;e[i+0]=r[i+0]=s[0],e[i+1]=r[i+1]=s[1],e[i+2]=r[i+2]=s[2],e[i+4]=r[i+4]=s[3],e[i+5]=r[i+5]=s[4],e[i+6]=r[i+6]=s[5],e[i+8]=r[i+8]=s[6],e[i+9]=r[i+9]=s[7],e[i+10]=r[i+10]=s[8],t=!0}return t}updateMatrix4(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(!1===function(e,t,r){for(let s=0,i=t.length;s<i;s++)if(e[r+s]!==t[s])return!1;return!0}(r,s,i)){this.buffer.set(s,i),function(e,t,r){for(let s=0,i=t.length;s<i;s++)e[r+s]=t[s]}(r,s,i),t=!0}return t}_getBufferForType(e){return"int"===e||"ivec2"===e||"ivec3"===e||"ivec4"===e?new Int32Array(this.buffer.buffer):"uint"===e||"uvec2"===e||"uvec3"===e||"uvec4"===e?new Uint32Array(this.buffer.buffer):this.buffer}}let Y_=0;class Q_ extends K_{constructor(e,t){super(e),this.id=Y_++,this.groupNode=t,this.isNodeUniformsGroup=!0}}let Z_=0;class J_ extends W_{constructor(e,t){super(e),this.id=Z_++,this.texture=t,this.version=t?t.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(e){const{texture:t}=this;return e!==this.generation?(this.generation=e,!0):t.isVideoTexture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}}class ev extends J_{constructor(e,t,r,s=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r,this.access=s}needsBindingsUpdate(e){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(e)}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class tv extends ev{constructor(e,t,r,s=null){super(e,t,r,s),this.isSampledCubeTexture=!0}}class rv extends ev{constructor(e,t,r,s=null){super(e,t,r,s),this.isSampledTexture3D=!0}}const sv={textureDimensions:"textureSize",equals:"equal"},iv={low:"lowp",medium:"mediump",high:"highp"},nv={swizzleAssign:!0,storageBuffer:!1},ov="\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\n";class av extends KT{constructor(e,t){super(e,t,new g_),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]},this.useComparisonMethod=!0}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==x}getMethod(e){return sv[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(this.getType(e.type)+" "+e.name);return`${this.getType(t.type)} ${t.name}( ${s.join(", ")} ) {\n\n\t${r.vars}\n\n${r.code}\n\treturn ${r.result};\n\n}`}setupPBO(e){const t=e.value;if(void 0===t.pbo){const e=t.array,r=t.count*t.itemSize,{itemSize:s}=t,i=t.array.constructor.name.toLowerCase().includes("int");let n=i?Ke:Ye;2===s?n=i?Qe:Be:3===s?n=i?Ze:Je:4===s&&(n=i?et:Le);const o={Float32Array:w,Uint8Array:fe,Uint16Array:tt,Uint32Array:b,Int8Array:rt,Int16Array:st,Int32Array:T,Uint8ClampedArray:fe},a=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(r/s))));let u=Math.ceil(r/s/a);a*u*s<r&&u++;const l=a*u*s,d=new e.constructor(l);d.set(e,0),t.array=d;const c=new Xe(t.array,a,u,n,o[t.array.constructor.name]||w);c.needsUpdate=!0,c.isPBOTexture=!0;const h=new Lu(c,null,null);h.setPrecision("high"),t.pboNode=h,t.pbo=h.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&!0!==e.node.isTextureNode&&!0!==e.node.isBufferNode?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:r}=e,s=t.value;if(this.renderer.backend.has(s)){this.renderer.backend.get(s).pbo=s.pbo}const i=this.getUniformFromNode(s.pboNode,"texture",this.shaderStage,this.context.label),n=this.getPropertyName(i);this.increaseUsage(r);const o=r.build(this,"uint"),a=this.getDataFromNode(e);let u=a.propertyName;if(void 0===u){const r=this.getVarFromNode(e);u=this.getPropertyName(r);const i=this.getDataFromNode(t);let l=i.propertySizeName;void 0===l&&(l=u+"Size",this.getVarFromNode(t,l,"uint"),this.addLineFlowCode(`${l} = uint( textureSize( ${n}, 0 ).x )`,e),i.propertySizeName=l);const{itemSize:d}=s,c="."+Ds.join("").slice(0,d),h=`ivec2(${o} % ${l}, ${o} / ${l})`,p=this.generateTextureLoad(null,n,h,null,"0");let g="vec4";s.pbo.type===b?g="uvec4":s.pbo.type===T&&(g="ivec4"),this.addLineFlowCode(`${u} = ${g}(${p})${c}`,e),a.propertyName=u}return u}generateTextureLoad(e,t,r,s,i="0"){return s?`texelFetch( ${t}, ivec3( ${r}, ${s} ), ${i} )`:`texelFetch( ${t}, ${r}, ${i} )`}generateTexture(e,t,r,s){return e.isDepthTexture?`texture( ${t}, ${r} ).x`:(s&&(r=`vec3( ${r}, ${s} )`),`texture( ${t}, ${r} )`)}generateTextureLevel(e,t,r,s){return`textureLod( ${t}, ${r}, ${s} )`}generateTextureBias(e,t,r,s){return`texture( ${t}, ${r}, ${s} )`}generateTextureGrad(e,t,r,s){return`textureGrad( ${t}, ${r}, ${s[0]}, ${s[1]} )`}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`texture( ${t}, vec3( ${r}, ${s} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`${this.getVar(e.type,e.name,e.count)};`);return t.join("\n\t")}getUniforms(e){const t=this.uniforms[e],r=[],s={};for(const i of t){let t=null,n=!1;if("texture"===i.type){const e=i.node.value;let r="";!0===e.isDataTexture&&(e.type===b?r="u":e.type===T&&(r="i")),t=e.compareFunction?`sampler2DShadow ${i.name};`:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?`${r}sampler2DArray ${i.name};`:`${r}sampler2D ${i.name};`}else if("cubeTexture"===i.type)t=`samplerCube ${i.name};`;else if("texture3D"===i.type)t=`sampler3D ${i.name};`;else if("buffer"===i.type){const e=i.node,r=this.getType(e.bufferType),s=e.bufferCount,n=s>0?s:"";t=`${e.name} {\n\t${r} ${i.name}[${n}];\n};\n`}else{t=`${this.getVectorType(i.type)} ${this.getPropertyName(i,e)};`,n=!0}const o=i.node.precision;if(null!==o&&(t=iv[o]+" "+t),n){t="\t"+t;const e=i.groupNode.name;(s[e]||(s[e]=[])).push(t)}else t="uniform "+t,r.push(t)}let i="";for(const t in s){const r=s[t];i+=this._getGLSLUniformStruct(e+"_"+t,r.join("\n"))+"\n"}return i+=r.join("\n"),i}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==T){let r=e;e.isInterleavedBufferAttribute&&(r=e.data);const s=r.array;!1==(s instanceof Uint32Array||s instanceof Int32Array)&&(t=t.slice(1))}return t}getAttributes(e){let t="";if("vertex"===e||"compute"===e){const e=this.getAttributesArray();let r=0;for(const s of e)t+=`layout( location = ${r++} ) in ${s.type} ${s.name};\n`}return t}getStructMembers(e){const t=[];for(const r of e.members)t.push(`\t${r.type} ${r.name};`);return t.join("\n")}getStructs(e){const t=[],r=this.structs[e],s=[];for(const e of r)if(e.output)for(const t of e.members)s.push(`layout( location = ${t.index} ) out ${t.type} ${t.name};`);else{let r="struct "+e.name+" {\n";r+=this.getStructMembers(e),r+="\n};\n",t.push(r)}return 0===s.length&&s.push("layout( location = 0 ) out vec4 fragColor;"),"\n"+s.join("\n")+"\n\n"+t.join("\n")}getVaryings(e){let t="";const r=this.varyings;if("vertex"===e||"compute"===e)for(const s of r){"compute"===e&&(s.needsInterpolation=!0);const r=this.getType(s.type);if(s.needsInterpolation){t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""} out ${r} ${s.name};\n`}else t+=`${r} ${s.name};\n`}else if("fragment"===e)for(const e of r)if(e.needsInterpolation){const r=this.getType(e.type);t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}in ${r} ${e.name};\n`}for(const r of this.builtins[e])t+=`${r};\n`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce(((e,t)=>e*t),1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,r=this.shaderStage){const s=this.extensions[r]||(this.extensions[r]=new Map);!1===s.has(e)&&s.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if("vertex"===e){const t=this.renderer.backend.extensions;this.object.isBatchedMesh&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const r=this.extensions[e];if(void 0!==r)for(const{name:e,behavior:s}of r.values())t.push(`#extension ${e} : ${s}`);return t.join("\n")}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=nv[e];if(void 0===t){let r;switch(t=!1,e){case"float32Filterable":r="OES_texture_float_linear";break;case"clipDistance":r="WEBGL_clip_cull_distance"}if(void 0!==r){const e=this.renderer.backend.extensions;e.has(r)&&(e.get(r),t=!0)}nv[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let r=0;r<e.length;r++){const s=e[r],i=this.getPropertyName(s.attributeNode);t+=`${s.varyingName} = ${i};\n\t`}return t}_getGLSLUniformStruct(e,t){return`\nlayout( std140 ) uniform ${e} {\n${t}\n};`}_getGLSLVertexCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions \n${e.extensions}\n\n// precision\n${ov}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// attributes\n${e.attributes}\n\n// codes\n${e.codes}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// transforms\n\t${e.transforms}\n\n\t// flow\n\t${e.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`}_getGLSLFragmentCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// precision\n${ov}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// codes\n${e.codes}\n\n// structs\n${e.structs}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let r="// code\n\n";r+=this.flowCode[t];const s=this.flowNodes[t],i=s[s.length-1];for(const e of s){const s=this.getFlowData(e),n=e.name;n&&(r.length>0&&(r+="\n"),r+=`\t// flow -> ${n}\n\t`),r+=`${s.code}\n\t`,e===i&&"compute"!==t&&(r+="// result\n\t","vertex"===t?(r+="gl_Position = ",r+=`${s.result};`):"fragment"===t&&(e.outputNode.isOutputStructNode||(r+="fragColor = ",r+=`${s.result};`)))}const n=e[t];n.extensions=this.getExtensions(t),n.uniforms=this.getUniforms(t),n.attributes=this.getAttributes(t),n.varyings=this.getVaryings(t),n.vars=this.getVars(t),n.structs=this.getStructs(t),n.codes=this.getCodes(t),n.transforms=this.getTransforms(t),n.flow=r}null!==this.material?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);let o=n.uniformGPU;if(void 0===o){const s=e.groupNode,a=s.name,u=this.getBindGroupArray(a,r);if("texture"===t)o=new ev(i.name,i.node,s),u.push(o);else if("cubeTexture"===t)o=new tv(i.name,i.node,s),u.push(o);else if("texture3D"===t)o=new rv(i.name,i.node,s),u.push(o);else if("buffer"===t){e.name=`NodeBuffer_${e.id}`,i.name=`buffer${e.id}`;const t=new X_(e,s);t.name=e.name,u.push(t),o=t}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let n=e[a];void 0===n&&(n=new Q_(r+"_"+a,s),e[a]=n,u.push(n)),o=this.getNodeUniform(i,t),n.addUniform(o)}n.uniformGPU=o}return i}}let uv=null,lv=null;class dv{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null,this.timestampQueryPool={render:null,compute:null}}async init(e){this.renderer=e}get coordinateSystem(){}beginRender(){}finishRender(){}beginCompute(){}finishCompute(){}draw(){}compute(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}updateBinding(){}createRenderPipeline(){}createComputePipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}destroySampler(){}createDefaultTexture(){}createTexture(){}updateTexture(){}generateMipmaps(){}destroyTexture(){}async copyTextureToBuffer(){}copyTextureToTexture(){}copyFramebufferToTexture(){}createAttribute(){}createIndexAttribute(){}createStorageAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}updateViewport(){}isOccluded(){}async resolveTimestampsAsync(e="render"){if(!this.trackTimestamp)return void it("WebGPURenderer: Timestamp tracking is disabled.");const t=this.timestampQueryPool[e];if(!t)return void it(`WebGPURenderer: No timestamp query pool for type '${e}' found.`);const r=await t.resolveQueriesAsync();return this.renderer.info[e].timestamp=r,r}async waitForGPU(){}async getArrayBufferAsync(){}async hasFeatureAsync(){}hasFeature(){}getMaxAnisotropy(){}getDrawingBufferSize(){return uv=uv||new t,this.renderer.getDrawingBufferSize(uv)}setScissorTest(){}getClearColor(){const e=this.renderer;return lv=lv||new Em,e.getClearColor(lv),lv.getRGB(lv,this.renderer.currentColorSpace),lv}getDomElement(){let e=this.domElement;return null===e&&(e=void 0!==this.parameters.canvas?this.parameters.canvas:nt(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${Ge} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let cv,hv,pv=0;class gv{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[1^this.activeBufferIndex]}switchBuffers(){this.activeBufferIndex^=1}}class mv{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:s}=r,i=e.array,n=e.usage||s.STATIC_DRAW,o=e.isInterleavedBufferAttribute?e.data:e,a=r.get(o);let u,l=a.bufferGPU;if(void 0===l&&(l=this._createBuffer(s,t,i,n),a.bufferGPU=l,a.bufferType=t,a.version=o.version),i instanceof Float32Array)u=s.FLOAT;else if(i instanceof Uint16Array)u=e.isFloat16BufferAttribute?s.HALF_FLOAT:s.UNSIGNED_SHORT;else if(i instanceof Int16Array)u=s.SHORT;else if(i instanceof Uint32Array)u=s.UNSIGNED_INT;else if(i instanceof Int32Array)u=s.INT;else if(i instanceof Int8Array)u=s.BYTE;else if(i instanceof Uint8Array)u=s.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+i);u=s.UNSIGNED_BYTE}let d={bufferGPU:l,bufferType:t,type:u,byteLength:i.byteLength,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:u===s.INT||u===s.UNSIGNED_INT||e.gpuType===T,id:pv++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(s,t,i,n);d=new gv(d,e)}r.set(e,d)}updateAttribute(e){const t=this.backend,{gl:r}=t,s=e.array,i=e.isInterleavedBufferAttribute?e.data:e,n=t.get(i),o=n.bufferType,a=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(r.bindBuffer(o,n.bufferGPU),0===a.length)r.bufferSubData(o,0,s);else{for(let e=0,t=a.length;e<t;e++){const t=a[e];r.bufferSubData(o,t.start*s.BYTES_PER_ELEMENT,s,t.start,t.count)}i.clearUpdateRanges()}r.bindBuffer(o,null),n.version=i.version}destroyAttribute(e){const t=this.backend,{gl:r}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const s=t.get(e);r.deleteBuffer(s.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:r}=t,s=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:i}=t.get(s),n=e.array,o=n.byteLength;r.bindBuffer(r.COPY_READ_BUFFER,i);const a=r.createBuffer();r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.bufferData(r.COPY_WRITE_BUFFER,o,r.STREAM_READ),r.copyBufferSubData(r.COPY_READ_BUFFER,r.COPY_WRITE_BUFFER,0,0,o),await t.utils._clientWaitAsync();const u=new e.array.constructor(n.length);return r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.getBufferSubData(r.COPY_WRITE_BUFFER,0,u),r.deleteBuffer(a),r.bindBuffer(r.COPY_READ_BUFFER,null),r.bindBuffer(r.COPY_WRITE_BUFFER,null),u.buffer}_createBuffer(e,t,r,s){const i=e.createBuffer();return e.bindBuffer(t,i),e.bufferData(t,r,s),e.bindBuffer(t,null),i}}class fv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},this._init()}_init(){const e=this.gl;cv={[ot]:e.FUNC_ADD,[at]:e.FUNC_SUBTRACT,[ut]:e.FUNC_REVERSE_SUBTRACT},hv={[lt]:e.ZERO,[dt]:e.ONE,[ct]:e.SRC_COLOR,[ht]:e.SRC_ALPHA,[pt]:e.SRC_ALPHA_SATURATE,[gt]:e.DST_COLOR,[mt]:e.DST_ALPHA,[ft]:e.ONE_MINUS_SRC_COLOR,[yt]:e.ONE_MINUS_SRC_ALPHA,[xt]:e.ONE_MINUS_DST_COLOR,[bt]:e.ONE_MINUS_DST_ALPHA};const t=e.getParameter(e.SCISSOR_BOX),r=e.getParameter(e.VIEWPORT);this.currentScissor=(new s).fromArray(t),this.currentViewport=(new s).fromArray(r),this._tempVec4=new s}enable(e){const{enabled:t}=this;!0!==t[e]&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;!1!==t[e]&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==Tt?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===_t?t.cullFace(t.BACK):e===vt?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:r}=this;e!==t&&(r.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,r,s,i,n,o,a){const{gl:u}=this;if(e!==D){if(!1===this.currentBlendingEnabled&&(this.enable(u.BLEND),this.currentBlendingEnabled=!0),e===Nt)i=i||t,n=n||r,o=o||s,t===this.currentBlendEquation&&i===this.currentBlendEquationAlpha||(u.blendEquationSeparate(cv[t],cv[i]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=i),r===this.currentBlendSrc&&s===this.currentBlendDst&&n===this.currentBlendSrcAlpha&&o===this.currentBlendDstAlpha||(u.blendFuncSeparate(hv[r],hv[s],hv[n],hv[o]),this.currentBlendSrc=r,this.currentBlendDst=s,this.currentBlendSrcAlpha=n,this.currentBlendDstAlpha=o),this.currentBlending=e,this.currentPremultipledAlpha=!1;else if(e!==this.currentBlending||a!==this.currentPremultipledAlpha){if(this.currentBlendEquation===ot&&this.currentBlendEquationAlpha===ot||(u.blendEquation(u.FUNC_ADD),this.currentBlendEquation=ot,this.currentBlendEquationAlpha=ot),a)switch(e){case P:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case At:u.blendFunc(u.ONE,u.ONE);break;case Rt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case St:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case P:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case At:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case Rt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case St:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=a}}else!0===this.currentBlendingEnabled&&(this.disable(u.BLEND),this.currentBlendingEnabled=!1)}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case Pt:t.depthFunc(t.NEVER);break;case Ut:t.depthFunc(t.ALWAYS);break;case Ft:t.depthFunc(t.LESS);break;case Bt:t.depthFunc(t.LEQUAL);break;case Mt:t.depthFunc(t.EQUAL);break;case wt:t.depthFunc(t.GEQUAL);break;case Ct:t.depthFunc(t.GREATER);break;case Et:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}scissor(e,t,r,s){const i=this._tempVec4.set(e,t,r,s);if(!1===this.currentScissor.equals(i)){const{gl:e}=this;e.scissor(i.x,i.y,i.z,i.w),this.currentScissor.copy(i)}}viewport(e,t,r,s){const i=this._tempVec4.set(e,t,r,s);if(!1===this.currentViewport.equals(i)){const{gl:e}=this;e.viewport(i.x,i.y,i.z,i.w),this.currentViewport.copy(i)}}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,r){this.currentStencilFunc===e&&this.currentStencilRef===t&&this.currentStencilFuncMask===r||(this.gl.stencilFunc(e,t,r),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=r)}setStencilOp(e,t,r){this.currentStencilFail===e&&this.currentStencilZFail===t&&this.currentStencilZPass===r||(this.gl.stencilOp(e,t,r),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=r)}setMaterial(e,t,r){const{gl:s}=this;e.side===ce?this.disable(s.CULL_FACE):this.enable(s.CULL_FACE);let i=e.side===_;t&&(i=!i),this.setFlipSided(i),e.blending===P&&!1===e.transparent?this.setBlending(D):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const n=e.stencilWrite;if(this.setStencilTest(n),n&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage&&this.backend.renderer.samples>1?this.enable(s.SAMPLE_ALPHA_TO_COVERAGE):this.disable(s.SAMPLE_ALPHA_TO_COVERAGE),r>0&&this.currentClippingPlanes!==r){const e=12288;for(let t=0;t<8;t++)t<r?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,r){const{gl:s}=this;e?(this.enable(s.POLYGON_OFFSET_FILL),this.currentPolygonOffsetFactor===t&&this.currentPolygonOffsetUnits===r||(s.polygonOffset(t,r),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=r)):this.disable(s.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}bindFramebuffer(e,t){const{gl:r,currentBoundFramebuffers:s}=this;return s[e]!==t&&(r.bindFramebuffer(e,t),s[e]=t,e===r.DRAW_FRAMEBUFFER&&(s[r.FRAMEBUFFER]=t),e===r.FRAMEBUFFER&&(s[r.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:r}=this;let s=[],i=!1;if(null!==e.textures){s=this.currentDrawbuffers.get(t),void 0===s&&(s=[],this.currentDrawbuffers.set(t,s));const n=e.textures;if(s.length!==n.length||s[0]!==r.COLOR_ATTACHMENT0){for(let e=0,t=n.length;e<t;e++)s[e]=r.COLOR_ATTACHMENT0+e;s.length=n.length,i=!0}}else s[0]!==r.BACK&&(s[0]=r.BACK,i=!0);i&&r.drawBuffers(s)}activeTexture(e){const{gl:t,currentTextureSlot:r,maxTextures:s}=this;void 0===e&&(e=t.TEXTURE0+s-1),r!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,r){const{gl:s,currentTextureSlot:i,currentBoundTextures:n,maxTextures:o}=this;void 0===r&&(r=null===i?s.TEXTURE0+o-1:i);let a=n[r];void 0===a&&(a={type:void 0,texture:void 0},n[r]=a),a.type===e&&a.texture===t||(i!==r&&(s.activeTexture(r),this.currentTextureSlot=r),s.bindTexture(e,t),a.type=e,a.texture=t)}bindBufferBase(e,t,r){const{gl:s}=this,i=`${e}-${t}`;return this.currentBoundBufferBases[i]!==r&&(s.bindBufferBase(e,t,r),this.currentBoundBufferBases[i]=r,!0)}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:r}=this,s=r[t];void 0!==s&&void 0!==s.type&&(e.bindTexture(s.type,null),s.type=void 0,s.texture=void 0)}}class yv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=x){const{gl:r,extensions:s}=this;let i;if(e===fe)return r.UNSIGNED_BYTE;if(e===It)return r.UNSIGNED_SHORT_4_4_4_4;if(e===Lt)return r.UNSIGNED_SHORT_5_5_5_1;if(e===Dt)return r.UNSIGNED_INT_5_9_9_9_REV;if(e===rt)return r.BYTE;if(e===st)return r.SHORT;if(e===tt)return r.UNSIGNED_SHORT;if(e===T)return r.INT;if(e===b)return r.UNSIGNED_INT;if(e===w)return r.FLOAT;if(e===Te)return r.HALF_FLOAT;if(e===Vt)return r.ALPHA;if(e===Je)return r.RGB;if(e===Le)return r.RGBA;if(e===Ot)return r.LUMINANCE;if(e===Gt)return r.LUMINANCE_ALPHA;if(e===ge)return r.DEPTH_COMPONENT;if(e===pe)return r.DEPTH_STENCIL;if(e===Ye)return r.RED;if(e===Ke)return r.RED_INTEGER;if(e===Be)return r.RG;if(e===Qe)return r.RG_INTEGER;if(e===et)return r.RGBA_INTEGER;if(e===kt||e===zt||e===$t||e===Wt)if(t===We){if(i=s.get("WEBGL_compressed_texture_s3tc_srgb"),null===i)return null;if(e===kt)return i.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===zt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===$t)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Wt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(i=s.get("WEBGL_compressed_texture_s3tc"),null===i)return null;if(e===kt)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===zt)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===$t)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Wt)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===Ht||e===jt||e===qt||e===Xt){if(i=s.get("WEBGL_compressed_texture_pvrtc"),null===i)return null;if(e===Ht)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===jt)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===qt)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===Xt)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===Kt||e===Yt||e===Qt){if(i=s.get("WEBGL_compressed_texture_etc"),null===i)return null;if(e===Kt||e===Yt)return t===We?i.COMPRESSED_SRGB8_ETC2:i.COMPRESSED_RGB8_ETC2;if(e===Qt)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:i.COMPRESSED_RGBA8_ETC2_EAC}if(e===Zt||e===Jt||e===er||e===tr||e===rr||e===sr||e===ir||e===nr||e===or||e===ar||e===ur||e===lr||e===dr||e===cr){if(i=s.get("WEBGL_compressed_texture_astc"),null===i)return null;if(e===Zt)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:i.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===Jt)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:i.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===er)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:i.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===tr)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:i.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===rr)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:i.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===sr)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:i.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===ir)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:i.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===nr)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:i.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===or)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:i.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===ar)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:i.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===ur)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:i.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===lr)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:i.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===dr)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:i.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===cr)return t===We?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:i.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===hr){if(i=s.get("EXT_texture_compression_bptc"),null===i)return null;if(e===hr)return t===We?i.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:i.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(e===pr||e===gr||e===mr||e===fr){if(i=s.get("EXT_texture_compression_rgtc"),null===i)return null;if(e===hr)return i.COMPRESSED_RED_RGTC1_EXT;if(e===gr)return i.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===mr)return i.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===fr)return i.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===me?r.UNSIGNED_INT_24_8:void 0!==r[e]?r[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise(((r,s)=>{!function i(){const n=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(n===e.WAIT_FAILED)return e.deleteSync(t),void s();n!==e.TIMEOUT_EXPIRED?(e.deleteSync(t),r()):requestAnimationFrame(i)}()}))}}let xv,bv,Tv,_v=!1;class vv{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},!1===_v&&(this._init(),_v=!0)}_init(){const e=this.gl;xv={[yr]:e.REPEAT,[xr]:e.CLAMP_TO_EDGE,[br]:e.MIRRORED_REPEAT},bv={[Tr]:e.NEAREST,[_r]:e.NEAREST_MIPMAP_NEAREST,[Ve]:e.NEAREST_MIPMAP_LINEAR,[$]:e.LINEAR,[De]:e.LINEAR_MIPMAP_NEAREST,[B]:e.LINEAR_MIPMAP_LINEAR},Tv={[vr]:e.NEVER,[Nr]:e.ALWAYS,[we]:e.LESS,[Sr]:e.LEQUAL,[Rr]:e.EQUAL,[Ar]:e.GEQUAL,[Er]:e.GREATER,[Cr]:e.NOTEQUAL}}getGLTextureType(e){const{gl:t}=this;let r;return r=!0===e.isCubeTexture?t.TEXTURE_CUBE_MAP:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:!0===e.isData3DTexture?t.TEXTURE_3D:t.TEXTURE_2D,r}getInternalFormat(e,t,r,s,i=!1){const{gl:n,extensions:o}=this;if(null!==e){if(void 0!==n[e])return n[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=t;return t===n.RED&&(r===n.FLOAT&&(a=n.R32F),r===n.HALF_FLOAT&&(a=n.R16F),r===n.UNSIGNED_BYTE&&(a=n.R8),r===n.UNSIGNED_SHORT&&(a=n.R16),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RED_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.R8UI),r===n.UNSIGNED_SHORT&&(a=n.R16UI),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RG&&(r===n.FLOAT&&(a=n.RG32F),r===n.HALF_FLOAT&&(a=n.RG16F),r===n.UNSIGNED_BYTE&&(a=n.RG8),r===n.UNSIGNED_SHORT&&(a=n.RG16),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RG_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RG8UI),r===n.UNSIGNED_SHORT&&(a=n.RG16UI),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RGB&&(r===n.FLOAT&&(a=n.RGB32F),r===n.HALF_FLOAT&&(a=n.RGB16F),r===n.UNSIGNED_BYTE&&(a=n.RGB8),r===n.UNSIGNED_SHORT&&(a=n.RGB16),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I),r===n.UNSIGNED_BYTE&&(a=s===We&&!1===i?n.SRGB8:n.RGB8),r===n.UNSIGNED_SHORT_5_6_5&&(a=n.RGB565),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGB4),r===n.UNSIGNED_INT_5_9_9_9_REV&&(a=n.RGB9_E5)),t===n.RGB_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGB8UI),r===n.UNSIGNED_SHORT&&(a=n.RGB16UI),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I)),t===n.RGBA&&(r===n.FLOAT&&(a=n.RGBA32F),r===n.HALF_FLOAT&&(a=n.RGBA16F),r===n.UNSIGNED_BYTE&&(a=n.RGBA8),r===n.UNSIGNED_SHORT&&(a=n.RGBA16),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I),r===n.UNSIGNED_BYTE&&(a=s===We&&!1===i?n.SRGB8_ALPHA8:n.RGBA8),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGBA4),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1)),t===n.RGBA_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGBA8UI),r===n.UNSIGNED_SHORT&&(a=n.RGBA16UI),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I)),t===n.DEPTH_COMPONENT&&(r===n.UNSIGNED_SHORT&&(a=n.DEPTH_COMPONENT16),r===n.UNSIGNED_INT&&(a=n.DEPTH_COMPONENT24),r===n.FLOAT&&(a=n.DEPTH_COMPONENT32F)),t===n.DEPTH_STENCIL&&r===n.UNSIGNED_INT_24_8&&(a=n.DEPTH24_STENCIL8),a!==n.R16F&&a!==n.R32F&&a!==n.RG16F&&a!==n.RG32F&&a!==n.RGBA16F&&a!==n.RGBA32F||o.get("EXT_color_buffer_float"),a}setTextureParameters(e,t){const{gl:r,extensions:s,backend:i}=this;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,t.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,t.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,r.NONE),r.texParameteri(e,r.TEXTURE_WRAP_S,xv[t.wrapS]),r.texParameteri(e,r.TEXTURE_WRAP_T,xv[t.wrapT]),e!==r.TEXTURE_3D&&e!==r.TEXTURE_2D_ARRAY||r.texParameteri(e,r.TEXTURE_WRAP_R,xv[t.wrapR]),r.texParameteri(e,r.TEXTURE_MAG_FILTER,bv[t.magFilter]);const n=void 0!==t.mipmaps&&t.mipmaps.length>0,o=t.minFilter===$&&n?B:t.minFilter;if(r.texParameteri(e,r.TEXTURE_MIN_FILTER,bv[o]),t.compareFunction&&(r.texParameteri(e,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(e,r.TEXTURE_COMPARE_FUNC,Tv[t.compareFunction])),!0===s.has("EXT_texture_filter_anisotropic")){if(t.magFilter===Tr)return;if(t.minFilter!==Ve&&t.minFilter!==B)return;if(t.type===w&&!1===s.has("OES_texture_float_linear"))return;if(t.anisotropy>1){const n=s.get("EXT_texture_filter_anisotropic");r.texParameterf(e,n.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,i.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:r,defaultTextures:s}=this,i=this.getGLTextureType(e);let n=s[i];void 0===n&&(n=t.createTexture(),r.state.bindTexture(i,n),t.texParameteri(i,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(i,t.TEXTURE_MAG_FILTER,t.NEAREST),s[i]=n),r.set(e,{textureGPU:n,glTextureType:i,isDefault:!0})}createTexture(e,t){const{gl:r,backend:s}=this,{levels:i,width:n,height:o,depth:a}=t,u=s.utils.convert(e.format,e.colorSpace),l=s.utils.convert(e.type),d=this.getInternalFormat(e.internalFormat,u,l,e.colorSpace,e.isVideoTexture),c=r.createTexture(),h=this.getGLTextureType(e);s.state.bindTexture(h,c),this.setTextureParameters(h,e),e.isDataArrayTexture||e.isCompressedArrayTexture?r.texStorage3D(r.TEXTURE_2D_ARRAY,i,d,n,o,a):e.isData3DTexture?r.texStorage3D(r.TEXTURE_3D,i,d,n,o,a):e.isVideoTexture||r.texStorage2D(h,i,d,n,o),s.set(e,{textureGPU:c,glTextureType:h,glFormat:u,glType:l,glInternalFormat:d})}copyBufferToTexture(e,t){const{gl:r,backend:s}=this,{textureGPU:i,glTextureType:n,glFormat:o,glType:a}=s.get(t),{width:u,height:l}=t.source.data;r.bindBuffer(r.PIXEL_UNPACK_BUFFER,e),s.state.bindTexture(n,i),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!1),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),r.texSubImage2D(n,0,0,0,u,l,o,a,0),r.bindBuffer(r.PIXEL_UNPACK_BUFFER,null),s.state.unbindTexture()}updateTexture(e,t){const{gl:r}=this,{width:s,height:i}=t,{textureGPU:n,glTextureType:o,glFormat:a,glType:u,glInternalFormat:l}=this.backend.get(e);if(e.isRenderTargetTexture||void 0===n)return;const d=e=>e.isDataTexture?e.image.data:"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||e instanceof OffscreenCanvas?e:e.data;if(this.backend.state.bindTexture(o,n),this.setTextureParameters(o,e),e.isCompressedTexture){const s=e.mipmaps,i=t.image;for(let t=0;t<s.length;t++){const n=s[t];e.isCompressedArrayTexture?e.format!==r.RGBA?null!==a?r.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,n.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,u,n.data):null!==a?r.compressedTexSubImage2D(r.TEXTURE_2D,t,0,0,n.width,n.height,a,n.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const e=t.images;for(let t=0;t<6;t++){const n=d(e[t]);r.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,s,i,a,u,n)}}else if(e.isDataArrayTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isData3DTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isVideoTexture)e.update(),r.texImage2D(o,0,l,a,u,t.image);else{const e=d(t.image);r.texSubImage2D(o,0,0,0,s,i,a,u,e)}}generateMipmaps(e){const{gl:t,backend:r}=this,{textureGPU:s,glTextureType:i}=r.get(e);r.state.bindTexture(i,s),t.generateMipmap(i)}deallocateRenderBuffers(e){const{gl:t,backend:r}=this;if(e){const s=r.get(e);if(s.renderBufferStorageSetup=void 0,s.framebuffers){for(const e in s.framebuffers)t.deleteFramebuffer(s.framebuffers[e]);delete s.framebuffers}if(s.depthRenderbuffer&&(t.deleteRenderbuffer(s.depthRenderbuffer),delete s.depthRenderbuffer),s.stencilRenderbuffer&&(t.deleteRenderbuffer(s.stencilRenderbuffer),delete s.stencilRenderbuffer),s.msaaFrameBuffer&&(t.deleteFramebuffer(s.msaaFrameBuffer),delete s.msaaFrameBuffer),s.msaaRenderbuffers){for(let e=0;e<s.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(s.msaaRenderbuffers[e]);delete s.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:r}=this,{textureGPU:s,renderTarget:i}=r.get(e);this.deallocateRenderBuffers(i),t.deleteTexture(s),r.delete(e)}copyTextureToTexture(e,t,r=null,s=null,i=0){const{gl:n,backend:o}=this,{state:a}=this.backend,{textureGPU:u,glTextureType:l,glType:d,glFormat:c}=o.get(t);let h,p,g,m,f,y;null!==r?(h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=r.min.x,m=r.min.y):(h=e.image.width,p=e.image.height,g=0,m=0),null!==s?(f=s.x,y=s.y):(f=0,y=0),a.bindTexture(l,u),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,t.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment);const x=n.getParameter(n.UNPACK_ROW_LENGTH),b=n.getParameter(n.UNPACK_IMAGE_HEIGHT),T=n.getParameter(n.UNPACK_SKIP_PIXELS),_=n.getParameter(n.UNPACK_SKIP_ROWS),v=n.getParameter(n.UNPACK_SKIP_IMAGES),N=e.isCompressedTexture?e.mipmaps[i]:e.image;if(n.pixelStorei(n.UNPACK_ROW_LENGTH,N.width),n.pixelStorei(n.UNPACK_IMAGE_HEIGHT,N.height),n.pixelStorei(n.UNPACK_SKIP_PIXELS,g),n.pixelStorei(n.UNPACK_SKIP_ROWS,m),e.isRenderTargetTexture||e.isDepthTexture){const r=o.get(e),s=o.get(t),i=o.get(r.renderTarget),u=o.get(s.renderTarget),l=i.framebuffers[r.cacheKey],d=u.framebuffers[s.cacheKey];a.bindFramebuffer(n.READ_FRAMEBUFFER,l),a.bindFramebuffer(n.DRAW_FRAMEBUFFER,d);let c=n.COLOR_BUFFER_BIT;e.isDepthTexture&&(c=n.DEPTH_BUFFER_BIT),n.blitFramebuffer(g,m,h,p,f,y,h,p,c,n.NEAREST),a.bindFramebuffer(n.READ_FRAMEBUFFER,null),a.bindFramebuffer(n.DRAW_FRAMEBUFFER,null)}else e.isDataTexture?n.texSubImage2D(n.TEXTURE_2D,i,f,y,h,p,c,d,N.data):e.isCompressedTexture?n.compressedTexSubImage2D(n.TEXTURE_2D,i,f,y,N.width,N.height,c,N.data):n.texSubImage2D(n.TEXTURE_2D,i,f,y,h,p,c,d,N);n.pixelStorei(n.UNPACK_ROW_LENGTH,x),n.pixelStorei(n.UNPACK_IMAGE_HEIGHT,b),n.pixelStorei(n.UNPACK_SKIP_PIXELS,T),n.pixelStorei(n.UNPACK_SKIP_ROWS,_),n.pixelStorei(n.UNPACK_SKIP_IMAGES,v),0===i&&t.generateMipmaps&&n.generateMipmap(n.TEXTURE_2D),a.unbindTexture()}copyFramebufferToTexture(e,t,r){const{gl:s}=this,{state:i}=this.backend,{textureGPU:n}=this.backend.get(e),{x:o,y:a,z:u,w:l}=r,d=!0===e.isDepthTexture||t.renderTarget&&t.renderTarget.samples>0,c=t.renderTarget?t.renderTarget.height:this.backend.getDrawingBufferSize().y;if(d){const r=0!==o||0!==a;let d,h;if(!0===e.isDepthTexture?(d=s.DEPTH_BUFFER_BIT,h=s.DEPTH_ATTACHMENT,t.stencil&&(d|=s.STENCIL_BUFFER_BIT)):(d=s.COLOR_BUFFER_BIT,h=s.COLOR_ATTACHMENT0),r){const e=this.backend.get(t.renderTarget),r=e.framebuffers[t.getCacheKey()],h=e.msaaFrameBuffer;i.bindFramebuffer(s.DRAW_FRAMEBUFFER,r),i.bindFramebuffer(s.READ_FRAMEBUFFER,h);const p=c-a-l;s.blitFramebuffer(o,p,o+u,p+l,o,p,o+u,p+l,d,s.NEAREST),i.bindFramebuffer(s.READ_FRAMEBUFFER,r),i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,p,u,l),i.unbindTexture()}else{const e=s.createFramebuffer();i.bindFramebuffer(s.DRAW_FRAMEBUFFER,e),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,h,s.TEXTURE_2D,n,0),s.blitFramebuffer(0,0,u,l,0,0,u,l,d,s.NEAREST),s.deleteFramebuffer(e)}}else i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,c-l-a,u,l),i.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t,r,s=!1){const{gl:i}=this,n=t.renderTarget,{depthTexture:o,depthBuffer:a,stencilBuffer:u,width:l,height:d}=n;if(i.bindRenderbuffer(i.RENDERBUFFER,e),a&&!u){let t=i.DEPTH_COMPONENT24;if(!0===s){this.extensions.get("WEBGL_multisampled_render_to_texture").renderbufferStorageMultisampleEXT(i.RENDERBUFFER,n.samples,t,l,d)}else r>0?(o&&o.isDepthTexture&&o.type===i.FLOAT&&(t=i.DEPTH_COMPONENT32F),i.renderbufferStorageMultisample(i.RENDERBUFFER,r,t,l,d)):i.renderbufferStorage(i.RENDERBUFFER,t,l,d);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,e)}else a&&u&&(r>0?i.renderbufferStorageMultisample(i.RENDERBUFFER,r,i.DEPTH24_STENCIL8,l,d):i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,l,d),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,e))}async copyTextureToBuffer(e,t,r,s,i,n){const{backend:o,gl:a}=this,{textureGPU:u,glFormat:l,glType:d}=this.backend.get(e),c=a.createFramebuffer();a.bindFramebuffer(a.READ_FRAMEBUFFER,c);const h=e.isCubeTexture?a.TEXTURE_CUBE_MAP_POSITIVE_X+n:a.TEXTURE_2D;a.framebufferTexture2D(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,h,u,0);const p=this._getTypedArrayType(d),g=s*i*this._getBytesPerTexel(d,l),m=a.createBuffer();a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.bufferData(a.PIXEL_PACK_BUFFER,g,a.STREAM_READ),a.readPixels(t,r,s,i,l,d,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await o.utils._clientWaitAsync();const f=new p(g/p.BYTES_PER_ELEMENT);return a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,f),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteFramebuffer(c),f}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:r}=this;let s=0;return e===r.UNSIGNED_BYTE&&(s=1),e!==r.UNSIGNED_SHORT_4_4_4_4&&e!==r.UNSIGNED_SHORT_5_5_5_1&&e!==r.UNSIGNED_SHORT_5_6_5&&e!==r.UNSIGNED_SHORT&&e!==r.HALF_FLOAT||(s=2),e!==r.UNSIGNED_INT&&e!==r.FLOAT||(s=4),t===r.RGBA?4*s:t===r.RGB?3*s:t===r.ALPHA?s:void 0}}class Nv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return void 0===t&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class Sv{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(null!==this.maxAnisotropy)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(!0===t.has("EXT_texture_filter_anisotropic")){const r=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const Rv={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class Av{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:r,mode:s,object:i,type:n,info:o,index:a}=this;0!==a?r.drawElements(s,t,n,e):r.drawArrays(s,e,t),o.update(i,t,s,1)}renderInstances(e,t,r){const{gl:s,mode:i,type:n,index:o,object:a,info:u}=this;0!==r&&(0!==o?s.drawElementsInstanced(i,t,n,e,r):s.drawArraysInstanced(i,e,t,r),u.update(a,t,i,r))}renderMultiDraw(e,t,r){const{extensions:s,mode:i,object:n,info:o}=this;if(0===r)return;const a=s.get("WEBGL_multi_draw");if(null===a)for(let s=0;s<r;s++)this.render(e[s],t[s]);else{0!==this.index?a.multiDrawElementsWEBGL(i,t,0,this.type,e,0,r):a.multiDrawArraysWEBGL(i,e,0,t,0,r);let s=0;for(let e=0;e<r;e++)s+=t[e];o.update(n,s,i,1)}}renderMultiDrawInstances(e,t,r,s){const{extensions:i,mode:n,object:o,info:a}=this;if(0===r)return;const u=i.get("WEBGL_multi_draw");if(null===u)for(let i=0;i<r;i++)this.renderInstances(e[i],t[i],s[i]);else{0!==this.index?u.multiDrawElementsInstancedWEBGL(n,t,0,this.type,e,0,s,0,r):u.multiDrawArraysInstancedWEBGL(n,e,0,t,0,s,0,r);let i=0;for(let e=0;e<r;e++)i+=t[e]*s[e];a.update(o,i,n,1)}}}class Ev{constructor(e=256){this.trackTimestamp=!0,this.maxQueries=e,this.currentQueryIndex=0,this.queryOffsets=new Map,this.isDisposed=!1,this.lastValue=0,this.pendingResolve=!1}allocateQueriesForContext(){}async resolveQueriesAsync(){}dispose(){}}class Cv extends Ev{constructor(e,t,r=2048){if(super(r),this.gl=e,this.type=t,this.ext=e.getExtension("EXT_disjoint_timer_query_webgl2")||e.getExtension("EXT_disjoint_timer_query"),!this.ext)return console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled."),void(this.trackTimestamp=!1);this.queries=[];for(let t=0;t<this.maxQueries;t++)this.queries.push(e.createQuery());this.activeQuery=null,this.queryStates=new Map}allocateQueriesForContext(e){if(!this.trackTimestamp)return null;if(this.currentQueryIndex+2>this.maxQueries)return it(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryStates.set(t,"inactive"),this.queryOffsets.set(e.id,t),t}beginQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null==t)return;if(null!==this.activeQuery)return;const r=this.queries[t];if(r)try{"inactive"===this.queryStates.get(t)&&(this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,r),this.activeQuery=t,this.queryStates.set(t,"started"))}catch(e){console.error("Error in beginQuery:",e),this.activeQuery=null,this.queryStates.set(t,"inactive")}}endQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null!=t&&this.activeQuery===t)try{this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.queryStates.set(t,"ended"),this.activeQuery=null}catch(e){console.error("Error in endQuery:",e),this.queryStates.set(t,"inactive"),this.activeQuery=null}}async resolveQueriesAsync(){if(!this.trackTimestamp||this.pendingResolve)return this.lastValue;this.pendingResolve=!0;try{const e=[];for(const[t,r]of this.queryStates)if("ended"===r){const r=this.queries[t];e.push(this.resolveQuery(r))}if(0===e.length)return this.lastValue;const t=(await Promise.all(e)).reduce(((e,t)=>e+t),0);return this.lastValue=t,this.currentQueryIndex=0,this.queryOffsets.clear(),this.queryStates.clear(),this.activeQuery=null,t}catch(e){return console.error("Error resolving queries:",e),this.lastValue}finally{this.pendingResolve=!1}}async resolveQuery(e){return new Promise((t=>{if(this.isDisposed)return void t(this.lastValue);let r,s=!1;const i=e=>{s||(s=!0,r&&(clearTimeout(r),r=null),t(e))},n=()=>{if(this.isDisposed)i(this.lastValue);else try{if(this.gl.getParameter(this.ext.GPU_DISJOINT_EXT))return void i(this.lastValue);if(!this.gl.getQueryParameter(e,this.gl.QUERY_RESULT_AVAILABLE))return void(r=setTimeout(n,1));const s=this.gl.getQueryParameter(e,this.gl.QUERY_RESULT);t(Number(s)/1e6)}catch(e){console.error("Error checking query:",e),t(this.lastValue)}};n()}))}dispose(){if(!this.isDisposed&&(this.isDisposed=!0,this.trackTimestamp)){for(const e of this.queries)this.gl.deleteQuery(e);this.queries=[],this.queryStates.clear(),this.queryOffsets.clear(),this.lastValue=0,this.activeQuery=null}}}class wv extends dv{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this.trackTimestamp=!0===e.trackTimestamp,this._currentContext=null,this._knownBindings=new WeakSet,this._xrFamebuffer=null}init(e){super.init(e);const t=this.parameters,r=void 0!==t.context?t.context:e.domElement.getContext("webgl2",{antialias:!1,alpha:!0,depth:!1,stencil:!1});function s(t){t.preventDefault();const r={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(r)}this._onContextLost=s,e.domElement.addEventListener("webglcontextlost",s,!1),this.gl=r,this.extensions=new Nv(this),this.capabilities=new Sv(this),this.attributeUtils=new mv(this),this.textureUtils=new vv(this),this.bufferRenderer=new Av(this),this.state=new fv(this),this.utils=new yv(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return l}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}async makeXRCompatible(){!0!==this.gl.getContextAttributes().xrCompatible&&await this.gl.makeXRCompatible()}setXRTarget(e){this._xrFamebuffer=e}setXRRenderTargetTextures(e,t,r=null){const s=this.gl;if(this.set(e.texture,{textureGPU:t,glInternalFormat:s.RGBA8}),null!==r){const t=e.stencilBuffer?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24;this.set(e.depthTexture,{textureGPU:r,glInternalFormat:t}),e.autoAllocateDepthBuffer=!1,!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided")}}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t]||(this.timestampQueryPool[t]=new Cv(this.gl,t,2048));const r=this.timestampQueryPool[t];null!==r.allocateQueriesForContext(e)&&r.beginQuery(e)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t].endQuery(e)}getContext(){return this.gl}beginRender(e){const{state:t,gl:r}=this,s=this.get(e);if(this.initTimestampQuery(e),s.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1),e.viewport?this.updateViewport(e):t.viewport(0,0,r.drawingBufferWidth,r.drawingBufferHeight),e.scissor){const{x:r,y:s,width:i,height:n}=e.scissorValue;t.scissor(r,e.height-n-s,i,n)}const i=e.occlusionQueryCount;i>0&&(s.currentOcclusionQueries=s.occlusionQueries,s.currentOcclusionQueryObjects=s.occlusionQueryObjects,s.lastOcclusionObject=null,s.occlusionQueries=new Array(i),s.occlusionQueryObjects=new Array(i),s.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:r}=this,s=this.get(e),i=s.previousContext,n=e.occlusionQueryCount;n>0&&(n>s.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const o=e.textures;if(null!==o)for(let e=0;e<o.length;e++){const t=o[e];t.generateMipmaps&&this.generateMipmaps(t)}if(this._currentContext=i,null!==e.textures&&e.renderTarget){const s=this.get(e.renderTarget),{samples:i}=e.renderTarget;if(i>0&&!1===this._useMultisampledRTT(e.renderTarget)){const i=s.framebuffers[e.getCacheKey()],n=t.COLOR_BUFFER_BIT,o=s.msaaFrameBuffer,a=e.textures;r.bindFramebuffer(t.READ_FRAMEBUFFER,o),r.bindFramebuffer(t.DRAW_FRAMEBUFFER,i);for(let r=0;r<a.length;r++)if(e.scissor){const{x:r,y:i,width:o,height:a}=e.scissorValue,u=e.height-a-i;t.blitFramebuffer(r,u,r+o,u+a,r,u,r+o,u+a,n,t.NEAREST),t.invalidateSubFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray,r,u,o,a)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,n,t.NEAREST),t.invalidateFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray)}}null!==i&&(this._setFramebuffer(i),i.viewport?this.updateViewport(i):r.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)),this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet,{gl:i}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const n=()=>{let o=0;for(let t=0;t<r.length;t++){const n=r[t];null!==n&&(i.getQueryParameter(n,i.QUERY_RESULT_AVAILABLE)&&(0===i.getQueryParameter(n,i.QUERY_RESULT)&&e.add(s[t]),r[t]=null,i.deleteQuery(n),o++))}o<r.length?requestAnimationFrame(n):t.occluded=e};n()}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}updateViewport(e){const{state:t}=this,{x:r,y:s,width:i,height:n}=e.viewportValue;t.viewport(r,e.height-n-s,i,n)}setScissorTest(e){this.state.setScissorTest(e)}clear(e,t,r,s=null,i=!0){const{gl:n}=this;if(null===s){const e=this.getClearColor();e.r*=e.a,e.g*=e.a,e.b*=e.a,s={textures:null,clearColorValue:e}}let o=0;if(e&&(o|=n.COLOR_BUFFER_BIT),t&&(o|=n.DEPTH_BUFFER_BIT),r&&(o|=n.STENCIL_BUFFER_BIT),0!==o){let a;if(s.clearColorValue?a=s.clearColorValue:(a=this.getClearColor(),a.r*=a.a,a.g*=a.a,a.b*=a.a),t&&this.state.setDepthMask(!0),null===s.textures)n.clearColor(a.r,a.g,a.b,a.a),n.clear(o);else{if(i&&this._setFramebuffer(s),e)for(let e=0;e<s.textures.length;e++)n.clearBufferfv(n.COLOR,e,[a.r,a.g,a.b,a.a]);t&&r?n.clearBufferfi(n.DEPTH_STENCIL,0,1,0):t?n.clearBufferfv(n.DEPTH,0,[1]):r&&n.clearBufferiv(n.STENCIL,0,[0])}}}beginCompute(e){const{state:t,gl:r}=this;t.bindFramebuffer(r.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,r,s){const{state:i,gl:n}=this;!1===this.discard&&(n.enable(n.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:o,transformBuffers:a,attributes:u}=this.get(s),l=this._getVaoKey(null,u),d=this.vaoCache[l];void 0===d?this._createVao(null,u):n.bindVertexArray(d),i.useProgram(o),this._bindUniforms(r);const c=this._getTransformFeedback(a);n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,c),n.beginTransformFeedback(n.POINTS),u[0].isStorageInstancedBufferAttribute?n.drawArraysInstanced(n.POINTS,0,1,t.count):n.drawArrays(n.POINTS,0,t.count),n.endTransformFeedback(),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null);for(let e=0;e<a.length;e++){const t=a[e];t.pbo&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}draw(e){const{object:t,pipeline:r,material:s,context:i,hardwareClippingPlanes:n}=e,{programGPU:o}=this.get(r),{gl:a,state:u}=this,l=this.get(i),d=e.getDrawParameters();if(null===d)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;u.setMaterial(s,c,n),u.useProgram(o);const h=this.get(e);let p=h.staticVao;if(void 0===p||h.geometryId!==e.geometry.id){const t=this._getVaoKey(e.getIndex(),e.getAttributes());if(p=this.vaoCache[t],void 0===p){let t;({vaoGPU:p,staticVao:t}=this._createVao(e.getIndex(),e.getAttributes())),t&&(h.staticVao=p,h.geometryId=e.geometry.id)}}a.bindVertexArray(p);const g=e.getIndex(),m=l.lastOcclusionObject;if(m!==t&&void 0!==m){if(null!==m&&!0===m.occlusionTest&&(a.endQuery(a.ANY_SAMPLES_PASSED),l.occlusionQueryIndex++),!0===t.occlusionTest){const e=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,e),l.occlusionQueries[l.occlusionQueryIndex]=e,l.occlusionQueryObjects[l.occlusionQueryIndex]=t}l.lastOcclusionObject=t}const f=this.bufferRenderer;t.isPoints?f.mode=a.POINTS:t.isLineSegments?f.mode=a.LINES:t.isLine?f.mode=a.LINE_STRIP:t.isLineLoop?f.mode=a.LINE_LOOP:!0===s.wireframe?(u.setLineWidth(s.wireframeLinewidth*this.renderer.getPixelRatio()),f.mode=a.LINES):f.mode=a.TRIANGLES;const{vertexCount:y,instanceCount:x}=d;let{firstVertex:b}=d;if(f.object=t,null!==g){b*=g.array.BYTES_PER_ELEMENT;const e=this.get(g);f.index=g.count,f.type=e.type}else f.index=0;const T=()=>{t.isBatchedMesh?null!==t._multiDrawInstances?f.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances):this.hasFeature("WEBGL_multi_draw")?f.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):it("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):x>1?f.renderInstances(b,y,x):f.render(b,y)};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const r=this.get(e.camera),s=e.camera.cameras,i=e.getBindingGroup("cameraIndex").bindings[0];if(void 0===r.indexesGPU||r.indexesGPU.length!==s.length){const e=new Uint32Array([0,0,0,0]),t=[];for(let r=0,i=s.length;r<i;r++){const s=a.createBuffer();e[0]=r,a.bindBuffer(a.UNIFORM_BUFFER,s),a.bufferData(a.UNIFORM_BUFFER,e,a.STATIC_DRAW),t.push(s)}r.indexesGPU=t}const n=this.get(i),o=this.renderer.getPixelRatio();for(let i=0,l=s.length;i<l;i++){const l=s[i];if(t.layers.test(l.layers)){const t=l.viewport,s=t.x*o,d=t.y*o,c=t.width*o,h=t.height*o;u.viewport(Math.floor(s),Math.floor(e.context.height-h-d),Math.floor(c),Math.floor(h)),u.bindBufferBase(a.UNIFORM_BUFFER,n.index,r.indexesGPU[i]),T()}}}else T();a.bindVertexArray(null)}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new av(e,t)}createProgram(e){const t=this.gl,{stage:r,code:s}=e,i="fragment"===r?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(i,s),t.compileShader(i),this.set(e,{shaderGPU:i})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const r=this.gl,s=e.pipeline,{fragmentProgram:i,vertexProgram:n}=s,o=r.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU;if(r.attachShader(o,a),r.attachShader(o,u),r.linkProgram(o),this.set(s,{programGPU:o,fragmentShader:a,vertexShader:u}),null!==t&&this.parallel){const i=new Promise((t=>{const i=this.parallel,n=()=>{r.getProgramParameter(o,i.COMPLETION_STATUS_KHR)?(this._completeCompile(e,s),t()):requestAnimationFrame(n)};n()}));t.push(i)}else this._completeCompile(e,s)}_handleSource(e,t){const r=e.split("\n"),s=[],i=Math.max(t-6,0),n=Math.min(t+6,r.length);for(let e=i;e<n;e++){const i=e+1;s.push(`${i===t?">":" "} ${i}: ${r[e]}`)}return s.join("\n")}_getShaderErrors(e,t,r){const s=e.getShaderParameter(t,e.COMPILE_STATUS),i=e.getShaderInfoLog(t).trim();if(s&&""===i)return"";const n=/ERROR: 0:(\d+)/.exec(i);if(n){const s=parseInt(n[1]);return r.toUpperCase()+"\n\n"+i+"\n\n"+this._handleSource(e.getShaderSource(t),s)}return i}_logProgramError(e,t,r){if(this.renderer.debug.checkShaderErrors){const s=this.gl,i=s.getProgramInfoLog(e).trim();if(!1===s.getProgramParameter(e,s.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(s,e,r,t);else{const n=this._getShaderErrors(s,r,"vertex"),o=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+"\n\nProgram Info Log: "+i+"\n"+n+"\n"+o)}else""!==i&&console.warn("THREE.WebGLProgram: Program Info Log:",i)}}_completeCompile(e,t){const{state:r,gl:s}=this,i=this.get(t),{programGPU:n,fragmentShader:o,vertexShader:a}=i;!1===s.getProgramParameter(n,s.LINK_STATUS)&&this._logProgramError(n,o,a),r.useProgram(n);const u=e.getBindings();this._setupBindings(u,n),this.set(t,{programGPU:n})}createComputePipeline(e,t){const{state:r,gl:s}=this,i={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(i);const{computeProgram:n}=e,o=s.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU,l=n.transforms,d=[],c=[];for(let e=0;e<l.length;e++){const t=l[e];d.push(t.varyingName),c.push(t.attributeNode)}s.attachShader(o,a),s.attachShader(o,u),s.transformFeedbackVaryings(o,d,s.SEPARATE_ATTRIBS),s.linkProgram(o),!1===s.getProgramParameter(o,s.LINK_STATUS)&&this._logProgramError(o,a,u),r.useProgram(o),this._setupBindings(t,o);const h=n.attributes,p=[],g=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;p.push(t),this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER);const r=this.get(t);g.push(r)}this.set(e,{programGPU:o,transformBuffers:g,attributes:p})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,r=0;for(const s of t){this.set(s,{textures:r,uniformBuffers:e});for(const t of s.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&r++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,r=this.get(e);let s=r.uniformBuffers,i=r.textures;for(const r of e.bindings)if(r.isUniformsGroup||r.isUniformBuffer){const e=r.buffer,i=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(r,{index:s++,bufferGPU:i})}else if(r.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(r.texture);this.set(r,{index:i++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const r=this.get(e).bufferGPU,s=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,s,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(Rv).filter((t=>Rv[t]===e)),r=this.extensions;for(let e=0;e<t.length;e++)if(r.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,r=null,s=null,i=0){this.textureUtils.copyTextureToTexture(e,t,r,s,i)}copyFramebufferToTexture(e,t,r){this.textureUtils.copyFramebufferToTexture(e,t,r)}_setFramebuffer(e){const{gl:t,state:r}=this;let s=null;if(null!==e.textures){const i=e.renderTarget,n=this.get(i),{samples:o,depthBuffer:a,stencilBuffer:u}=i,l=!0===i.isWebGLCubeRenderTarget,d=!0===i.isRenderTarget3D,c=!0===i.isRenderTargetArray,h=!0===i.isXRRenderTarget,p=!0===h&&!0===i.hasExternalTextures;let g=n.msaaFrameBuffer,m=n.depthRenderbuffer;const f=this.extensions.get("WEBGL_multisampled_render_to_texture"),y=this._useMultisampledRTT(i),x=Tm(e);let b;if(l?(n.cubeFramebuffers||(n.cubeFramebuffers={}),b=n.cubeFramebuffers[x]):h&&!1===p?b=this._xrFamebuffer:(n.framebuffers||(n.framebuffers={}),b=n.framebuffers[x]),void 0===b){b=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,b);const s=e.textures;if(l){n.cubeFramebuffers[x]=b;const{textureGPU:e}=this.get(s[0]),r=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+r,e,0)}else{n.framebuffers[x]=b;for(let r=0;r<s.length;r++){const i=s[r],n=this.get(i);n.renderTarget=e.renderTarget,n.cacheKey=x;const a=t.COLOR_ATTACHMENT0+r;if(d||c){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,a,n.textureGPU,0,e)}else y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,a,t.TEXTURE_2D,n.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,a,t.TEXTURE_2D,n.textureGPU,0)}r.drawBuffers(e,b)}if(i.isXRRenderTarget&&!0===i.autoAllocateDepthBuffer){const r=t.createRenderbuffer();this.textureUtils.setupRenderBufferStorage(r,e,0,y),n.xrDepthRenderbuffer=r}else if(null!==e.depthTexture){const r=this.get(e.depthTexture),s=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;r.renderTarget=e.renderTarget,r.cacheKey=x,y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0)}}else if(h&&p){r.bindFramebuffer(t.FRAMEBUFFER,b);const s=this.get(e.textures[0]);y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0);const a=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(!0===i.autoAllocateDepthBuffer){const e=n.xrDepthRenderbuffer;t.bindRenderbuffer(t.RENDERBUFFER,e),t.framebufferRenderbuffer(t.FRAMEBUFFER,a,t.RENDERBUFFER,e)}else{const r=this.get(e.depthTexture);y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,a,t.TEXTURE_2D,r.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,a,t.TEXTURE_2D,r.textureGPU,0)}}if(o>0&&!1===y){if(void 0===g){const s=[];g=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,g);const i=[],l=e.textures;for(let r=0;r<l.length;r++){if(i[r]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,i[r]),s.push(t.COLOR_ATTACHMENT0+r),a){const e=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(e)}const n=e.textures[r],l=this.get(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,l.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r,t.RENDERBUFFER,i[r])}if(n.msaaFrameBuffer=g,n.msaaRenderbuffers=i,void 0===m){m=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(m,e,o),n.depthRenderbuffer=m;const r=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(r)}n.invalidationArray=s}s=n.msaaFrameBuffer}else s=b}r.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e,t){let r="";if(null!==e){r+=":"+this.get(e).id}for(let e=0;e<t.length;e++){r+=":"+this.get(t[e]).id}return r}_createVao(e,t){const{gl:r}=this,s=r.createVertexArray();let i="",n=!0;if(r.bindVertexArray(s),null!==e){const t=this.get(e);r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.bufferGPU),i+=":"+t.id}for(let e=0;e<t.length;e++){const s=t[e],o=this.get(s);let a,u;i+=":"+o.id,r.bindBuffer(r.ARRAY_BUFFER,o.bufferGPU),r.enableVertexAttribArray(e),(s.isStorageBufferAttribute||s.isStorageInstancedBufferAttribute)&&(n=!1),!0===s.isInterleavedBufferAttribute?(a=s.data.stride*o.bytesPerElement,u=s.offset*o.bytesPerElement):(a=0,u=0),o.isInteger?r.vertexAttribIPointer(e,s.itemSize,o.type,a,u):r.vertexAttribPointer(e,s.itemSize,o.type,s.normalized,a,u),s.isInstancedBufferAttribute&&!s.isInterleavedBufferAttribute?r.vertexAttribDivisor(e,s.meshPerAttribute):s.isInterleavedBufferAttribute&&s.data.isInstancedInterleavedBuffer&&r.vertexAttribDivisor(e,s.data.meshPerAttribute)}return r.bindBuffer(r.ARRAY_BUFFER,null),this.vaoCache[i]=s,{vaoGPU:s,staticVao:n}}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let r=this.transformFeedbackCache[t];if(void 0!==r)return r;const{gl:s}=this;r=s.createTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,r);for(let t=0;t<e.length;t++){const r=e[t];s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,t,r.transformBuffer)}return s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=r,r}_setupBindings(e,t){const r=this.gl;for(const s of e)for(const e of s.bindings){const s=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const i=r.getUniformBlockIndex(t,e.name);r.uniformBlockBinding(t,i,s)}else if(e.isSampledTexture){const i=r.getUniformLocation(t,e.name);r.uniform1i(i,s)}}}_bindUniforms(e){const{gl:t,state:r}=this;for(const s of e)for(const e of s.bindings){const s=this.get(e),i=s.index;e.isUniformsGroup||e.isUniformBuffer?r.bindBufferBase(t.UNIFORM_BUFFER,i,s.bufferGPU):e.isSampledTexture&&r.bindTexture(s.glTextureType,s.textureGPU,t.TEXTURE0+i)}}_useMultisampledRTT(e){return e.samples>0&&!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!1!==e.autoAllocateDepthBuffer}dispose(){const e=this.extensions.get("WEBGL_lose_context");e&&e.loseContext(),this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const Mv="point-list",Bv="line-list",Fv="line-strip",Uv="triangle-list",Pv="triangle-strip",Iv="never",Lv="less",Dv="equal",Vv="less-equal",Ov="greater",Gv="not-equal",kv="greater-equal",zv="always",$v="store",Wv="load",Hv="clear",jv="ccw",qv="none",Xv="front",Kv="back",Yv="uint16",Qv="uint32",Zv={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10uFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},Jv="clamp-to-edge",eN="repeat",tN="mirror-repeat",rN="linear",sN="nearest",iN="zero",nN="one",oN="src",aN="one-minus-src",uN="src-alpha",lN="one-minus-src-alpha",dN="dst",cN="one-minus-dst",hN="dst-alpha",pN="one-minus-dst-alpha",gN="src-alpha-saturated",mN="constant",fN="one-minus-constant",yN="add",xN="subtract",bN="reverse-subtract",TN="min",_N="max",vN=0,NN=15,SN="keep",RN="zero",AN="replace",EN="invert",CN="increment-clamp",wN="decrement-clamp",MN="increment-wrap",BN="decrement-wrap",FN="storage",UN="read-only-storage",PN="write-only",IN="read-only",LN="read-write",DN="float",VN="unfilterable-float",ON="depth",GN="sint",kN="uint",zN="2d",$N="3d",WN="2d",HN="2d-array",jN="cube",qN="3d",XN="all",KN="vertex",YN="instance",QN={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};class ZN extends W_{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.isSampler=!0}}class JN extends ZN{constructor(e,t,r){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r}update(){this.texture=this.textureNode.value}}class eS extends H_{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let tS=0;class rS extends eS{constructor(e,t){super("StorageBuffer_"+tS++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:Us.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class sS extends Xg{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:rN}),this.flipYSampler=e.createSampler({minFilter:sN}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:Pv,stripIndexFormat:Qv},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:Pv,stripIndexFormat:Qv},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,r=0){const s=t.format,{width:i,height:n}=t.size,o=this.getTransferPipeline(s),a=this.getFlipYPipeline(s),u=this.device.createTexture({size:{width:i,height:n,depthOrArrayLayers:1},format:s,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),l=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:WN,baseArrayLayer:r}),d=u.createView({baseMipLevel:0,mipLevelCount:1,dimension:WN,baseArrayLayer:0}),c=this.device.createCommandEncoder({}),h=(e,t,r)=>{const s=e.getBindGroupLayout(0),i=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),n=c.beginRenderPass({colorAttachments:[{view:r,loadOp:Hv,storeOp:$v,clearValue:[0,0,0,0]}]});n.setPipeline(e),n.setBindGroup(0,i),n.draw(4,1,0,0),n.end()};h(o,l,d),h(a,d,l),this.device.queue.submit([c.finish()]),u.destroy()}generateMipmaps(e,t,r=0){const s=this.get(e);void 0===s.useCount&&(s.useCount=0,s.layers=[]);const i=s.layers[r]||this._mipmapCreateBundles(e,t,r),n=this.device.createCommandEncoder({});this._mipmapRunBundles(n,i),this.device.queue.submit([n.finish()]),0!==s.useCount&&(s.layers[r]=i),s.useCount++}_mipmapCreateBundles(e,t,r){const s=this.getTransferPipeline(t.format),i=s.getBindGroupLayout(0);let n=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:WN,baseArrayLayer:r});const o=[];for(let a=1;a<t.mipLevelCount;a++){const u=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:n}]}),l=e.createView({baseMipLevel:a,mipLevelCount:1,dimension:WN,baseArrayLayer:r}),d={colorAttachments:[{view:l,loadOp:Hv,storeOp:$v,clearValue:[0,0,0,0]}]},c=this.device.createRenderBundleEncoder({colorFormats:[t.format]});c.setPipeline(s),c.setBindGroup(0,u),c.draw(4,1,0,0),o.push({renderBundles:[c.finish()],passDescriptor:d}),n=l}return o}_mipmapRunBundles(e,t){const r=t.length;for(let s=0;s<r;s++){const r=t[s],i=e.beginRenderPass(r.passDescriptor);i.executeBundles(r.renderBundles),i.end()}}}const iS={[vr]:"never",[we]:"less",[Rr]:"equal",[Sr]:"less-equal",[Er]:"greater",[Ar]:"greater-equal",[Nr]:"always",[Cr]:"not-equal"},nS=[0,1,3,2,4,5];class oS{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new F,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,s=t.get(e),i={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};i.magFilter===rN&&i.minFilter===rN&&i.mipmapFilter===rN&&(i.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(i.compare=iS[e.compareFunction]),s.sampler=r.createSampler(i)}createDefaultTexture(e){let t;const r=aS(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(r):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(r),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,s=r.get(e);if(s.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:i,height:n,depth:o,levels:a}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const u=this._getDimension(e),l=e.internalFormat||t.format||aS(e,r.device);s.format=l;const{samples:d,primarySamples:c,isMSAA:h}=r.utils.getTextureSampleData(e);let p=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(p|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(p|=GPUTextureUsage.RENDER_ATTACHMENT);const g={label:e.name,size:{width:i,height:n,depthOrArrayLayers:o},mipLevelCount:a,sampleCount:c,dimension:u,format:l,usage:p};if(e.isVideoTexture){const t=e.source.data,r=new VideoFrame(t);g.size.width=r.displayWidth,g.size.height=r.displayHeight,r.close(),s.externalTexture=t}else{if(void 0===l)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(e);s.texture=r.device.createTexture(g)}if(h){const e=Object.assign({},g);e.label=e.label+"-msaa",e.sampleCount=d,s.msaaTexture=r.device.createTexture(e)}s.initialized=!0,s.textureDescriptorGPU=g}destroyTexture(e){const t=this.backend,r=t.get(e);void 0!==r.texture&&r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const r=e.image.depth||1;for(let e=0;e<r;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const r=this.backend,{width:s,height:i}=r.getDrawingBufferSize(),n=this.depthTexture,o=r.get(n).texture;let a,u;if(t?(a=pe,u=me):e&&(a=ge,u=b),void 0!==o){if(n.image.width===s&&n.image.height===i&&n.format===a&&n.type===u)return o;this.destroyTexture(n)}return n.name="depthBuffer",n.format=a,n.type=u,n.image.width=s,n.image.height=i,this.createTexture(n,{width:s,height:i}),r.get(n).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:s}=r;if(!e.isRenderTargetTexture&&void 0!==s){if(e.isDataTexture)this._copyBufferToTexture(t.image,r.texture,s,0,e.flipY);else if(e.isDataArrayTexture||e.isData3DTexture)for(let i=0;i<t.image.depth;i++)this._copyBufferToTexture(t.image,r.texture,s,i,e.flipY,i);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,r.texture,s);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,r.texture,s,e.flipY);else if(e.isVideoTexture){const t=e.source.data;r.externalTexture=t}else this._copyImageToTexture(t.image,r.texture,s,0,e.flipY);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,s,i,n){const o=this.backend.device,a=this.backend.get(e),u=a.texture,l=a.textureDescriptorGPU.format,d=this._getBytesPerTexel(l);let c=s*d;c=256*Math.ceil(c/256);const h=o.createBuffer({size:s*i*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=o.createCommandEncoder();p.copyTextureToBuffer({texture:u,origin:{x:t,y:r,z:n}},{buffer:h,bytesPerRow:c},{width:s,height:i});const g=this._getTypedArrayType(l);o.queue.submit([p.finish()]),await h.mapAsync(GPUMapMode.READ);return new g(h.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===j||t===q||t===v||t===N}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new ee;r.minFilter=Tr,r.magFilter=Tr,this.createTexture(r,{width:1,height:1,format:e}),this.defaultTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new H;r.minFilter=Tr,r.magFilter=Tr,this.createTexture(r,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(null===e){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,r,s){for(let i=0;i<6;i++){const n=e[i],o=!0===s?nS[i]:i;n.isDataTexture?this._copyBufferToTexture(n.image,t,r,o,s):this._copyImageToTexture(n,t,r,o,s)}}_copyImageToTexture(e,t,r,s,i){this.backend.device.queue.copyExternalImageToTexture({source:e,flipY:i},{texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},{width:e.width,height:e.height,depthOrArrayLayers:1})}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new sS(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,s,i,n=0){const o=this.backend.device,a=e.data,u=this._getBytesPerTexel(r.format),l=e.width*u;o.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},a,{offset:e.width*e.height*u*n,bytesPerRow:l},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===i&&this._flipY(t,r,s)}_copyCompressedBufferToTexture(e,t,r){const s=this.backend.device,i=this._getBlockData(r.format),n=r.size.depthOrArrayLayers>1;for(let o=0;o<e.length;o++){const a=e[o],u=a.width,l=a.height,d=n?r.size.depthOrArrayLayers:1,c=Math.ceil(u/i.width)*i.byteLength,h=c*Math.ceil(l/i.height);for(let e=0;e<d;e++)s.queue.writeTexture({texture:t,mipLevel:o,origin:{x:0,y:0,z:e}},a.data,{offset:e*h,bytesPerRow:c,rowsPerImage:Math.ceil(l/i.height)},{width:Math.ceil(u/i.width)*i.width,height:Math.ceil(l/i.height)*i.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===Zv.BC1RGBAUnorm||e===Zv.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===Zv.BC2RGBAUnorm||e===Zv.BC2RGBAUnormSRGB||e===Zv.BC3RGBAUnorm||e===Zv.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===Zv.BC4RUnorm||e===Zv.BC4RSNorm?{byteLength:8,width:4,height:4}:e===Zv.BC5RGUnorm||e===Zv.BC5RGSnorm||e===Zv.BC6HRGBUFloat||e===Zv.BC6HRGBFloat||e===Zv.BC7RGBAUnorm||e===Zv.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===Zv.ETC2RGB8Unorm||e===Zv.ETC2RGB8UnormSRGB||e===Zv.ETC2RGB8A1Unorm||e===Zv.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===Zv.ETC2RGBA8Unorm||e===Zv.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===Zv.EACR11Unorm||e===Zv.EACR11Snorm?{byteLength:8,width:4,height:4}:e===Zv.EACRG11Unorm||e===Zv.EACRG11Snorm||e===Zv.ASTC4x4Unorm||e===Zv.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===Zv.ASTC5x4Unorm||e===Zv.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===Zv.ASTC5x5Unorm||e===Zv.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===Zv.ASTC6x5Unorm||e===Zv.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===Zv.ASTC6x6Unorm||e===Zv.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===Zv.ASTC8x5Unorm||e===Zv.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===Zv.ASTC8x6Unorm||e===Zv.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===Zv.ASTC8x8Unorm||e===Zv.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===Zv.ASTC10x5Unorm||e===Zv.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===Zv.ASTC10x6Unorm||e===Zv.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===Zv.ASTC10x8Unorm||e===Zv.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===Zv.ASTC10x10Unorm||e===Zv.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===Zv.ASTC12x10Unorm||e===Zv.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===Zv.ASTC12x12Unorm||e===Zv.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=Jv;return e===yr?t=eN:e===br&&(t=tN),t}_convertFilterMode(e){let t=rN;return e!==Tr&&e!==_r&&e!==Ve||(t=sN),t}_getBytesPerTexel(e){return e===Zv.R8Unorm||e===Zv.R8Snorm||e===Zv.R8Uint||e===Zv.R8Sint?1:e===Zv.R16Uint||e===Zv.R16Sint||e===Zv.R16Float||e===Zv.RG8Unorm||e===Zv.RG8Snorm||e===Zv.RG8Uint||e===Zv.RG8Sint?2:e===Zv.R32Uint||e===Zv.R32Sint||e===Zv.R32Float||e===Zv.RG16Uint||e===Zv.RG16Sint||e===Zv.RG16Float||e===Zv.RGBA8Unorm||e===Zv.RGBA8UnormSRGB||e===Zv.RGBA8Snorm||e===Zv.RGBA8Uint||e===Zv.RGBA8Sint||e===Zv.BGRA8Unorm||e===Zv.BGRA8UnormSRGB||e===Zv.RGB9E5UFloat||e===Zv.RGB10A2Unorm||e===Zv.RG11B10UFloat||e===Zv.Depth32Float||e===Zv.Depth24Plus||e===Zv.Depth24PlusStencil8||e===Zv.Depth32FloatStencil8?4:e===Zv.RG32Uint||e===Zv.RG32Sint||e===Zv.RG32Float||e===Zv.RGBA16Uint||e===Zv.RGBA16Sint||e===Zv.RGBA16Float?8:e===Zv.RGBA32Uint||e===Zv.RGBA32Sint||e===Zv.RGBA32Float?16:void 0}_getTypedArrayType(e){return e===Zv.R8Uint?Uint8Array:e===Zv.R8Sint?Int8Array:e===Zv.R8Unorm?Uint8Array:e===Zv.R8Snorm?Int8Array:e===Zv.RG8Uint?Uint8Array:e===Zv.RG8Sint?Int8Array:e===Zv.RG8Unorm?Uint8Array:e===Zv.RG8Snorm?Int8Array:e===Zv.RGBA8Uint?Uint8Array:e===Zv.RGBA8Sint?Int8Array:e===Zv.RGBA8Unorm?Uint8Array:e===Zv.RGBA8Snorm?Int8Array:e===Zv.R16Uint?Uint16Array:e===Zv.R16Sint?Int16Array:e===Zv.RG16Uint?Uint16Array:e===Zv.RG16Sint?Int16Array:e===Zv.RGBA16Uint?Uint16Array:e===Zv.RGBA16Sint?Int16Array:e===Zv.R16Float||e===Zv.RG16Float||e===Zv.RGBA16Float?Uint16Array:e===Zv.R32Uint?Uint32Array:e===Zv.R32Sint?Int32Array:e===Zv.R32Float?Float32Array:e===Zv.RG32Uint?Uint32Array:e===Zv.RG32Sint?Int32Array:e===Zv.RG32Float?Float32Array:e===Zv.RGBA32Uint?Uint32Array:e===Zv.RGBA32Sint?Int32Array:e===Zv.RGBA32Float?Float32Array:e===Zv.BGRA8Unorm||e===Zv.BGRA8UnormSRGB?Uint8Array:e===Zv.RGB10A2Unorm||e===Zv.RGB9E5UFloat||e===Zv.RG11B10UFloat?Uint32Array:e===Zv.Depth32Float?Float32Array:e===Zv.Depth24Plus||e===Zv.Depth24PlusStencil8?Uint32Array:e===Zv.Depth32FloatStencil8?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?$N:zN,t}}function aS(e,t=null){const r=e.format,s=e.type,i=e.colorSpace;let n;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(r){case zt:n=i===We?Zv.BC1RGBAUnormSRGB:Zv.BC1RGBAUnorm;break;case $t:n=i===We?Zv.BC2RGBAUnormSRGB:Zv.BC2RGBAUnorm;break;case Wt:n=i===We?Zv.BC3RGBAUnormSRGB:Zv.BC3RGBAUnorm;break;case Yt:n=i===We?Zv.ETC2RGB8UnormSRGB:Zv.ETC2RGB8Unorm;break;case Qt:n=i===We?Zv.ETC2RGBA8UnormSRGB:Zv.ETC2RGBA8Unorm;break;case Zt:n=i===We?Zv.ASTC4x4UnormSRGB:Zv.ASTC4x4Unorm;break;case Jt:n=i===We?Zv.ASTC5x4UnormSRGB:Zv.ASTC5x4Unorm;break;case er:n=i===We?Zv.ASTC5x5UnormSRGB:Zv.ASTC5x5Unorm;break;case tr:n=i===We?Zv.ASTC6x5UnormSRGB:Zv.ASTC6x5Unorm;break;case rr:n=i===We?Zv.ASTC6x6UnormSRGB:Zv.ASTC6x6Unorm;break;case sr:n=i===We?Zv.ASTC8x5UnormSRGB:Zv.ASTC8x5Unorm;break;case ir:n=i===We?Zv.ASTC8x6UnormSRGB:Zv.ASTC8x6Unorm;break;case nr:n=i===We?Zv.ASTC8x8UnormSRGB:Zv.ASTC8x8Unorm;break;case or:n=i===We?Zv.ASTC10x5UnormSRGB:Zv.ASTC10x5Unorm;break;case ar:n=i===We?Zv.ASTC10x6UnormSRGB:Zv.ASTC10x6Unorm;break;case ur:n=i===We?Zv.ASTC10x8UnormSRGB:Zv.ASTC10x8Unorm;break;case lr:n=i===We?Zv.ASTC10x10UnormSRGB:Zv.ASTC10x10Unorm;break;case dr:n=i===We?Zv.ASTC12x10UnormSRGB:Zv.ASTC12x10Unorm;break;case cr:n=i===We?Zv.ASTC12x12UnormSRGB:Zv.ASTC12x12Unorm;break;case Le:n=i===We?Zv.RGBA8UnormSRGB:Zv.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case Le:switch(s){case rt:n=Zv.RGBA8Snorm;break;case st:n=Zv.RGBA16Sint;break;case tt:n=Zv.RGBA16Uint;break;case b:n=Zv.RGBA32Uint;break;case T:n=Zv.RGBA32Sint;break;case fe:n=i===We?Zv.RGBA8UnormSRGB:Zv.RGBA8Unorm;break;case Te:n=Zv.RGBA16Float;break;case w:n=Zv.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",s)}break;case Je:if(s===Dt)n=Zv.RGB9E5UFloat;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",s);break;case Ye:switch(s){case rt:n=Zv.R8Snorm;break;case st:n=Zv.R16Sint;break;case tt:n=Zv.R16Uint;break;case b:n=Zv.R32Uint;break;case T:n=Zv.R32Sint;break;case fe:n=Zv.R8Unorm;break;case Te:n=Zv.R16Float;break;case w:n=Zv.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",s)}break;case Be:switch(s){case rt:n=Zv.RG8Snorm;break;case st:n=Zv.RG16Sint;break;case tt:n=Zv.RG16Uint;break;case b:n=Zv.RG32Uint;break;case T:n=Zv.RG32Sint;break;case fe:n=Zv.RG8Unorm;break;case Te:n=Zv.RG16Float;break;case w:n=Zv.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",s)}break;case ge:switch(s){case tt:n=Zv.Depth16Unorm;break;case b:n=Zv.Depth24Plus;break;case w:n=Zv.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",s)}break;case pe:switch(s){case me:n=Zv.Depth24PlusStencil8;break;case w:t&&!1===t.features.has(QN.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),n=Zv.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",s)}break;case Ke:switch(s){case T:n=Zv.R32Sint;break;case b:n=Zv.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",s)}break;case Qe:switch(s){case T:n=Zv.RG32Sint;break;case b:n=Zv.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",s)}break;case et:switch(s){case T:n=Zv.RGBA32Sint;break;case b:n=Zv.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",s)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return n}const uS=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,lS=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/gi,dS={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"};class cS extends l_{constructor(e){const{type:t,inputs:r,name:s,inputsCode:i,blockCode:n,outputType:o}=(e=>{const t=(e=e.trim()).match(uS);if(null!==t&&4===t.length){const r=t[2],s=[];let i=null;for(;null!==(i=lS.exec(r));)s.push({name:i[1],type:i[2]});const n=[];for(let e=0;e<s.length;e++){const{name:t,type:r}=s[e];let i=r;i.startsWith("ptr")?i="pointer":(i.startsWith("texture")&&(i=r.split("<")[0]),i=dS[i]),n.push(new QT(i,t))}const o=e.substring(t[0].length),a=t[3]||"void",u=void 0!==t[1]?t[1]:"";return{type:dS[a]||a,inputs:n,name:u,inputsCode:r,blockCode:o,outputType:a}}throw new Error("FunctionNode: Function is not a WGSL code.")})(e);super(t,r,s),this.inputsCode=i,this.blockCode=n,this.outputType=o}getCode(e=this.name){const t="void"!==this.outputType?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class hS extends u_{parseFunction(e){return new cS(e)}}const pS="undefined"!=typeof self?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},gS={[Us.READ_ONLY]:"read",[Us.WRITE_ONLY]:"write",[Us.READ_WRITE]:"read_write"},mS={[yr]:"repeat",[xr]:"clamp",[br]:"mirror"},fS={vertex:pS?pS.VERTEX:1,fragment:pS?pS.FRAGMENT:2,compute:pS?pS.COMPUTE:4},yS={instance:!0,swizzleAssign:!1,storageBuffer:!0},xS={"^^":"tsl_xor"},bS={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},TS={},_S={tsl_xor:new Ey("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new Ey("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new Ey("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new Ey("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new Ey("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new Ey("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new Ey("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new Ey("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new Ey("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new Ey("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new Ey("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new Ey("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new Ey("\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n")},vS={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};"undefined"!=typeof navigator&&/Windows/g.test(navigator.userAgent)&&(_S.pow_float=new Ey("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),_S.pow_vec2=new Ey("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[_S.pow_float]),_S.pow_vec3=new Ey("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[_S.pow_float]),_S.pow_vec4=new Ey("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[_S.pow_float]),vS.pow_float="tsl_pow_float",vS.pow_vec2="tsl_pow_vec2",vS.pow_vec3="tsl_pow_vec3",vS.pow_vec4="tsl_pow_vec4");let NS="";!0!==("undefined"!=typeof navigator&&/Firefox|Deno/g.test(navigator.userAgent))&&(NS+="diagnostic( off, derivative_uniformity );\n");class SS extends KT{constructor(e,t){super(e,t,new hS),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==x}_generateTextureSample(e,t,r,s,i=this.shaderStage){return"fragment"===i?s?`textureSample( ${t}, ${t}_sampler, ${r}, ${s} )`:`textureSample( ${t}, ${t}_sampler, ${r} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r):this.generateTextureLod(e,t,r,s,"0")}_generateVideoSample(e,t,r=this.shaderStage){if("fragment"===r)return`textureSampleBaseClampToEdge( ${e}, ${e}_sampler, vec2<f32>( ${t}.x, 1.0 - ${t}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${r} shader.`)}_generateTextureSampleLevel(e,t,r,s,i,n=this.shaderStage){return"fragment"!==n&&"compute"!==n||!1!==this.isUnfilterable(e)?this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r,s):this.generateTextureLod(e,t,r,i,s):`textureSampleLevel( ${t}, ${t}_sampler, ${r}, ${s} )`}generateWrapFunction(e){const t=`tsl_coord_${mS[e.wrapS]}S_${mS[e.wrapT]}_${e.isData3DTexture?"3d":"2d"}T`;let r=TS[t];if(void 0===r){const s=[],i=e.isData3DTexture?"vec3f":"vec2f";let n=`fn ${t}( coord : ${i} ) -> ${i} {\n\n\treturn ${i}(\n`;const o=(e,t)=>{e===yr?(s.push(_S.repeatWrapping_float),n+=`\t\ttsl_repeatWrapping_float( coord.${t} )`):e===xr?(s.push(_S.clampWrapping_float),n+=`\t\ttsl_clampWrapping_float( coord.${t} )`):e===br?(s.push(_S.mirrorWrapping_float),n+=`\t\ttsl_mirrorWrapping_float( coord.${t} )`):(n+=`\t\tcoord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};o(e.wrapS,"x"),n+=",\n",o(e.wrapT,"y"),e.isData3DTexture&&(n+=",\n",o(e.wrapR,"z")),n+="\n\t);\n\n}\n",TS[t]=r=new Ey(n,s)}return r.build(this),t}generateArrayDeclaration(e,t){return`array< ${this.getType(e)}, ${t} >`}generateTextureDimension(e,t,r){const s=this.getDataFromNode(e,this.shaderStage,this.globalCache);void 0===s.dimensionsSnippet&&(s.dimensionsSnippet={});let i=s.dimensionsSnippet[r];if(void 0===s.dimensionsSnippet[r]){let n,o;const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(e),u=a>1;o=e.isData3DTexture?"vec3<u32>":"vec2<u32>",n=u||e.isVideoTexture||e.isStorageTexture?t:`${t}${r?`, u32( ${r} )`:""}`,i=new Ga(new Su(`textureDimensions( ${n} )`,o)),s.dimensionsSnippet[r]=i,(e.isDataArrayTexture||e.isData3DTexture)&&(s.arrayLayerCount=new Ga(new Su(`textureNumLayers(${t})`,"u32"))),e.isTextureCube&&(s.cubeFaceCount=new Ga(new Su("6u","u32")))}return i.build(this)}generateFilteredTexture(e,t,r,s="0u"){this._include("biquadraticTexture");return`tsl_biquadraticTexture( ${t}, ${this.generateWrapFunction(e)}( ${r} ), ${this.generateTextureDimension(e,t,s)}, u32( ${s} ) )`}generateTextureLod(e,t,r,s,i="0u"){const n=this.generateWrapFunction(e),o=this.generateTextureDimension(e,t,i),a=e.isData3DTexture?"vec3":"vec2",u=`${a}<u32>(${n}(${r}) * ${a}<f32>(${o}))`;return this.generateTextureLoad(e,t,u,s,i)}generateTextureLoad(e,t,r,s,i="0u"){return!0===e.isVideoTexture||!0===e.isStorageTexture?`textureLoad( ${t}, ${r} )`:s?`textureLoad( ${t}, ${r}, ${s}, u32( ${i} ) )`:`textureLoad( ${t}, ${r}, u32( ${i} ) )`}generateTextureStore(e,t,r,s){return`textureStore( ${t}, ${r}, ${s} )`}isSampleCompare(e){return!0===e.isDepthTexture&&null!==e.compareFunction}isUnfilterable(e){return"float"!==this.getComponentTypeFromTexture(e)||!this.isAvailable("float32Filterable")&&!0===e.isDataTexture&&e.type===w||!1===this.isSampleCompare(e)&&e.minFilter===Tr&&e.magFilter===Tr||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,r,s,i=this.shaderStage){let n=null;return n=!0===e.isVideoTexture?this._generateVideoSample(t,r,i):this.isUnfilterable(e)?this.generateTextureLod(e,t,r,s,"0",i):this._generateTextureSample(e,t,r,s,i),n}generateTextureGrad(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleGrad( ${t}, ${t}_sampler, ${r},  ${s[0]}, ${s[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${n} shader.`)}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}generateTextureLevel(e,t,r,s,i,n=this.shaderStage){let o=null;return o=!0===e.isVideoTexture?this._generateVideoSample(t,r,n):this._generateTextureSampleLevel(e,t,r,s,i,n),o}generateTextureBias(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleBias( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${n} shader.`)}getPropertyName(e,t=this.shaderStage){if(!0===e.isNodeVarying&&!0===e.needsInterpolation){if("vertex"===t)return`varyings.${e.name}`}else if(!0===e.isNodeUniform){const t=e.name,r=e.type;return"texture"===r||"cubeTexture"===r||"storageTexture"===r||"texture3D"===r?t:"buffer"===r||"storageBuffer"===r||"indirectStorageBuffer"===r?this.isCustomStruct(e)?t:t+".value":e.groupNode.name+"."+t}return super.getPropertyName(e)}getOutputStructName(){return"output"}_getUniformGroupCount(e){return Object.keys(this.uniforms[e]).length}getFunctionOperator(e){const t=xS[e];return void 0!==t?(this._include(t),t):null}getNodeAccess(e,t){return"compute"!==t?Us.READ_ONLY:e.access}getStorageAccess(e,t){return gS[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);if(void 0===n.uniformGPU){let o;const a=e.groupNode,u=a.name,l=this.getBindGroupArray(u,r);if("texture"===t||"cubeTexture"===t||"storageTexture"===t||"texture3D"===t){let s=null;const n=this.getNodeAccess(e,r);if("texture"===t||"storageTexture"===t?s=new ev(i.name,i.node,a,n):"cubeTexture"===t?s=new tv(i.name,i.node,a,n):"texture3D"===t&&(s=new rv(i.name,i.node,a,n)),s.store=!0===e.isStorageTextureNode,s.setVisibility(fS[r]),"fragment"!==r&&"compute"!==r||!1!==this.isUnfilterable(e.value)||!1!==s.store)l.push(s),o=[s];else{const e=new JN(`${i.name}_sampler`,i.node,a);e.setVisibility(fS[r]),l.push(e,s),o=[e,s]}}else if("buffer"===t||"storageBuffer"===t||"indirectStorageBuffer"===t){const n=new("buffer"===t?X_:rS)(e,a);n.setVisibility(fS[r]),l.push(n),o=n,i.name=s||"NodeBuffer_"+i.id}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let s=e[u];void 0===s&&(s=new Q_(u,a),s.setVisibility(fS[r]),e[u]=s,l.push(s)),o=this.getNodeUniform(i,t),s.addUniform(o)}n.uniformGPU=o}return i}getBuiltin(e,t,r,s=this.shaderStage){const i=this.builtins[s]||(this.builtins[s]=new Map);return!1===i.has(e)&&i.set(e,{name:e,property:t,type:r}),t}hasBuiltin(e,t=this.shaderStage){return void 0!==this.builtins[t]&&this.builtins[t].has(e)}getVertexIndex(){return"vertex"===this.shaderStage?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(e.name+" : "+this.getType(e.type));let i=`fn ${t.name}( ${s.join(", ")} ) -> ${this.getType(t.type)} {\n${r.vars}\n${r.code}\n`;return r.result&&(i+=`\treturn ${r.result};\n`),i+="\n}\n",i}getInstanceIndex(){return"vertex"===this.shaderStage?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],r=this.directives[e];if(void 0!==r)for(const e of r)t.push(`enable ${e};`);return t.join("\n")}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],r=this.builtins[e];if(void 0!==r)for(const{name:e,property:s,type:i}of r.values())t.push(`@builtin( ${e} ) ${s} : ${i}`);return t.join(",\n\t")}getScopedArray(e,t,r,s){return!1===this.scopedArrays.has(e)&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:r,bufferCount:s}),e}getScopedArrays(e){if("compute"!==e)return;const t=[];for(const{name:e,scope:r,bufferType:s,bufferCount:i}of this.scopedArrays.values()){const n=this.getType(s);t.push(`var<${r}> ${e}: array< ${n}, ${i} >;`)}return t.join("\n")}getAttributes(e){const t=[];if("compute"===e&&(this.getBuiltin("global_invocation_id","globalId","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),"vertex"===e||"compute"===e){const e=this.getBuiltins("attribute");e&&t.push(e);const r=this.getAttributesArray();for(let e=0,s=r.length;e<s;e++){const s=r[e],i=s.name,n=this.getType(s.type);t.push(`@location( ${e} ) ${i} : ${n}`)}}return t.join(",\n\t")}getStructMembers(e){const t=[];for(const r of e.members){const s=e.output?"@location( "+r.index+" ) ":"";let i=this.getType(r.type);r.atomic&&(i="atomic< "+i+" >"),t.push(`\t${s+r.name} : ${i}`)}return t.join(",\n")}getStructs(e){let t="";const r=this.structs[e];if(r.length>0){const e=[];for(const t of r){let r=`struct ${t.name} {\n`;r+=this.getStructMembers(t),r+="\n};",e.push(r)}t="\n"+e.join("\n\n")+"\n"}return t}getVar(e,t,r=null){let s=`var ${t} : `;return s+=null!==r?this.generateArrayDeclaration(e,r):this.getType(e),s}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`\t${this.getVar(e.type,e.name,e.count)};`);return`\n${t.join("\n")}\n`}getVaryings(e){const t=[];if("vertex"===e&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),"vertex"===e||"fragment"===e){const r=this.varyings,s=this.vars[e];for(let i=0;i<r.length;i++){const n=r[i];if(n.needsInterpolation){let e=`@location( ${i} )`;/^(int|uint|ivec|uvec)/.test(n.type)&&(e+=" @interpolate( flat )"),t.push(`${e} ${n.name} : ${this.getType(n.type)}`)}else"vertex"===e&&!1===s.includes(n)&&s.push(n)}}const r=this.getBuiltins(e);r&&t.push(r);const s=t.join(",\n\t");return"vertex"===e?this._getWGSLStruct("VaryingsStruct","\t"+s):s}isCustomStruct(e){return e.value.isStorageBufferAttribute&&null!==e.node.structTypeNode}getUniforms(e){const t=this.uniforms[e],r=[],s=[],i=[],n={};for(const i of t){const t=i.groupNode.name,o=this.bindingsIndexes[t];if("texture"===i.type||"cubeTexture"===i.type||"storageTexture"===i.type||"texture3D"===i.type){const t=i.node.value;let s;"fragment"!==e&&"compute"!==e||!1!==this.isUnfilterable(t)||!0===i.node.isStorageTextureNode||(this.isSampleCompare(t)?r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler_comparison;`):r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler;`));let n="";const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(t);if(a>1&&(n="_multisampled"),!0===t.isCubeTexture)s="texture_cube<f32>";else if(!0===t.isDataArrayTexture||!0===t.isCompressedArrayTexture)s="texture_2d_array<f32>";else if(!0===t.isDepthTexture)s=`texture_depth${n}_2d`;else if(!0===t.isVideoTexture)s="texture_external";else if(!0===t.isData3DTexture)s="texture_3d<f32>";else if(!0===i.node.isStorageTextureNode){s=`texture_storage_2d<${aS(t)}, ${this.getStorageAccess(i.node,e)}>`}else{s=`texture${n}_2d<${this.getComponentTypeFromTexture(t).charAt(0)}32>`}r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name} : ${s};`)}else if("buffer"===i.type||"storageBuffer"===i.type||"indirectStorageBuffer"===i.type){const t=i.node,r=this.getType(t.getNodeType(this)),n=t.bufferCount,a=n>0&&"buffer"===i.type?", "+n:"",u=t.isStorageBufferNode?`storage, ${this.getStorageAccess(t,e)}`:"uniform";if(this.isCustomStruct(i))s.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var<${u}> ${i.name} : ${r};`);else{const e=`\tvalue : array< ${t.isAtomic?`atomic<${r}>`:`${r}`}${a} >`;s.push(this._getWGSLStructBinding(i.name,e,u,o.binding++,o.group))}}else{const e=this.getType(this.getVectorType(i.type)),t=i.groupNode.name;(n[t]||(n[t]={index:o.binding++,id:o.group,snippets:[]})).snippets.push(`\t${i.name} : ${e}`)}}for(const e in n){const t=n[e];i.push(this._getWGSLStructBinding(e,t.snippets.join(",\n"),"uniform",t.index,t.id))}let o=r.join("\n");return o+=s.join("\n"),o+=i.join("\n"),o}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){this.shaderStage=t;const r=e[t];r.uniforms=this.getUniforms(t),r.attributes=this.getAttributes(t),r.varyings=this.getVaryings(t),r.structs=this.getStructs(t),r.vars=this.getVars(t),r.codes=this.getCodes(t),r.directives=this.getDirectives(t),r.scopedArrays=this.getScopedArrays(t);let s="// code\n\n";s+=this.flowCode[t];const i=this.flowNodes[t],n=i[i.length-1],o=n.outputNode,a=void 0!==o&&!0===o.isOutputStructNode;for(const e of i){const i=this.getFlowData(e),u=e.name;if(u&&(s.length>0&&(s+="\n"),s+=`\t// flow -> ${u}\n`),s+=`${i.code}\n\t`,e===n&&"compute"!==t)if(s+="// result\n\n\t","vertex"===t)s+=`varyings.Vertex = ${i.result};`;else if("fragment"===t)if(a)r.returnType=o.getNodeType(this),r.structs+="var<private> output : "+r.returnType+";",s+=`return ${i.result};`;else{let e="\t@location(0) color: vec4<f32>";const t=this.getBuiltins("output");t&&(e+=",\n\t"+t),r.returnType="OutputStruct",r.structs+=this._getWGSLStruct("OutputStruct",e),r.structs+="\nvar<private> output : OutputStruct;",s+=`output.color = ${i.result};\n\n\treturn output;`}}r.flow=s}this.shaderStage=null,null!==this.material?(this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment)):this.computeShader=this._getWGSLComputeCode(e.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(e,t=null){let r;return null!==t&&(r=this._getWGSLMethod(e+"_"+t)),void 0===r&&(r=this._getWGSLMethod(e)),r||e}getType(e){return bS[e]||e}isAvailable(e){let t=yS[e];return void 0===t&&("float32Filterable"===e?t=this.renderer.hasFeature("float32-filterable"):"clipDistance"===e&&(t=this.renderer.hasFeature("clip-distances")),yS[e]=t),t}_getWGSLMethod(e){return void 0!==_S[e]&&this._include(e),vS[e]}_include(e){const t=_S[e];return t.build(this),null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${e.codes}\n\n@vertex\nfn main( ${e.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n\treturn varyings;\n\n}\n`}_getWGSLFragmentCode(e){return`${this.getSignature()}\n// global\n${NS}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@fragment\nfn main( ${e.varyings} ) -> ${e.returnType} {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLComputeCode(e,t){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${e.scopedArrays}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@compute @workgroup_size( ${t} )\nfn main( ${e.attributes} ) {\n\n\t// system\n\tinstanceIndex = globalId.x + globalId.y * numWorkgroups.x * u32(${t}) + globalId.z * numWorkgroups.x * numWorkgroups.y * u32(${t});\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLStruct(e,t){return`\nstruct ${e} {\n${t}\n};`}_getWGSLStructBinding(e,t,r,s=0,i=0){const n=e+"Struct";return`${this._getWGSLStruct(n,t)}\n@binding( ${s} ) @group( ${i} )\nvar<${r}> ${e} : ${n};`}}class RS{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return null!==e.depthTexture?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=Zv.Depth24PlusStencil8:e.depth&&(t=Zv.Depth24Plus),t}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const e=this.backend.renderer,r=e.getRenderTarget();t=r?r.samples:e.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const r=t>1&&null!==e.renderTarget&&!0!==e.isDepthTexture&&!0!==e.isFramebufferTexture;return{samples:t,primarySamples:r?1:t,isMSAA:r}}getCurrentColorFormat(e){let t;return t=null!==e.textures?this.getTextureFormatGPU(e.textures[0]):this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return null!==e.textures?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){return e.isPoints?Mv:e.isLineSegments||e.isMesh&&!0===t.wireframe?Bv:e.isLine?Fv:e.isMesh?Uv:void 0}getSampleCount(e){let t=1;return e>1&&(t=Math.pow(2,Math.floor(Math.log2(e))),2===t&&(t=4)),t}getSampleCountRenderContext(e){return null!==e.textures?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){const e=this.backend.parameters.outputType;if(void 0===e)return navigator.gpu.getPreferredCanvasFormat();if(e===fe)return Zv.BGRA8Unorm;if(e===Te)return Zv.RGBA16Float;throw new Error("Unsupported outputType")}}const AS=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),ES=new Map([[Oe,["float16"]]]),CS=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class wS{constructor(e){this.backend=e}createAttribute(e,t){const r=this._getBufferAttribute(e),s=this.backend,i=s.get(r);let n=i.buffer;if(void 0===n){const o=s.device;let a=r.array;if(!1===e.normalized)if(a.constructor===Int16Array)a=new Int32Array(a);else if(a.constructor===Uint16Array&&(a=new Uint32Array(a),t&GPUBufferUsage.INDEX))for(let e=0;e<a.length;e++)65535===a[e]&&(a[e]=4294967295);if(r.array=a,(r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute)&&3===r.itemSize){a=new a.constructor(4*r.count);for(let e=0;e<r.count;e++)a.set(r.array.subarray(3*e,3*e+3),4*e);r.itemSize=4,r.array=a}const u=a.byteLength+(4-a.byteLength%4)%4;n=o.createBuffer({label:r.name,size:u,usage:t,mappedAtCreation:!0}),new a.constructor(n.getMappedRange()).set(a),n.unmap(),i.buffer=n}}updateAttribute(e){const t=this._getBufferAttribute(e),r=this.backend,s=r.device,i=r.get(t).buffer,n=t.array,o=this._isTypedArray(n),a=t.updateRanges;if(0===a.length)s.queue.writeBuffer(i,0,n,0);else{const e=o?1:n.BYTES_PER_ELEMENT;for(let t=0,r=a.length;t<r;t++){const r=a[t],o=r.start*e,u=r.count*e;s.queue.writeBuffer(i,0,n,o,u)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),r=new Map;for(let e=0;e<t.length;e++){const s=t[e],i=s.array.BYTES_PER_ELEMENT,n=this._getBufferAttribute(s);let o=r.get(n);if(void 0===o){let e,t;!0===s.isInterleavedBufferAttribute?(e=s.data.stride*i,t=s.data.isInstancedInterleavedBuffer?YN:KN):(e=s.itemSize*i,t=s.isInstancedBufferAttribute?YN:KN),!1!==s.normalized||s.array.constructor!==Int16Array&&s.array.constructor!==Uint16Array||(e=4),o={arrayStride:e,attributes:[],stepMode:t},r.set(n,o)}const a=this._getVertexFormat(s),u=!0===s.isInterleavedBufferAttribute?s.offset*i:0;o.attributes.push({shaderLocation:e,offset:u,format:a})}return Array.from(r.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,r=t.device,s=t.get(this._getBufferAttribute(e)).buffer,i=s.size,n=r.createBuffer({label:`${e.name}_readback`,size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),o=r.createCommandEncoder({label:`readback_encoder_${e.name}`});o.copyBufferToBuffer(s,0,n,0,i);const a=o.finish();r.queue.submit([a]),await n.mapAsync(GPUMapMode.READ);const u=n.getMappedRange(),l=new e.array.constructor(u.slice(0));return n.unmap(),l.buffer}_getVertexFormat(e){const{itemSize:t,normalized:r}=e,s=e.array.constructor,i=e.constructor;let n;if(1===t)n=CS.get(s);else{const e=(ES.get(i)||AS.get(s))[r?1:0];if(e){const r=s.BYTES_PER_ELEMENT*t,i=4*Math.floor((r+3)/4)/s.BYTES_PER_ELEMENT;if(i%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");n=`${e}x${i}`}}return n||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),n}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class MS{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,r=t.device,s=[];let i=0;for(const r of e.bindings){const e={binding:i++,visibility:r.visibility};if(r.isUniformBuffer||r.isStorageBuffer){const t={};r.isStorageBuffer&&(4&r.visibility&&(r.access===Us.READ_WRITE||r.access===Us.WRITE_ONLY)?t.type=FN:t.type=UN),e.buffer=t}else if(r.isSampler){const t={};r.texture.isDepthTexture&&null!==r.texture.compareFunction&&(t.type="comparison"),e.sampler=t}else if(r.isSampledTexture&&r.texture.isVideoTexture)e.externalTexture={};else if(r.isSampledTexture&&r.store){const t={};t.format=this.backend.get(r.texture).texture.format;const s=r.access;t.access=s===Us.READ_WRITE?LN:s===Us.WRITE_ONLY?PN:IN,e.storageTexture=t}else if(r.isSampledTexture){const s={},{primarySamples:i}=t.utils.getTextureSampleData(r.texture);if(i>1&&(s.multisampled=!0,r.texture.isDepthTexture||(s.sampleType=VN)),r.texture.isDepthTexture)s.sampleType=ON;else if(r.texture.isDataTexture||r.texture.isDataArrayTexture||r.texture.isData3DTexture){const e=r.texture.type;e===T?s.sampleType=GN:e===b?s.sampleType=kN:e===w&&(this.backend.hasFeature("float32-filterable")?s.sampleType=DN:s.sampleType=VN)}r.isSampledCubeTexture?s.viewDimension=jN:r.texture.isDataArrayTexture||r.texture.isCompressedArrayTexture?s.viewDimension=HN:r.isSampledTexture3D&&(s.viewDimension=qN),e.texture=s}else console.error(`WebGPUBindingUtils: Unsupported binding "${r}".`);s.push(e)}return r.createBindGroupLayout({entries:s})}createBindings(e,t,r,s=0){const{backend:i,bindGroupLayoutCache:n}=this,o=i.get(e);let a,u=n.get(e.bindingsReference);void 0===u&&(u=this.createBindingsLayout(e),n.set(e.bindingsReference,u)),r>0&&(void 0===o.groups&&(o.groups=[],o.versions=[]),o.versions[r]===s&&(a=o.groups[r])),void 0===a&&(a=this.createBindGroup(e,u),r>0&&(o.groups[r]=a,o.versions[r]=s)),o.group=a,o.layout=u}updateBinding(e){const t=this.backend,r=t.device,s=e.buffer,i=t.get(e).buffer;r.queue.writeBuffer(i,0,s,0)}createBindGroupIndex(e,t){const r=this.backend.device,s=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,i=e[0],n=r.createBuffer({label:"bindingCameraIndex_"+i,size:16,usage:s});r.queue.writeBuffer(n,0,e,0);const o=[{binding:0,resource:{buffer:n}}];return r.createBindGroup({label:"bindGroupCameraIndex_"+i,layout:t,entries:o})}createBindGroup(e,t){const r=this.backend,s=r.device;let i=0;const n=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,i=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=s.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:i});e.buffer=n}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const s=t.attribute;e.buffer=r.get(s).buffer}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isSampler){const e=r.get(t.texture);n.push({binding:i,resource:e.sampler})}else if(t.isSampledTexture){const e=r.get(t.texture);let o;if(void 0!==e.externalTexture)o=s.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount,s=`view-${e.texture.width}-${e.texture.height}-${r}`;if(o=e[s],void 0===o){const i=XN;let n;n=t.isSampledCubeTexture?jN:t.isSampledTexture3D?qN:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?HN:WN,o=e[s]=e.texture.createView({aspect:i,dimension:n,mipLevelCount:r})}}n.push({binding:i,resource:o})}i++}return s.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:n})}}class BS{constructor(e){this.backend=e}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:r,material:s,geometry:i,pipeline:n}=e,{vertexProgram:o,fragmentProgram:a}=n,u=this.backend,l=u.device,d=u.utils,c=u.get(n),h=[];for(const t of e.getBindings()){const e=u.get(t);h.push(e.layout)}const p=u.attributeUtils.createShaderVertexBuffers(e);let g;!0===s.transparent&&s.blending!==D&&(g=this._getBlending(s));let m={};!0===s.stencilWrite&&(m={compare:this._getStencilCompare(s),failOp:this._getStencilOperation(s.stencilFail),depthFailOp:this._getStencilOperation(s.stencilZFail),passOp:this._getStencilOperation(s.stencilZPass)});const f=this._getColorWriteMask(s),y=[];if(null!==e.context.textures){const t=e.context.textures;for(let e=0;e<t.length;e++){const r=d.getTextureFormatGPU(t[e]);y.push({format:r,blend:g,writeMask:f})}}else{const t=d.getCurrentColorFormat(e.context);y.push({format:t,blend:g,writeMask:f})}const x=u.get(o).module,b=u.get(a).module,T=this._getPrimitiveState(r,i,s),_=this._getDepthCompare(s),v=d.getCurrentDepthStencilFormat(e.context),N=this._getSampleCount(e.context),S={label:`renderPipeline_${s.name||s.type}_${s.id}`,vertex:Object.assign({},x,{buffers:p}),fragment:Object.assign({},b,{targets:y}),primitive:T,multisample:{count:N,alphaToCoverageEnabled:s.alphaToCoverage&&N>1},layout:l.createPipelineLayout({bindGroupLayouts:h})},R={},A=e.context.depth,E=e.context.stencil;if(!0!==A&&!0!==E||(!0===A&&(R.format=v,R.depthWriteEnabled=s.depthWrite,R.depthCompare=_),!0===E&&(R.stencilFront=m,R.stencilBack={},R.stencilReadMask=s.stencilFuncMask,R.stencilWriteMask=s.stencilWriteMask),S.depthStencil=R),null===t)c.pipeline=l.createRenderPipeline(S);else{const e=new Promise((e=>{l.createRenderPipelineAsync(S).then((t=>{c.pipeline=t,e()}))}));t.push(e)}}createBundleEncoder(e){const t=this.backend,{utils:r,device:s}=t,i=r.getCurrentDepthStencilFormat(e),n={label:"renderBundleEncoder",colorFormats:[r.getCurrentColorFormat(e)],depthStencilFormat:i,sampleCount:this._getSampleCount(e)};return s.createRenderBundleEncoder(n)}createComputePipeline(e,t){const r=this.backend,s=r.device,i=r.get(e.computeProgram).module,n=r.get(e),o=[];for(const e of t){const t=r.get(e);o.push(t.layout)}n.pipeline=s.createComputePipeline({compute:i,layout:s.createPipelineLayout({bindGroupLayouts:o})})}_getBlending(e){let t,r;const s=e.blending,i=e.blendSrc,n=e.blendDst,o=e.blendEquation;if(s===Nt){const s=null!==e.blendSrcAlpha?e.blendSrcAlpha:i,a=null!==e.blendDstAlpha?e.blendDstAlpha:n,u=null!==e.blendEquationAlpha?e.blendEquationAlpha:o;t={srcFactor:this._getBlendFactor(i),dstFactor:this._getBlendFactor(n),operation:this._getBlendOperation(o)},r={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(a),operation:this._getBlendOperation(u)}}else{const i=(e,s,i,n)=>{t={srcFactor:e,dstFactor:s,operation:yN},r={srcFactor:i,dstFactor:n,operation:yN}};if(e.premultipliedAlpha)switch(s){case P:i(nN,lN,nN,lN);break;case At:i(nN,nN,nN,nN);break;case Rt:i(iN,aN,iN,nN);break;case St:i(iN,oN,iN,uN)}else switch(s){case P:i(uN,lN,nN,lN);break;case At:i(uN,nN,uN,nN);break;case Rt:i(iN,aN,iN,nN);break;case St:i(iN,oN,iN,oN)}}if(void 0!==t&&void 0!==r)return{color:t,alpha:r};console.error("THREE.WebGPURenderer: Invalid blending: ",s)}_getBlendFactor(e){let t;switch(e){case lt:t=iN;break;case dt:t=nN;break;case ct:t=oN;break;case ft:t=aN;break;case ht:t=uN;break;case yt:t=lN;break;case gt:t=dN;break;case xt:t=cN;break;case mt:t=hN;break;case bt:t=pN;break;case pt:t=gN;break;case 211:t=mN;break;case 212:t=fN;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const r=e.stencilFunc;switch(r){case Lr:t=Iv;break;case Ir:t=zv;break;case Pr:t=Lv;break;case Ur:t=Vv;break;case Fr:t=Dv;break;case Br:t=kv;break;case Mr:t=Ov;break;case wr:t=Gv;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",r)}return t}_getStencilOperation(e){let t;switch(e){case Wr:t=SN;break;case $r:t=RN;break;case zr:t=AN;break;case kr:t=EN;break;case Gr:t=CN;break;case Or:t=wN;break;case Vr:t=MN;break;case Dr:t=BN;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case ot:t=yN;break;case at:t=xN;break;case ut:t=bN;break;case jr:t=TN;break;case Hr:t=_N;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,r){const s={},i=this.backend.utils;switch(s.topology=i.getPrimitiveTopology(e,r),null!==t.index&&!0===e.isLine&&!0!==e.isLineSegments&&(s.stripIndexFormat=t.index.array instanceof Uint16Array?Yv:Qv),r.side){case je:s.frontFace=jv,s.cullMode=Kv;break;case _:s.frontFace=jv,s.cullMode=Xv;break;case ce:s.frontFace=jv,s.cullMode=qv;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",r.side)}return s}_getColorWriteMask(e){return!0===e.colorWrite?NN:vN}_getDepthCompare(e){let t;if(!1===e.depthTest)t=zv;else{const r=e.depthFunc;switch(r){case Pt:t=Iv;break;case Ut:t=zv;break;case Ft:t=Lv;break;case Bt:t=Vv;break;case Mt:t=Dv;break;case wt:t=kv;break;case Ct:t=Ov;break;case Et:t=Gv;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",r)}}return t}}class FS extends Ev{constructor(e,t,r=2048){super(r),this.device=e,this.type=t,this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxQueries,label:`queryset_global_timestamp_${t}`});const s=8*this.maxQueries;this.resolveBuffer=this.device.createBuffer({label:`buffer_timestamp_resolve_${t}`,size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.resultBuffer=this.device.createBuffer({label:`buffer_timestamp_result_${t}`,size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})}allocateQueriesForContext(e){if(!this.trackTimestamp||this.isDisposed)return null;if(this.currentQueryIndex+2>this.maxQueries)return it(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryOffsets.set(e.id,t),t}async resolveQueriesAsync(){if(!this.trackTimestamp||0===this.currentQueryIndex||this.isDisposed)return this.lastValue;if(this.pendingResolve)return this.pendingResolve;this.pendingResolve=this._resolveQueries();try{return await this.pendingResolve}finally{this.pendingResolve=null}}async _resolveQueries(){if(this.isDisposed)return this.lastValue;try{if("unmapped"!==this.resultBuffer.mapState)return this.lastValue;const e=new Map(this.queryOffsets),t=this.currentQueryIndex,r=8*t;this.currentQueryIndex=0,this.queryOffsets.clear();const s=this.device.createCommandEncoder();s.resolveQuerySet(this.querySet,0,t,this.resolveBuffer,0),s.copyBufferToBuffer(this.resolveBuffer,0,this.resultBuffer,0,r);const i=s.finish();if(this.device.queue.submit([i]),"unmapped"!==this.resultBuffer.mapState)return this.lastValue;if(await this.resultBuffer.mapAsync(GPUMapMode.READ,0,r),this.isDisposed)return"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue;const n=new BigUint64Array(this.resultBuffer.getMappedRange(0,r));let o=0;for(const[,t]of e){const e=n[t],r=n[t+1];o+=Number(r-e)/1e6}return this.resultBuffer.unmap(),this.lastValue=o,o}catch(e){return console.error("Error resolving queries:",e),"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue}}async dispose(){if(!this.isDisposed){if(this.isDisposed=!0,this.pendingResolve)try{await this.pendingResolve}catch(e){console.error("Error waiting for pending resolve:",e)}if(this.resultBuffer&&"mapped"===this.resultBuffer.mapState)try{this.resultBuffer.unmap()}catch(e){console.error("Error unmapping buffer:",e)}this.querySet&&(this.querySet.destroy(),this.querySet=null),this.resolveBuffer&&(this.resolveBuffer.destroy(),this.resolveBuffer=null),this.resultBuffer&&(this.resultBuffer.destroy(),this.resultBuffer=null),this.queryOffsets.clear(),this.pendingResolve=null}}}class US extends dv{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=void 0===e.alpha||e.alpha,this.parameters.requiredLimits=void 0===e.requiredLimits?{}:e.requiredLimits,this.trackTimestamp=!0===e.trackTimestamp,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new RS(this),this.attributeUtils=new wS(this),this.bindingUtils=new MS(this),this.pipelineUtils=new BS(this),this.textureUtils=new oS(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let r;if(void 0===t.device){const e={powerPreference:t.powerPreference},s="undefined"!=typeof navigator?await navigator.gpu.requestAdapter(e):null;if(null===s)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const i=Object.values(QN),n=[];for(const e of i)s.features.has(e)&&n.push(e);const o={requiredFeatures:n,requiredLimits:t.requiredLimits};r=await s.requestDevice(o)}else r=t.device;r.lost.then((t=>{const r={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(r)}));const s=void 0!==t.context?t.context:e.domElement.getContext("webgpu");this.device=r,this.context=s;const i=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(QN.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:i}),this.updateSize()}get coordinateSystem(){return d}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(null===e){const t=this.renderer;e={colorAttachments:[{view:null}]},!0!==this.renderer.depth&&!0!==this.renderer.stencil||(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const r=e.colorAttachments[0];this.renderer.samples>0?r.view=this.colorBuffer.createView():r.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_getRenderPassDescriptor(e,t={}){const r=e.renderTarget,s=this.get(r);let i=s.descriptors;if(void 0===i||s.width!==r.width||s.height!==r.height||s.dimensions!==r.dimensions||s.activeMipmapLevel!==r.activeMipmapLevel||s.activeCubeFace!==e.activeCubeFace||s.samples!==r.samples||s.loadOp!==t.loadOp){i={},s.descriptors=i;const e=()=>{r.removeEventListener("dispose",e),this.delete(r)};r.addEventListener("dispose",e)}const n=e.getCacheKey();let o=i[n];if(void 0===o){const a=e.textures,u=[];let l;for(let s=0;s<a.length;s++){const i=this.get(a[s]),n={label:`colorAttachment_${s}`,baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,arrayLayerCount:1,dimension:WN};r.isRenderTarget3D?(l=e.activeCubeFace,n.baseArrayLayer=0,n.dimension=qN,n.depthOrArrayLayers=a[s].image.depth):r.isRenderTargetArray&&(n.dimension=HN,n.depthOrArrayLayers=a[s].image.depth);const o=i.texture.createView(n);let d,c;void 0!==i.msaaTexture?(d=i.msaaTexture.createView(),c=o):(d=o,c=void 0),u.push({view:d,depthSlice:l,resolveTarget:c,loadOp:Wv,storeOp:$v,...t})}if(o={colorAttachments:u},e.depth){const t={view:this.get(e.depthTexture).texture.createView()};o.depthStencilAttachment=t}i[n]=o,s.width=r.width,s.height=r.height,s.samples=r.samples,s.activeMipmapLevel=e.activeMipmapLevel,s.activeCubeFace=e.activeCubeFace,s.dimensions=r.dimensions,s.depthSlice=l,s.loadOp=u[0].loadOp}return o}beginRender(e){const t=this.get(e),r=this.device,s=e.occlusionQueryCount;let i,n;s>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,i=r.createQuerySet({type:"occlusion",count:s,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=i,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(s),t.lastOcclusionObject=null),n=null===e.textures?this._getDefaultRenderPassDescriptor():this._getRenderPassDescriptor(e,{loadOp:Wv}),this.initTimestampQuery(e,n),n.occlusionQuerySet=i;const o=n.depthStencilAttachment;if(null!==e.textures){const t=n.colorAttachments;for(let r=0;r<t.length;r++){const s=t[r];e.clearColor?(s.clearValue=0===r?e.clearColorValue:{r:0,g:0,b:0,a:1},s.loadOp=Hv,s.storeOp=$v):(s.loadOp=Wv,s.storeOp=$v)}}else{const t=n.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=Hv,t.storeOp=$v):(t.loadOp=Wv,t.storeOp=$v)}e.depth&&(e.clearDepth?(o.depthClearValue=e.clearDepthValue,o.depthLoadOp=Hv,o.depthStoreOp=$v):(o.depthLoadOp=Wv,o.depthStoreOp=$v)),e.stencil&&(e.clearStencil?(o.stencilClearValue=e.clearStencilValue,o.stencilLoadOp=Hv,o.stencilStoreOp=$v):(o.stencilLoadOp=Wv,o.stencilStoreOp=$v));const a=r.createCommandEncoder({label:"renderContext_"+e.id}),u=a.beginRenderPass(n);if(t.descriptor=n,t.encoder=a,t.currentPass=u,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[],e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:r,width:s,height:i}=e.scissorValue;u.setScissorRect(t,r,s,i)}}finishRender(e){const t=this.get(e),r=e.occlusionQueryCount;if(t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),r>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery(),t.currentPass.end(),r>0){const s=8*r;let i=this.occludedResolveCache.get(s);void 0===i&&(i=this.device.createBuffer({size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(s,i));const n=this.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,r,i,0),t.encoder.copyBufferToBuffer(i,0,n,0,s),t.occlusionQueryBuffer=n,this.resolveOccludedAsync(e)}if(this.device.queue.submit([t.encoder.finish()]),null!==e.textures){const t=e.textures;for(let e=0;e<t.length;e++){const r=t[e];!0===r.generateMipmaps&&this.textureUtils.generateMipmaps(r)}}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await r.mapAsync(GPUMapMode.READ);const i=r.getMappedRange(),n=new BigUint64Array(i);for(let t=0;t<s.length;t++)n[t]===BigInt(0)&&e.add(s[t]);r.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:r,y:s,width:i,height:n,minDepth:o,maxDepth:a}=e.viewportValue;t.setViewport(r,s,i,n,o,a)}clear(e,t,r,s=null){const i=this.device,n=this.renderer;let o,a,u,l,d=[];if(e){const e=this.getClearColor();if(!0===this.renderer.alpha){const t=e.a;a={r:e.r*t,g:e.g*t,b:e.b*t,a:t}}else a={r:e.r,g:e.g,b:e.b,a:e.a}}if(null===s){u=n.depth,l=n.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){d=t.colorAttachments;const e=d[0];e.clearValue=a,e.loadOp=Hv,e.storeOp=$v}(u||l)&&(o=t.depthStencilAttachment)}else{if(u=s.depth,l=s.stencil,e){d=this._getRenderPassDescriptor(s,{loadOp:Hv,clearValue:a}).colorAttachments}if(u||l){o={view:this.get(s.depthTexture).texture.createView()}}}u&&(t?(o.depthLoadOp=Hv,o.depthClearValue=n.getClearDepth(),o.depthStoreOp=$v):(o.depthLoadOp=Wv,o.depthStoreOp=$v)),l&&(r?(o.stencilLoadOp=Hv,o.stencilClearValue=n.getClearStencil(),o.stencilStoreOp=$v):(o.stencilLoadOp=Wv,o.stencilStoreOp=$v));const c=i.createCommandEncoder({label:"clear"});c.beginRenderPass({colorAttachments:d,depthStencilAttachment:o}).end(),i.queue.submit([c.finish()])}beginCompute(e){const t=this.get(e),r={label:"computeGroup_"+e.id};this.initTimestampQuery(e,r),t.cmdEncoderGPU=this.device.createCommandEncoder({label:"computeGroup_"+e.id}),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(r)}compute(e,t,r,s){const{passEncoderGPU:i}=this.get(e),n=this.get(s).pipeline;i.setPipeline(n);for(let e=0,t=r.length;e<t;e++){const t=r[e],s=this.get(t);i.setBindGroup(e,s.group)}const o=this.device.limits.maxComputeWorkgroupsPerDimension,a=this.get(t);void 0===a.dispatchSize&&(a.dispatchSize={x:0,y:1,z:1});const{dispatchSize:u}=a;t.dispatchCount>o?(u.x=Math.min(t.dispatchCount,o),u.y=Math.ceil(t.dispatchCount/o)):u.x=t.dispatchCount,i.dispatchWorkgroups(u.x,u.y,u.z)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:r,context:s,pipeline:i}=e,n=e.getBindings(),o=this.get(s),a=this.get(i).pipeline,u=o.currentSets,l=o.currentPass,d=e.getDrawParameters();if(null===d)return;u.pipeline!==a&&(l.setPipeline(a),u.pipeline=a);const c=u.bindingGroups;for(let e=0,t=n.length;e<t;e++){const t=n[e],r=this.get(t);c[t.index]!==t.id&&(l.setBindGroup(t.index,r.group),c[t.index]=t.id)}const h=e.getIndex(),p=null!==h;if(!0===p&&u.index!==h){const e=this.get(h).buffer,t=h.array instanceof Uint16Array?Yv:Qv;l.setIndexBuffer(e,t),u.index=h}const g=e.getVertexBuffers();for(let e=0,t=g.length;e<t;e++){const t=g[e];if(u.attributes[e]!==t){const r=this.get(t).buffer;l.setVertexBuffer(e,r),u.attributes[e]=t}}if(void 0!==o.occlusionQuerySet){const e=o.lastOcclusionObject;e!==r&&(null!==e&&!0===e.occlusionTest&&(l.endOcclusionQuery(),o.occlusionQueryIndex++),!0===r.occlusionTest&&(l.beginOcclusionQuery(o.occlusionQueryIndex),o.occlusionQueryObjects[o.occlusionQueryIndex]=r),o.lastOcclusionObject=r)}const m=()=>{if(!0===r.isBatchedMesh){const e=r._multiDrawStarts,t=r._multiDrawCounts,s=r._multiDrawCount,i=r._multiDrawInstances;for(let r=0;r<s;r++){const s=i?i[r]:1,n=s>1?0:r;!0===p?l.drawIndexed(t[r],s,e[r]/h.array.BYTES_PER_ELEMENT,0,n):l.draw(t[r],s,e[r],n)}}else if(!0===p){const{vertexCount:s,instanceCount:i,firstVertex:n}=d,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;l.drawIndexedIndirect(e,0)}else l.drawIndexed(s,i,n,0,0);t.update(r,s,i)}else{const{vertexCount:s,instanceCount:i,firstVertex:n}=d,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;l.drawIndirect(e,0)}else l.draw(s,i,n,0);t.update(r,s,i)}};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const t=this.get(e.camera),i=e.camera.cameras,n=e.getBindingGroup("cameraIndex");if(void 0===t.indexesGPU||t.indexesGPU.length!==i.length){const e=this.get(n),r=[],s=new Uint32Array([0,0,0,0]);for(let t=0,n=i.length;t<n;t++){s[0]=t;const i=this.bindingUtils.createBindGroupIndex(s,e.layout);r.push(i)}t.indexesGPU=r}const o=this.renderer.getPixelRatio();for(let e=0,a=i.length;e<a;e++){const a=i[e];if(r.layers.test(a.layers)){const r=a.viewport;l.setViewport(Math.floor(r.x*o),Math.floor(r.y*o),Math.floor(r.width*o),Math.floor(r.height*o),s.viewportValue.minDepth,s.viewportValue.maxDepth),l.setBindGroup(n.index,t.indexesGPU[e]),m()}}}else m()}needsRenderUpdate(e){const t=this.get(e),{object:r,material:s}=e,i=this.utils,n=i.getSampleCountRenderContext(e.context),o=i.getCurrentColorSpace(e.context),a=i.getCurrentColorFormat(e.context),u=i.getCurrentDepthStencilFormat(e.context),l=i.getPrimitiveTopology(r,s);let d=!1;return t.material===s&&t.materialVersion===s.version&&t.transparent===s.transparent&&t.blending===s.blending&&t.premultipliedAlpha===s.premultipliedAlpha&&t.blendSrc===s.blendSrc&&t.blendDst===s.blendDst&&t.blendEquation===s.blendEquation&&t.blendSrcAlpha===s.blendSrcAlpha&&t.blendDstAlpha===s.blendDstAlpha&&t.blendEquationAlpha===s.blendEquationAlpha&&t.colorWrite===s.colorWrite&&t.depthWrite===s.depthWrite&&t.depthTest===s.depthTest&&t.depthFunc===s.depthFunc&&t.stencilWrite===s.stencilWrite&&t.stencilFunc===s.stencilFunc&&t.stencilFail===s.stencilFail&&t.stencilZFail===s.stencilZFail&&t.stencilZPass===s.stencilZPass&&t.stencilFuncMask===s.stencilFuncMask&&t.stencilWriteMask===s.stencilWriteMask&&t.side===s.side&&t.alphaToCoverage===s.alphaToCoverage&&t.sampleCount===n&&t.colorSpace===o&&t.colorFormat===a&&t.depthStencilFormat===u&&t.primitiveTopology===l&&t.clippingContextCacheKey===e.clippingContextCacheKey||(t.material=s,t.materialVersion=s.version,t.transparent=s.transparent,t.blending=s.blending,t.premultipliedAlpha=s.premultipliedAlpha,t.blendSrc=s.blendSrc,t.blendDst=s.blendDst,t.blendEquation=s.blendEquation,t.blendSrcAlpha=s.blendSrcAlpha,t.blendDstAlpha=s.blendDstAlpha,t.blendEquationAlpha=s.blendEquationAlpha,t.colorWrite=s.colorWrite,t.depthWrite=s.depthWrite,t.depthTest=s.depthTest,t.depthFunc=s.depthFunc,t.stencilWrite=s.stencilWrite,t.stencilFunc=s.stencilFunc,t.stencilFail=s.stencilFail,t.stencilZFail=s.stencilZFail,t.stencilZPass=s.stencilZPass,t.stencilFuncMask=s.stencilFuncMask,t.stencilWriteMask=s.stencilWriteMask,t.side=s.side,t.alphaToCoverage=s.alphaToCoverage,t.sampleCount=n,t.colorSpace=o,t.colorFormat=a,t.depthStencilFormat=u,t.primitiveTopology=l,t.clippingContextCacheKey=e.clippingContextCacheKey,d=!0),d}getRenderCacheKey(e){const{object:t,material:r}=e,s=this.utils,i=e.context;return[r.transparent,r.blending,r.premultipliedAlpha,r.blendSrc,r.blendDst,r.blendEquation,r.blendSrcAlpha,r.blendDstAlpha,r.blendEquationAlpha,r.colorWrite,r.depthWrite,r.depthTest,r.depthFunc,r.stencilWrite,r.stencilFunc,r.stencilFail,r.stencilZFail,r.stencilZPass,r.stencilFuncMask,r.stencilWriteMask,r.side,s.getSampleCountRenderContext(i),s.getCurrentColorSpace(i),s.getCurrentColorFormat(i),s.getCurrentDepthStencilFormat(i),s.getPrimitiveTopology(t,r),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const r=e.isComputeNode?"compute":"render";this.timestampQueryPool[r]||(this.timestampQueryPool[r]=new FS(this.device,r,2048));const s=this.timestampQueryPool[r],i=s.allocateQueriesForContext(e);t.timestampWrites={querySet:s.querySet,beginningOfPassWriteIndex:i,endOfPassWriteIndex:i+1}}createNodeBuilder(e,t){return new SS(e,t)}createProgram(e){this.get(e).module={module:this.device.createShaderModule({code:e.code,label:e.stage+(""!==e.name?`_${e.name}`:"")}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const r=this.get(e),s=r.currentPass.finish();this.get(t).bundleGPU=s,r.currentSets=r._currentSets,r.currentPass=r._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,r=null,s=null,i=0){let n=0,o=0,a=0,u=0,l=0,d=0,c=e.image.width,h=e.image.height;null!==r&&(u=r.x,l=r.y,d=r.z||0,c=r.width,h=r.height),null!==s&&(n=s.x,o=s.y,a=s.z||0);const p=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),g=this.get(e).texture,m=this.get(t).texture;p.copyTextureToTexture({texture:g,mipLevel:i,origin:{x:u,y:l,z:d}},{texture:m,mipLevel:i,origin:{x:n,y:o,z:a}},[c,h,1]),this.device.queue.submit([p.finish()])}copyFramebufferToTexture(e,t,r){const s=this.get(t);let i=null;i=t.renderTarget?e.isDepthTexture?this.get(t.depthTexture).texture:this.get(t.textures[0]).texture:e.isDepthTexture?this.textureUtils.getDepthBuffer(t.depth,t.stencil):this.context.getCurrentTexture();const n=this.get(e).texture;if(i.format!==n.format)return void console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",i.format,n.format);let o;if(s.currentPass?(s.currentPass.end(),o=s.encoder):o=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),o.copyTextureToTexture({texture:i,origin:[r.x,r.y,0]},{texture:n},[r.z,r.w]),e.generateMipmaps&&this.textureUtils.generateMipmaps(e),s.currentPass){const{descriptor:e}=s;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=Wv;if(t.depth&&(e.depthStencilAttachment.depthLoadOp=Wv),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=Wv),s.currentPass=o.beginRenderPass(e),s.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:e,y:r,width:i,height:n}=t.scissorValue;s.currentPass.setScissorRect(e,r,i,n)}}else this.device.queue.submit([o.finish()])}}class PS extends qr{constructor(e,t,r,s,i,n){super(e,t,r,s,i,n),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class IS extends S_{constructor(){super(),this.addLight(Jx,Xr),this.addLight(ZT,Kr),this.addLight(r_,Yr),this.addLight(s_,qr),this.addLight(n_,Qr),this.addLight(o_,Zr),this.addLight(a_,Jr),this.addLight(i_,PS),this.addToneMapping(yy,es),this.addToneMapping(xy,ts),this.addToneMapping(by,rs),this.addToneMapping(_y,ss),this.addToneMapping(Ry,is),this.addToneMapping(Ay,ns)}}class LS extends $_{constructor(e={}){let t;e.forceWebGL?t=wv:(t=US,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new wv(e)));super(new t(e),e),this.library=new IS,this.isWebGPURenderer=!0}}class DS extends os{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}}class VS{constructor(e,t=Yi(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0;const r=new mh;r.name="PostProcessing",this._quadMesh=new Nf(r)}render(){this._update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=p,e.outputColorSpace=Ce,this._quadMesh.render(e),e.toneMapping=t,e.outputColorSpace=r}dispose(){this._quadMesh.material.dispose()}_update(){if(!0===this.needsUpdate){const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;this._quadMesh.material.fragmentNode=!0===this.outputColorTransform?Cu(this.outputNode,t,r):this.outputNode.context({toneMapping:t,outputColorSpace:r}),this._quadMesh.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this._update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=p,e.outputColorSpace=Ce,await this._quadMesh.renderAsync(e),e.toneMapping=t,e.outputColorSpace=r}}class OS extends ee{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=$,this.minFilter=$,this.isStorageTexture=!0}}class GS extends Bf{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class kS extends as{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,r,s){const i=new us(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(r=>{try{t(this.parse(JSON.parse(r)))}catch(t){s?s(t):console.error(t),this.manager.itemError(e)}}),r,s)}parseNodes(e){const t={};if(void 0!==e){for(const r of e){const{uuid:e,type:s}=r;t[e]=this.createNodeFromType(s),t[e].uuid=e}const r={nodes:t,textures:this.textures};for(const s of e){s.meta=r;t[s.uuid].deserialize(s),delete s.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const r={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=r,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),Vi()):Ei(new this.nodes[e])}}class zS extends ls{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),r=this.nodes,s=e.inputNodes;for(const e in s){const i=s[e];t[e]=r[i]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return void 0!==t?new t:super.createMaterialFromType(e)}}class $S extends ds{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const r=super.parse(e,t);return this._nodesJSON=null,r}parseNodes(e,t){if(void 0!==e){const r=new kS;return r.setNodes(this.nodes),r.setTextures(t),r.parseNodes(e)}return{}}parseMaterials(e,t){const r={};if(void 0!==e){const s=this.parseNodes(this._nodesJSON,t),i=new zS;i.setTextures(t),i.setNodes(s),i.setNodeMaterials(this.nodeMaterials);for(let t=0,s=e.length;t<s;t++){const s=e[t];r[s.uuid]=i.parse(s)}}return r}}class WS extends os{constructor(){super(),this.isClippingGroup=!0,this.clippingPlanes=[],this.enabled=!0,this.clipIntersection=!1,this.clipShadows=!1}}export{ss as ACESFilmicToneMapping,Bc as AONode,ot as AddEquation,X as AddOperation,At as AdditiveBlending,is as AgXToneMapping,Vt as AlphaFormat,Nr as AlwaysCompare,Ut as AlwaysDepth,Ir as AlwaysStencilFunc,Qr as AmbientLight,n_ as AmbientLightNode,kx as AnalyticLightNode,ke as ArrayCamera,Gs as ArrayElementNode,on as ArrayNode,qn as AssignNode,wu as AttributeNode,_ as BackSide,Lh as BasicEnvironmentNode,Fe as BasicShadowMap,yc as BatchNode,G as BoxGeometry,Re as BufferAttribute,du as BufferAttributeNode,Ne as BufferGeometry,Ou as BufferNode,yd as BumpMapNode,DS as BundleGroup,bu as BypassNode,rt as ByteType,yu as CacheNode,he as Camera,rs as CineonToneMapping,xr as ClampToEdgeWrapping,WS as ClippingGroup,Ey as CodeNode,e as Color,c as ColorManagement,Za as ColorSpaceNode,mu as ComputeNode,Ys as ConstNode,Da as ContextNode,ks as ConvertNode,W as CubeCamera,v as CubeReflectionMapping,N as CubeRefractionMapping,H as CubeTexture,zl as CubeTextureNode,Pe as CubeUVReflectionMapping,_t as CullFaceBack,vt as CullFaceFront,Tt as CullFaceNone,Nt as CustomBlending,C as DataArrayTexture,Xe as DataTexture,Or as DecrementStencilOp,Dr as DecrementWrapStencilOp,ge as DepthFormat,pe as DepthStencilFormat,F as DepthTexture,Kr as DirectionalLight,ZT as DirectionalLightNode,ce as DoubleSide,mt as DstAlphaFactor,gt as DstColorFactor,f as DynamicDrawUsage,hg as EnvironmentNode,Rr as EqualCompare,Mt as EqualDepth,Fr as EqualStencilFunc,Ch as EquirectUVNode,j as EquirectangularReflectionMapping,q as EquirectangularRefractionMapping,Ee as Euler,a as EventDispatcher,Su as ExpressionNode,us as FileLoader,Oe as Float16BufferAttribute,Se as Float32BufferAttribute,w as FloatType,M as FramebufferTexture,Sl as FrontFacingNode,je as FrontSide,qe as Frustum,Kn as FunctionCallNode,wy as FunctionNode,$m as FunctionOverloadingNode,g_ as GLSLNodeParser,Er as GreaterCompare,Ct as GreaterDepth,Ar as GreaterEqualCompare,wt as GreaterEqualDepth,Br as GreaterEqualStencilFunc,Mr as GreaterStencilFunc,os as Group,Te as HalfFloatType,Zr as HemisphereLight,o_ as HemisphereLightNode,PS as IESSpotLight,i_ as IESSpotLightNode,Gr as IncrementStencilOp,Vr as IncrementWrapStencilOp,oc as IndexNode,GS as IndirectStorageBufferAttribute,pc as InstanceNode,E as InstancedBufferAttribute,A as InstancedInterleavedBuffer,mc as InstancedMeshNode,T as IntType,m as InterleavedBuffer,y as InterleavedBufferAttribute,kr as InvertStencilOp,Pc as IrradianceNode,$s as JoinNode,Wr as KeepStencilOp,we as LessCompare,Ft as LessDepth,Sr as LessEqualCompare,Bt as LessEqualDepth,Ur as LessEqualStencilFunc,Pr as LessStencilFunc,Jr as LightProbe,a_ as LightProbeNode,E_ as Lighting,Fc as LightingContextNode,Vh as LightingModel,Mc as LightingNode,mx as LightsNode,Sh as Line2NodeMaterial,I as LineBasicMaterial,yh as LineBasicNodeMaterial,L as LineDashedMaterial,bh as LineDashedNodeMaterial,$ as LinearFilter,_e as LinearMipMapLinearFilter,B as LinearMipmapLinearFilter,De as LinearMipmapNearestFilter,Ce as LinearSRGBColorSpace,es as LinearToneMapping,as as Loader,vc as LoopNode,Gt as LuminanceAlphaFormat,Ot as LuminanceFormat,Lm as MRTNode,Rg as MatcapUVNode,U as Material,ls as MaterialLoader,Td as MaterialNode,Xl as MaterialReferenceNode,u as MathUtils,i as Matrix2,n as Matrix3,o as Matrix4,Hr as MaxEquation,Pu as MaxMipLevelNode,Qs as MemberNode,k as Mesh,Q as MeshBasicMaterial,kh as MeshBasicNodeMaterial,Z as MeshLambertMaterial,Xh as MeshLambertNodeMaterial,ie as MeshMatcapMaterial,Cg as MeshMatcapNodeMaterial,V as MeshNormalMaterial,Eh as MeshNormalNodeMaterial,J as MeshPhongMaterial,Yh as MeshPhongNodeMaterial,re as MeshPhysicalMaterial,xg as MeshPhysicalNodeMaterial,Tg as MeshSSSNodeMaterial,te as MeshStandardMaterial,fg as MeshStandardNodeMaterial,se as MeshToonMaterial,Sg as MeshToonNodeMaterial,jr as MinEquation,br as MirroredRepeatWrapping,K as MixOperation,nl as ModelNode,Cc as MorphNode,St as MultiplyBlending,Y as MultiplyOperation,Tr as NearestFilter,Ve as NearestMipmapLinearFilter,_r as NearestMipmapNearestFilter,ns as NeutralToneMapping,vr as NeverCompare,Pt as NeverDepth,Lr as NeverStencilFunc,D as NoBlending,x as NoColorSpace,p as NoToneMapping,Os as Node,Us as NodeAccess,eT as NodeAttribute,KT as NodeBuilder,oT as NodeCache,iT as NodeCode,YT as NodeFrame,QT as NodeFunctionInput,kS as NodeLoader,mh as NodeMaterial,zS as NodeMaterialLoader,hs as NodeMaterialObserver,$S as NodeObjectLoader,Ms as NodeShaderStage,Fs as NodeType,tT as NodeUniform,Bs as NodeUpdateType,ws as NodeUtils,rT as NodeVar,sT as NodeVarying,P as NormalBlending,pd as NormalMapNode,Cr as NotEqualCompare,Et as NotEqualDepth,wr as NotEqualStencilFunc,be as Object3D,Ju as Object3DNode,ds as ObjectLoader,R as ObjectSpaceNormalMap,dt as OneFactor,bt as OneMinusDstAlphaFactor,xt as OneMinusDstColorFactor,yt as OneMinusSrcAlphaFactor,ft as OneMinusSrcColorFactor,ve as OrthographicCamera,Um as OutputStructNode,He as PCFShadowMap,GT as PMREMGenerator,lg as PMREMNode,Cm as ParameterNode,my as PassNode,Ie as PerspectiveCamera,jh as PhongLightingModel,Op as PhysicalLightingModel,xe as Plane,Xr as PointLight,Jx as PointLightNode,Df as PointUVNode,oe as PointsMaterial,Pg as PointsNodeMaterial,VS as PostProcessing,dy as PosterizeNode,fn as PropertyNode,Nf as QuadMesh,mr as RED_GREEN_RGTC2_Format,pr as RED_RGTC1_Format,Ge as REVISION,Le as RGBAFormat,et as RGBAIntegerFormat,lr as RGBA_ASTC_10x10_Format,or as RGBA_ASTC_10x5_Format,ar as RGBA_ASTC_10x6_Format,ur as RGBA_ASTC_10x8_Format,dr as RGBA_ASTC_12x10_Format,cr as RGBA_ASTC_12x12_Format,Zt as RGBA_ASTC_4x4_Format,Jt as RGBA_ASTC_5x4_Format,er as RGBA_ASTC_5x5_Format,tr as RGBA_ASTC_6x5_Format,rr as RGBA_ASTC_6x6_Format,sr as RGBA_ASTC_8x5_Format,ir as RGBA_ASTC_8x6_Format,nr as RGBA_ASTC_8x8_Format,hr as RGBA_BPTC_Format,Qt as RGBA_ETC2_EAC_Format,Xt as RGBA_PVRTC_2BPPV1_Format,qt as RGBA_PVRTC_4BPPV1_Format,zt as RGBA_S3TC_DXT1_Format,$t as RGBA_S3TC_DXT3_Format,Wt as RGBA_S3TC_DXT5_Format,Je as RGBFormat,Ze as RGBIntegerFormat,Kt as RGB_ETC1_Format,Yt as RGB_ETC2_Format,jt as RGB_PVRTC_2BPPV1_Format,Ht as RGB_PVRTC_4BPPV1_Format,kt as RGB_S3TC_DXT1_Format,Be as RGFormat,Qe as RGIntegerFormat,Rf as RTTNode,Wy as RangeNode,Yr as RectAreaLight,r_ as RectAreaLightNode,Ye as RedFormat,Ke as RedIntegerFormat,Hl as ReferenceNode,xf as ReflectorNode,ts as ReinhardToneMapping,_u as RemapNode,Eu as RenderOutputNode,ye as RenderTarget,nu as RendererReferenceNode,Ax as RendererUtils,yr as RepeatWrapping,zr as ReplaceStencilOp,ut as ReverseSubtractEquation,wg as RotateNode,fr as SIGNED_RED_GREEN_RGTC2_Format,gr as SIGNED_RED_RGTC1_Format,We as SRGBColorSpace,h as SRGBTransfer,z as Scene,kf as SceneNode,Dc as ScreenNode,Ly as ScriptableNode,By as ScriptableValueNode,js as SetNode,fx as ShadowBaseNode,ae as ShadowMaterial,Ox as ShadowNode,Dg as ShadowNodeMaterial,st as ShortType,Tc as SkinningNode,Ue as SphereGeometry,Hs as SplitNode,qr as SpotLight,s_ as SpotLightNode,ne as SpriteMaterial,Fg as SpriteNodeMaterial,Jm as SpriteSheetUVNode,ht as SrcAlphaFactor,pt as SrcAlphaSaturateFactor,ct as SrcColorFactor,wm as StackNode,g as StaticDrawUsage,Ff as StorageArrayElementNode,Bf as StorageBufferAttribute,Pf as StorageBufferNode,Mf as StorageInstancedBufferAttribute,OS as StorageTexture,Hf as StorageTextureNode,Fm as StructNode,Bm as StructTypeNode,at as SubtractEquation,Rt as SubtractiveBlending,Xb as TSL,S as TangentSpaceNormalMap,zs as TempNode,ee as Texture,Og as Texture3DNode,Lu as TextureNode,Fu as TextureSizeNode,au as ToneMappingNode,fy as ToonOutlinePassNode,tf as TriplanarTexturesNode,Ae as UVMapping,de as Uint16BufferAttribute,le as Uint32BufferAttribute,zu as UniformArrayNode,un as UniformGroupNode,gn as UniformNode,fe as UnsignedByteType,me as UnsignedInt248Type,Dt as UnsignedInt5999Type,b as UnsignedIntType,It as UnsignedShort4444Type,Lt as UnsignedShort5551Type,tt as UnsignedShortType,qf as UserDataNode,Me as VSMShadowMap,Ga as VarNode,Ha as VaryingNode,t as Vector2,r as Vector3,s as Vector4,Lf as VertexColorNode,th as ViewportDepthNode,Jc as ViewportDepthTextureNode,_h as ViewportSharedTextureNode,Kc as ViewportTextureNode,kg as VolumeNodeMaterial,l as WebGLCoordinateSystem,O as WebGLCubeRenderTarget,d as WebGPUCoordinateSystem,LS as WebGPURenderer,ze as WebXRController,lt as ZeroFactor,$r as ZeroStencilOp,nt as createCanvasElement,Is as defaultBuildStages,Ps as defaultShaderStages,Ls as shaderStages,Ds as vectorComponents};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
